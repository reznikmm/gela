Synthesized attributes
  character_literal,
  defining_character_literal,
  defining_designator,
  defining_enumeration_literal,
  defining_enumeration_name,
  defining_expanded_unit_name,
  defining_identifier,
  defining_operator_symbol,
  defining_program_unit_name,
  defining_name,
  function_body,
  function_declaration,
  function_instantiation,
  generic_package_declaration,
  generic_package_renaming,
  generic_function_declaration,
  generic_function_renaming,
  generic_procedure_declaration,
  generic_procedure_renaming,
  identifier,
  library_unit_body,
  library_unit_declaration,
  operator_symbol,
  package_body,
  package_declaration,
  package_instantiation,
  package_renaming_declaration,
  procedure_body,
  procedure_declaration,
  procedure_instantiation,
  program_unit_name,
  proper_body,
  protected_body,
  selected_identifier,
  selector_name,
  task_body
  : Gela.Lexical_Types.Symbol : full_name;

Rules for defining_character_literal.character_literal :
(.
      ${defining_character_literal.full_name} :=
        Self.Compilation.Get_Token (${character_literal.Index}).Symbol;
.)

Rules for defining_enumeration_literal.identifier :
(.
      ${defining_enumeration_literal.full_name} :=
        Self.Compilation.Get_Token (${identifier.Index}).Symbol;
.)

Rules for defining_identifier.identifier_token :
(.
      ${defining_identifier.full_name} := 
        Self.Compilation.Get_Token (${identifier_token.Index}).Symbol;
.)

Rules for defining_operator_symbol.operator_symbol_token :
(.
      ${defining_operator_symbol.full_name} :=
        Self.Compilation.Get_Token (${operator_symbol_token.Index}).Symbol;
.)

Rules for identifier.identifier_token :
(.
      ${identifier.full_name} :=
        Self.Compilation.Get_Token (${identifier_token.Index}).Symbol;
.)

Rules for operator_symbol.operator_symbol_token :
(.
      ${operator_symbol.full_name} :=
        Self.Compilation.Get_Token (${operator_symbol_token.Index}).Symbol;
.)

Rules for character_literal.character_literal_token :
(.
      ${character_literal.full_name} :=
        Self.Compilation.Get_Token (${character_literal_token.Index}).Symbol;
.)

Rules for selected_identifier. :
(.
      Self.Compilation.Context.Symbols.Join
        (${Prefix.full_name}, ${Selector.full_name}, ${selected_identifier.full_name});
.)

Rules for defining_expanded_unit_name. :
(.
      Self.Compilation.Context.Symbols.Join
        (${Defining_Prefix.full_name},
         ${Defining_Selector.full_name},
         ${defining_expanded_unit_name.full_name});
.)

Rules for procedure_declaration. :
(.
      ${procedure_declaration.full_name} := ${Names.full_name};
.)

Rules for function_declaration. :
(.
      ${function_declaration.full_name} := ${Names.full_name};
.)

Rules for package_declaration. :
(.
      ${package_declaration.full_name} := ${Names.full_name};
.)

Rules for generic_package_declaration. :
(.
      ${generic_package_declaration.full_name} := ${Names.full_name};
.)

Rules for generic_function_declaration. :
(.
      ${generic_function_declaration.full_name} := ${Names.full_name};
.)

Rules for generic_procedure_declaration. :
(.
      ${generic_procedure_declaration.full_name} := ${Names.full_name};
.)

Rules for package_instantiation. :
(.
      ${package_instantiation.full_name} := ${Names.full_name};
.)

Rules for procedure_instantiation. :
(.
      ${procedure_instantiation.full_name} := ${Names.full_name};
.)

Rules for function_instantiation. :
(.
      ${function_instantiation.full_name} := ${Names.full_name};
.)

Rules for package_renaming_declaration. :
(.
      ${package_renaming_declaration.full_name} := ${Names.full_name};
.)

Rules for generic_package_renaming. :
(.
      ${generic_package_renaming.full_name} := ${Names.full_name};
.)

Rules for generic_procedure_renaming. :
(.
      ${generic_procedure_renaming.full_name} := ${Names.full_name};
.)

Rules for generic_function_renaming. :
(.
      ${generic_function_renaming.full_name} := ${Names.full_name};
.)

Rules for package_body. :
(.
      ${package_body.full_name} := ${Names.full_name};
.)

Rules for function_body. :
(.
      ${function_body.full_name} := ${Names.full_name};
.)

Rules for procedure_body. :
(.
      ${procedure_body.full_name} := ${Names.full_name};
.)

Rules for task_body. :
(.
      ${task_body.full_name} := ${Names.full_name};
.)

Rules for protected_body. :
(.
      ${protected_body.full_name} := ${Names.full_name};
.)

