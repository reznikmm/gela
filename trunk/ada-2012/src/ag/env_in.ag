Rules for Compilation. :
(.
      ${Compilation_Pragmas.env_in} := ${units.env_out};
.)


Inherited attributes
  Aborted_Tasks,
  Accept_Body_Statements,
  Accept_Parameters,
  Access_To_Subprogram_Parameter_Profile,
  Array_Component_Choices,
  Aspect_Specifications,
  Associations,
  Asynchronous_Statement_Paths,
  Block_Declarative_Items,
  Exception_Handlers,
  Block_Statements,
  Body_Declarative_Items,
  Body_Statements,
  Case_Expression_Paths,
  Case_Path_Alternative_Choices,
  Case_Statement_Paths,
  Clause_Names,
  Compilation_Pragmas,
  Component_Clauses,
  Context_Clause_Elements,
  Discrete_Subtype_Definitions,
  Discriminants,
  Enumeration_Literal_Declarations,
  Exception_Choices,
  Expression_Paths,
  Extended_Return_Statements,
  Generic_Actual_Part,
  Generic_Formal_Part,
  Handler_Statements,
  Index_Subtype_Definitions,
  Label_Names,
  Loop_Statements,
  Membership_Test_Choices,
  Names,
  Parameter_Profile,
  Pragma_Argument_Associations,
  Private_Part_Declarative_Items,
  Private_Protected_Items,
  Private_Task_Items,
  Progenitor_List,
  Protected_Operation_Items,
  Record_Component_Associations,
  Record_Components,
  Selective_Statement_Paths,
  Sequence_Of_Statements,
  Statement_Paths,
  Type_Clause_Names,
  Variant_Choices,
  Variants,
  Visible_Part_Declarative_Items,
  Visible_Protected_Items,
  Visible_Task_Items,
  With_Clause_Names,
  abort_statement,
  accept_statement,
  access_definition,
  access_to_function_definition,
  access_to_object_definition,
  access_to_procedure_definition,
  allocator,
  alt_record_definition,
  anonymous_access_to_function_definition,
  anonymous_access_to_object_definition,
  anonymous_access_to_procedure_definition,
  aspect_clause,
  aspect_specification,
  assignment_statement,
  association,
  association_list,
  asynchronous_select,
  at_clause,
  attribute_definition_clause,
  attribute_reference,
  basic_declaration,
  basic_declarative_item,
  block_statement,
  body_declaration,
  body_stub,
  box,
  case_expression,
  case_expression_path,
  case_path,
  case_statement,
  character_literal,
  choice_parameter_specification,
  clause_name,
  clause_or_pragma,
  component_clause,
  component_declaration,
  component_definition,
  component_item,
  composite_constraint,
  constrained_array_definition,
  constraint,
  context_item,
  decimal_fixed_point_definition,
  declarative_item,
  declarative_region,
  defining_character_literal,
  defining_designator,
  defining_enumeration_literal,
  defining_enumeration_name,
  defining_expanded_unit_name,
  defining_identifier,
  defining_name,
  defining_operator_symbol,
  defining_program_unit_name,
  delay_statement,
  delta_constraint,
  derived_record_definition,
  derived_type_definition,
  designator,
  digits_constraint,
  direct_name,
  discrete_choice,
  discrete_range,
  discrete_range_attribute_reference,
  discrete_simple_expression_range,
  discrete_subtype_definition,
  discrete_subtype_indication,
  discrete_subtype_indication_dr,
  discriminant_part,
  discriminant_specification,
  element_iterator_specification,
  else_expression_path,
  else_path,
  elsif_expression_path,
  elsif_path,
  entry_body,
  entry_declaration,
  entry_index_specification,
  enumeration_literal_specification,
  enumeration_type_definition,
  exception_choice,
  exception_declaration,
  exception_handler,
  exception_renaming_declaration,
  exit_statement,
  explicit_dereference,
  expression,
  expression_or_box,
  extended_return_statement,
  extension_aggregate,
  floating_point_definition,
  for_loop_statement,
  formal_access_to_function_definition,
  formal_access_to_object_definition,
  formal_access_to_procedure_definition,
  formal_constrained_array_definition,
  formal_decimal_fixed_point_definition,
  formal_derived_type_definition,
  formal_discrete_type_definition,
  formal_floating_point_definition,
  formal_function_declaration,
  formal_incomplete_type_declaration,
  formal_interface_type_definition,
  formal_modular_type_definition,
  formal_object_declaration,
  formal_ordinary_fixed_point_definition,
  formal_package_declaration,
  formal_private_type_definition,
  formal_procedure_declaration,
  formal_signed_integer_type_definition,
  formal_type_declaration,
  formal_type_definition,
  formal_unconstrained_array_definition,
  full_type_declaration,
  function_body,
  auxiliary_apply,
  function_declaration,
  function_instantiation,
  generalized_iterator_specification,
  generic_association,
  generic_formal,
  generic_formal_parameter,
  generic_function_declaration,
  generic_function_renaming,
  generic_package_declaration,
  generic_package_renaming,
  generic_procedure_declaration,
  generic_procedure_renaming,
  goto_statement,
  identifier,
  if_else_expression_path,
  if_elsif_else_path,
  if_expression,
  if_expression_path,
  if_path,
  if_statement,
  incomplete_type_declaration,
  interface_type_definition,
  iterator_specification,
  known_discriminant_part,
  label_decorator,
  library_unit_body,
  library_unit_declaration,
  loop_parameter_specification,
  loop_statement,
  membership_choice,
  membership_test,
  modular_type_definition,
  name,
  null_component,
  null_literal,
  null_record_definition,
  null_statement,
  number_declaration,
  numeric_literal,
  object_declaration,
  object_definition,
  object_renaming_declaration,
  operator_symbol,
  ordinary_fixed_point_definition,
  others_choice,
  package_body,
  package_body_stub,
  package_declaration,
  package_instantiation,
  package_renaming_declaration,
  parameter_association,
  parameter_specification,
  pragma_argument_association,
  pragma_node,
  prefix,
  private_extension_declaration,
  private_extension_definition,
  private_type_declaration,
  private_type_definition,
  procedure_body,
  procedure_call_statement,
  procedure_declaration,
  procedure_instantiation,
  program_unit_name,
  proper_body,
  protected_body,
  protected_body_stub,
  protected_definition,
  protected_element_declaration,
  protected_operation_declaration,
  protected_operation_item,
  protected_type_declaration,
  qualified_expression,
  quantified_expression,
  raise_statement,
  range_attribute_reference,
  range_attribute_reference_dr,
  range_constraint,
  range_dr,
  record_aggregate,
  record_definition,
  record_representation_clause,
  record_type_definition,
  requeue_statement,
  return_object_specification,
  root_type_definition,
  scalar_constraint,
  select_or_else_path,
  select_or_path,
  select_then_abort_path,
  selected_component,
  selected_identifier,
  selective_accept,
  selector_name,
  short_circuit,
  signed_integer_type_definition,
  simple_expression,
  simple_expression_range,
  simple_expression_range_dr,
  simple_name,
  simple_return_statement,
  single_protected_declaration,
  single_task_declaration,
  statement,
  string_literal,
  subtype_declaration,
  subtype_indication,
  subtype_indication_or_access_definition,
  subtype_mark,
  subtype_mark_or_access_definition,
  task_body,
  task_body_stub,
  task_definition,
  task_item,
  task_type_declaration,
  terminate_alternative_statement,
  then_abort_path,
  type_definition,
  unconstrained_array_definition,
  unknown_discriminant_part,
  use_clause,
  use_package_clause,
  use_type_clause,
  variant,
  variant_part,
  while_loop_statement,
  with_clause
    : Gela.Semantic_Types.Env_Index : env_in;

Rules for Aborted_Tasks.name :
(.
      ${name.env_in} := ${Aborted_Tasks.env_in};
.)
Rules for Exception_Handlers.exception_handler :
(.
      ${exception_handler.env_in} := ${Exception_Handlers.env_in};
.)
Rules for Accept_Body_Statements.statement :
(.
      ${statement.env_in} := ${Accept_Body_Statements.env_in};
.)
Rules for Accept_Parameters.parameter_specification :
(.
      ${parameter_specification.env_in} := ${Accept_Parameters.env_in};
.)
Rules for Access_To_Subprogram_Parameter_Profile.parameter_specification :
(.
      ${parameter_specification.env_in} := ${Access_To_Subprogram_Parameter_Profile.env_in};
.)
Rules for Array_Component_Choices.discrete_choice :
(.
      ${discrete_choice.env_in} := ${Array_Component_Choices.env_in};
.)
Rules for Aspect_Specifications.aspect_specification :
(.
      ${aspect_specification.env_in} := ${Aspect_Specifications.env_in};
.)
Rules for Associations.association :
(.
      ${association.env_in} := ${Associations.env_in};
.)
Rules for Asynchronous_Statement_Paths.select_then_abort_path :
(.
      ${select_then_abort_path.env_in} := ${Asynchronous_Statement_Paths.env_in};
.)
Rules for Block_Declarative_Items.declarative_item :
(.
      ${declarative_item.env_in} := ${Block_Declarative_Items.env_in};
.)
Rules for Block_Statements.statement :
(.
      ${statement.env_in} := ${Block_Statements.env_in};
.)
Rules for Body_Declarative_Items.declarative_item :
(.
      ${declarative_item.env_in} := ${Body_Declarative_Items.env_in};
.)
Rules for Body_Statements.statement :
(.
      ${statement.env_in} := ${Body_Statements.env_in};
.)
Rules for Case_Expression_Paths.case_expression_path :
(.
      ${case_expression_path.env_in} := ${Case_Expression_Paths.env_in};
.)
Rules for Case_Path_Alternative_Choices.discrete_choice :
(.
      ${discrete_choice.env_in} := ${Case_Path_Alternative_Choices.env_in};
.)
Rules for Case_Statement_Paths.case_path :
(.
      ${case_path.env_in} := ${Case_Statement_Paths.env_in};
.)
Rules for Clause_Names.program_unit_name :
(.
      ${program_unit_name.env_in} := ${Clause_Names.env_in};
.)
Rules for Compilation_Pragmas.context_item :
(.
      ${context_item.env_in} := ${Compilation_Pragmas.env_in};
.)
Rules for Component_Clauses.clause_or_pragma :
(.
      ${clause_or_pragma.env_in} := ${Component_Clauses.env_in};
.)
Rules for Context_Clause_Elements.context_item :
(.
      ${context_item.env_in} := ${Context_Clause_Elements.env_in};
.)
Rules for Discrete_Subtype_Definitions.discrete_subtype_definition :
(.
      ${discrete_subtype_definition.env_in} := ${Discrete_Subtype_Definitions.env_in};
.)
Rules for Discriminants.discriminant_specification :
(.
      ${discriminant_specification.env_in} := ${Discriminants.env_in};
.)
Rules for Enumeration_Literal_Declarations.enumeration_literal_specification :
(.
      ${enumeration_literal_specification.env_in} := ${Enumeration_Literal_Declarations.env_in};
.)
Rules for Exception_Choices.exception_choice :
(.
      ${exception_choice.env_in} := ${Exception_Choices.env_in};
.)
Rules for Expression_Paths.if_else_expression_path :
(.
      ${if_else_expression_path.env_in} := ${Expression_Paths.env_in};
.)
Rules for Extended_Return_Statements.statement :
(.
      ${statement.env_in} := ${Extended_Return_Statements.env_in};
.)
Rules for Generic_Actual_Part.generic_association :
(.
      ${generic_association.env_in} := ${Generic_Actual_Part.env_in};
.)
Rules for Generic_Formal_Part.generic_formal :
(.
      ${generic_formal.env_in} := ${Generic_Formal_Part.env_in};
.)
Rules for Handler_Statements.statement :
(.
      ${statement.env_in} := ${Handler_Statements.env_in};
.)
Rules for Index_Subtype_Definitions.subtype_mark :
(.
      ${subtype_mark.env_in} := ${Index_Subtype_Definitions.env_in};
.)
Rules for Label_Names.defining_identifier :
(.
      ${defining_identifier.env_in} := ${Label_Names.env_in};
.)
Rules for Loop_Statements.statement :
(.
      ${statement.env_in} := ${Loop_Statements.env_in};
.)
Rules for Membership_Test_Choices.membership_choice :
(.
      ${membership_choice.env_in} := ${Membership_Test_Choices.env_in};
.)
Rules for Names.defining_identifier :
(.
      ${defining_identifier.env_in} := ${Names.env_in};
.)
Rules for Parameter_Profile.parameter_specification :
(.
      ${parameter_specification.env_in} := ${Parameter_Profile.env_in};
.)
Rules for Pragma_Argument_Associations.pragma_argument_association :
(.
      ${pragma_argument_association.env_in} := ${Pragma_Argument_Associations.env_in};
.)
Rules for Private_Part_Declarative_Items.basic_declarative_item :
(.
      ${basic_declarative_item.env_in} := ${Private_Part_Declarative_Items.env_in};
.)
Rules for Private_Protected_Items.protected_element_declaration :
(.
      ${protected_element_declaration.env_in} := ${Private_Protected_Items.env_in};
.)
Rules for Private_Task_Items.task_item :
(.
      ${task_item.env_in} := ${Private_Task_Items.env_in};
.)
Rules for Progenitor_List.subtype_mark :
(.
      ${subtype_mark.env_in} := ${Progenitor_List.env_in};
.)
Rules for Protected_Operation_Items.protected_operation_item :
(.
      ${protected_operation_item.env_in} := ${Protected_Operation_Items.env_in};
.)
Rules for Record_Component_Associations.association :
(.
      ${association.env_in} := ${Record_Component_Associations.env_in};
.)
Rules for Record_Components.component_item :
(.
      ${component_item.env_in} := ${Record_Components.env_in};
.)
Rules for Selective_Statement_Paths.select_or_else_path :
(.
      ${select_or_else_path.env_in} := ${Selective_Statement_Paths.env_in};
.)
Rules for Sequence_Of_Statements.statement :
(.
      ${statement.env_in} := ${Sequence_Of_Statements.env_in};
.)
Rules for Statement_Paths.if_elsif_else_path :
(.
      ${if_elsif_else_path.env_in} := ${Statement_Paths.env_in};
.)
Rules for Type_Clause_Names.subtype_mark :
(.
      ${subtype_mark.env_in} := ${Type_Clause_Names.env_in};
.)
Rules for Variant_Choices.discrete_choice :
(.
      ${discrete_choice.env_in} := ${Variant_Choices.env_in};
.)
Rules for Variants.variant :
(.
      ${variant.env_in} := ${Variants.env_in};
.)
Rules for Visible_Part_Declarative_Items.basic_declarative_item :
(.
      ${basic_declarative_item.env_in} := ${Visible_Part_Declarative_Items.env_in};
.)
Rules for Visible_Protected_Items.protected_operation_declaration :
(.
      ${protected_operation_declaration.env_in} := ${Visible_Protected_Items.env_in};
.)
Rules for Visible_Task_Items.task_item :
(.
      ${task_item.env_in} := ${Visible_Task_Items.env_in};
.)
Rules for With_Clause_Names.program_unit_name :
(.
      ${program_unit_name.env_in} := ${With_Clause_Names.env_in};
.)

Rules for Aborted_Tasks.name :
(.
      ${tail.env_in} := ${Aborted_Tasks.env_in};
.)

Rules for Exception_Handlers.exception_handler :
(.
      ${tail.env_in} := ${Exception_Handlers.env_in};
.)

Rules for Accept_Body_Statements.statement :
(.
      ${tail.env_in} := ${Accept_Body_Statements.env_in};
.)

Rules for Accept_Parameters.parameter_specification :
(.
      ${tail.env_in} := ${parameter_specification.env_out};
.)

Rules for Access_To_Subprogram_Parameter_Profile.parameter_specification :
(.
      ${tail.env_in} := ${parameter_specification.env_out};
.)

Rules for Array_Component_Choices.discrete_choice :
(.
      ${tail.env_in} := ${Array_Component_Choices.env_in};
.)

Rules for Aspect_Specifications.aspect_specification :
(.
      ${tail.env_in} := ${Aspect_Specifications.env_in};
.)

Rules for Associations.association :
(.
      ${tail.env_in} := ${Associations.env_in};
.)

Rules for Asynchronous_Statement_Paths.select_then_abort_path :
(.
      ${tail.env_in} := ${Asynchronous_Statement_Paths.env_in};
.)

Rules for Block_Declarative_Items.declarative_item :
(.
      ${tail.env_in} := ${declarative_item.env_out};
.)

Rules for Block_Statements.statement :
(.
      ${tail.env_in} := ${Block_Statements.env_in};
.)

Rules for Body_Declarative_Items.declarative_item :
(.
      ${tail.env_in} := ${declarative_item.env_out};
.)

Rules for Body_Statements.statement :
(.
      ${tail.env_in} := ${Body_Statements.env_in};
.)

Rules for Case_Expression_Paths.case_expression_path :
(.
      ${tail.env_in} := ${Case_Expression_Paths.env_in};
.)

Rules for Case_Path_Alternative_Choices.discrete_choice :
(.
      ${tail.env_in} := ${Case_Path_Alternative_Choices.env_in};
.)

Rules for Case_Statement_Paths.case_path :
(.
      ${tail.env_in} := ${Case_Statement_Paths.env_in};
.)

Rules for Clause_Names.program_unit_name :
(.
      ${tail.env_in} := ${Clause_Names.env_in};
.)

Rules for Compilation_Pragmas.context_item :
(.
      ${tail.env_in} := ${context_item.env_out};
.)

Rules for Component_Clauses.clause_or_pragma :
(.
      ${tail.env_in} := ${Component_Clauses.env_in};
.)

Rules for Context_Clause_Elements.context_item :
(.
      ${tail.env_in} := ${context_item.env_out};
.)

Rules for Discrete_Subtype_Definitions.discrete_subtype_definition :
(.
      ${tail.env_in} := ${Discrete_Subtype_Definitions.env_in};
.)

Rules for Discriminants.discriminant_specification :
(.
      ${tail.env_in} := ${discriminant_specification.env_out};
.)

Rules for Enumeration_Literal_Declarations.enumeration_literal_specification :
(.
      ${tail.env_in} := ${enumeration_literal_specification.env_out};
.)

Rules for Exception_Choices.exception_choice :
(.
      ${tail.env_in} := ${Exception_Choices.env_in};
.)

Rules for Expression_Paths.if_else_expression_path :
(.
      ${tail.env_in} := ${Expression_Paths.env_in};
.)

Rules for Extended_Return_Statements.statement :
(.
      ${tail.env_in} := ${Extended_Return_Statements.env_in};
.)

Rules for Generic_Actual_Part.generic_association :
(.
      ${tail.env_in} := ${Generic_Actual_Part.env_in};
.)

Rules for Generic_Formal_Part.generic_formal :
(.
      ${tail.env_in} := ${generic_formal.env_out};
.)

Rules for Handler_Statements.statement :
(.
      ${tail.env_in} := ${Handler_Statements.env_in};
.)

Rules for Index_Subtype_Definitions.subtype_mark :
(.
      ${tail.env_in} := ${Index_Subtype_Definitions.env_in};
.)

Rules for Label_Names.defining_identifier :
(.
      ${tail.env_in} := ${Label_Names.env_in};
.)

Rules for Loop_Statements.statement :
(.
      ${tail.env_in} := ${Loop_Statements.env_in};
.)

Rules for Membership_Test_Choices.membership_choice :
(.
      ${tail.env_in} := ${Membership_Test_Choices.env_in};
.)

Rules for Names.defining_identifier :
(.
      ${tail.env_in} := ${Names.env_in};
.)

Rules for Parameter_Profile.parameter_specification :
(.
      ${tail.env_in} := ${parameter_specification.env_out};
.)

Rules for Pragma_Argument_Associations.pragma_argument_association :
(.
      ${tail.env_in} := ${Pragma_Argument_Associations.env_in};
.)

Rules for Private_Part_Declarative_Items.basic_declarative_item :
(.
      ${tail.env_in} := ${basic_declarative_item.env_out};
.)

Rules for Private_Protected_Items.protected_element_declaration :
(.
      ${tail.env_in} := ${protected_element_declaration.env_out};
.)

Rules for Private_Task_Items.task_item :
(.
      ${tail.env_in} := ${task_item.env_out};
.)

Rules for Progenitor_List.subtype_mark :
(.
      ${tail.env_in} := ${Progenitor_List.env_in};
.)

Rules for Protected_Operation_Items.protected_operation_item :
(.
      ${tail.env_in} := ${protected_operation_item.env_out};
.)

Rules for Record_Component_Associations.association :
(.
      ${tail.env_in} := ${Record_Component_Associations.env_in};
.)

Rules for Record_Components.component_item :
(.
      ${tail.env_in} := ${component_item.env_out};
.)

Rules for Selective_Statement_Paths.select_or_else_path :
(.
      ${tail.env_in} := ${Selective_Statement_Paths.env_in};
.)

Rules for Sequence_Of_Statements.statement :
(.
      ${tail.env_in} := ${Sequence_Of_Statements.env_in};
.)

Rules for Statement_Paths.if_elsif_else_path :
(.
      ${tail.env_in} := ${Statement_Paths.env_in};
.)

Rules for Type_Clause_Names.subtype_mark :
(.
      ${tail.env_in} := ${Type_Clause_Names.env_in};
.)

Rules for Variant_Choices.discrete_choice :
(.
      ${tail.env_in} := ${Variant_Choices.env_in};
.)

Rules for Variants.variant :
(.
      ${tail.env_in} := ${variant.env_out};
.)

Rules for Visible_Part_Declarative_Items.basic_declarative_item :
(.
      ${tail.env_in} := ${basic_declarative_item.env_out};
.)

Rules for Visible_Protected_Items.protected_operation_declaration :
(.
      ${tail.env_in} := ${protected_operation_declaration.env_out};
.)

Rules for Visible_Task_Items.task_item :
(.
      ${tail.env_in} := ${task_item.env_out};
.)

Rules for With_Clause_Names.program_unit_name :
(.
      ${tail.env_in} := ${With_Clause_Names.env_in};
.)

Rules for abort_statement. :
(.
      ${Aborted_Tasks.env_in} := ${abort_statement.env_in};
.)

Rules for accept_statement. :
(.
      ${Accept_Entry_Direct_Name.env_in} := ${accept_statement.env_in};
.)

Rules for accept_statement. :
(.
      ${Accept_Entry_Index.env_in} := ${accept_statement.env_in};
.)

Rules for accept_statement. :
(.
      ${Accept_Parameters.env_in} := ${accept_statement.env_in};
.)

Rules for accept_statement. :
(.
      ${Accept_Body_Statements.env_in} := ${accept_statement.env_in};
.)

Rules for accept_statement. :
(.
      ${Exception_Handlers.env_in} := ${accept_statement.env_in};
.)

Rules for access_to_function_definition. :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_in} := ${access_to_function_definition.env_in};
.)

Rules for access_to_function_definition. :
(.
      ${Access_To_Function_Result_Subtype.env_in} := ${access_to_function_definition.env_in};
.)

Rules for access_to_object_definition. :
(.
      ${subtype_indication.env_in} := ${access_to_object_definition.env_in};
.)

Rules for access_to_procedure_definition. :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_in} := ${access_to_procedure_definition.env_in};
.)

Rules for allocator. :
(.
      ${Subpool_Name.env_in} := ${allocator.env_in};
.)

Rules for allocator. :
(.
      ${Subtype_Or_Expression.env_in} := ${allocator.env_in};
.)

Rules for anonymous_access_to_function_definition. :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_in} := ${anonymous_access_to_function_definition.env_in};
.)

Rules for anonymous_access_to_function_definition. :
(.
      ${Access_To_Function_Result_Subtype.env_in} := ${anonymous_access_to_function_definition.env_in};
.)

Rules for anonymous_access_to_object_definition. :
(.
      ${Anonymous_Access_To_Object_Subtype_Mark.env_in} := ${anonymous_access_to_object_definition.env_in};
.)

Rules for anonymous_access_to_procedure_definition. :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_in} := ${anonymous_access_to_procedure_definition.env_in};
.)

Rules for aspect_specification. :
(.
      ${Aspect_Mark.env_in} := ${aspect_specification.env_in};
.)

Rules for aspect_specification. :
(.
      ${Aspect_Definition.env_in} := ${aspect_specification.env_in};
.)

Rules for assignment_statement. :
(.
      ${Assignment_Variable_Name.env_in} := ${assignment_statement.env_in};
.)

Rules for assignment_statement. :
(.
      ${Assignment_Expression.env_in} := ${assignment_statement.env_in};
.)

Rules for association. :
(.
      ${Array_Component_Choices.env_in} := ${association.env_in};
.)

Rules for association. :
(.
      ${Component_Expression.env_in} := ${association.env_in};
.)

Rules for asynchronous_select. :
(.
      ${Asynchronous_Statement_Paths.env_in} := ${asynchronous_select.env_in};
.)

Rules for at_clause. :
(.
      ${Representation_Clause_Name.env_in} := ${at_clause.env_in};
.)

Rules for at_clause. :
(.
      ${Representation_Clause_Expression.env_in} := ${at_clause.env_in};
.)

Rules for attribute_definition_clause. :
(.
      ${Representation_Clause_Name.env_in} := ${attribute_definition_clause.env_in};
.)

Rules for attribute_definition_clause. :
(.
      ${Representation_Clause_Expression.env_in} := ${attribute_definition_clause.env_in};
.)

Rules for attribute_reference. :
(.
      ${prefix.env_in} := ${attribute_reference.env_in};
.)

Rules for attribute_reference. :
(.
      ${Attribute_Designator_Identifier.env_in} := ${attribute_reference.env_in};
.)

Rules for attribute_reference. :
(.
      ${Attribute_Designator_Expressions.env_in} := ${attribute_reference.env_in};
.)

Rules for block_statement. :
(.
      ${Statement_Identifier.env_in} := ${block_statement.env_in};
.)

Rules for block_statement. :
(.
      ${Block_Declarative_Items.env_in} := ${block_statement.env_in};
.)

Rules for block_statement. :
(.
      ${Block_Statements.env_in} := ${block_statement.env_in};
.)

Rules for block_statement. :
(.
      ${Exception_Handlers.env_in} := ${block_statement.env_in};
.)

Rules for case_expression. :
(.
      ${expression.env_in} := ${case_expression.env_in};
.)

Rules for case_expression. :
(.
      ${Case_Expression_Paths.env_in} := ${case_expression.env_in};
.)

Rules for case_expression_path. :
(.
      ${Case_Path_Alternative_Choices.env_in} := ${case_expression_path.env_in};
.)

Rules for case_expression_path. :
(.
      ${Dependent_Expression.env_in} := ${case_expression_path.env_in};
.)

Rules for case_path. :
(.
      ${Variant_Choices.env_in} := ${case_path.env_in};
.)

Rules for case_path. :
(.
      ${Sequence_Of_Statements.env_in} := ${case_path.env_in};
.)

Rules for case_statement. :
(.
      ${Case_Expression.env_in} := ${case_statement.env_in};
.)

Rules for case_statement. :
(.
      ${Case_Statement_Paths.env_in} := ${case_statement.env_in};
.)

Rules for choice_parameter_specification.Names :
(.
      ${Names.env_in} := ${choice_parameter_specification.env_in};
.)

Rules for compilation_unit_body. :
(.
      ${Context_Clause_Elements.env_in} :=
        Self.Compilation.Context.Environment_Set.Library_Level_Environment;
.)

Rules for compilation_unit_body. :
(.
      --  depends on ${Context_Clause_Elements.env_out}
      ${Unit_Declaration.env_in} :=
        Self.Compilation.Context.Environment_Set.Library_Level_Environment;
.)

Rules for compilation_unit_declaration. :
(.
      ${Context_Clause_Elements.env_in} :=
        Self.Compilation.Context.Environment_Set.Library_Level_Environment;
.)

Rules for compilation_unit_declaration. :
(.
      --  depends on ${Context_Clause_Elements.env_out}
      --  depends on ${Unit_Declaration.full_name}???
      ${Unit_Declaration.env_in} :=
        Self.Compilation.Context.Environment_Set.Library_Level_Environment;
.)

Rules for component_clause. :
(.
      ${Representation_Clause_Name.env_in} := ${component_clause.env_in};
.)

Rules for component_clause. :
(.
      ${Component_Clause_Position.env_in} := ${component_clause.env_in};
.)

Rules for component_clause. :
(.
      ${Component_Clause_Range.env_in} := ${component_clause.env_in};
.)

Rules for component_declaration. :
(.
      ${Names.env_in} := ${component_declaration.env_in};
.)

Rules for component_declaration. :
(.
      ${Object_Declaration_Subtype.env_in} := ${component_declaration.env_in};
.)

Rules for component_declaration. :
(.
      ${Initialization_Expression.env_in} := ${component_declaration.env_in};
.)

Rules for component_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${component_declaration.env_in};
.)

Rules for component_definition. :
(.
      ${Component_Subtype_Indication.env_in} := ${component_definition.env_in};
.)

Rules for composite_constraint. :
(.
      ${Associations.env_in} := ${composite_constraint.env_in};
.)

Rules for constrained_array_definition. :
(.
      ${Discrete_Subtype_Definitions.env_in} := ${constrained_array_definition.env_in};
.)

Rules for constrained_array_definition. :
(.
      ${Array_Component_Definition.env_in} := ${constrained_array_definition.env_in};
.)

Rules for decimal_fixed_point_definition. :
(.
      ${Delta_Expression.env_in} := ${decimal_fixed_point_definition.env_in};
.)

Rules for decimal_fixed_point_definition. :
(.
      ${Digits_Expression.env_in} := ${decimal_fixed_point_definition.env_in};
.)

Rules for decimal_fixed_point_definition. :
(.
      ${Real_Range_Constraint.env_in} := ${decimal_fixed_point_definition.env_in};
.)

Rules for defining_expanded_unit_name. :
(.
      --  depend on ${defining_expanded_unit_name.env_in};
      ${Defining_Prefix.env_in} :=
        Self.Compilation.Context.Environment_Set.Library_Level_Environment;
.)

Rules for defining_expanded_unit_name. :
(.
      ${Defining_Selector.env_in} := ${defining_expanded_unit_name.env_in};
.)

Rules for delay_statement. :
(.
      ${Delay_Expression.env_in} := ${delay_statement.env_in};
.)

Rules for delta_constraint. :
(.
      ${Delta_Expression.env_in} := ${delta_constraint.env_in};
.)

Rules for delta_constraint. :
(.
      ${Real_Range_Constraint.env_in} := ${delta_constraint.env_in};
.)

Rules for derived_record_definition. :
(.
      ${Parent_Subtype_Indication.env_in} := ${derived_record_definition.env_in};
.)

Rules for derived_record_definition. :
(.
      ${Progenitor_List.env_in} := ${derived_record_definition.env_in};
.)

Rules for derived_record_definition. :
(.
      ${Record_Definition.env_in} := ${derived_record_definition.env_in};
.)

Rules for derived_type_definition. :
(.
      ${Parent_Subtype_Indication.env_in} := ${derived_type_definition.env_in};
.)

Rules for digits_constraint. :
(.
      ${Digits_Expression.env_in} := ${digits_constraint.env_in};
.)

Rules for digits_constraint. :
(.
      ${Real_Range_Constraint.env_in} := ${digits_constraint.env_in};
.)

Rules for discrete_range_attribute_reference.Range_Attribute :
(.
      ${Range_Attribute.env_in} := ${discrete_range_attribute_reference.env_in};
.)

Rules for discrete_simple_expression_range. :
(.
      ${Lower_Bound.env_in} := ${discrete_simple_expression_range.env_in};
.)

Rules for discrete_simple_expression_range. :
(.
      ${Upper_Bound.env_in} := ${discrete_simple_expression_range.env_in};
.)

Rules for discrete_subtype_indication. :
(.
      ${Subtype_Mark.env_in} := ${discrete_subtype_indication.env_in};
.)

Rules for discrete_subtype_indication. :
(.
      ${Subtype_Constraint.env_in} := ${discrete_subtype_indication.env_in};
.)

Rules for discrete_subtype_indication_dr. :
(.
      ${Subtype_Mark.env_in} := ${discrete_subtype_indication_dr.env_in};
.)

Rules for discrete_subtype_indication_dr. :
(.
      ${Subtype_Constraint.env_in} := ${discrete_subtype_indication_dr.env_in};
.)

Rules for discriminant_specification. :
(.
      ${Names.env_in} := ${discriminant_specification.env_in};
.)

Rules for discriminant_specification. :
(.
      ${Object_Declaration_Subtype.env_in} := ${discriminant_specification.env_in};
.)

Rules for discriminant_specification. :
(.
      ${Initialization_Expression.env_in} := ${discriminant_specification.env_in};
.)

Rules for element_iterator_specification. :
(.
      ${Names.env_in} := ${element_iterator_specification.env_in};
.)

Rules for element_iterator_specification. :
(.
      ${subtype_indication.env_in} := ${element_iterator_specification.env_in};
.)

Rules for element_iterator_specification. :
(.
      ${Iteration_Scheme_Name.env_in} := ${element_iterator_specification.env_in};
.)

Rules for else_expression_path. :
(.
      ${Dependent_Expression.env_in} := ${else_expression_path.env_in};
.)

Rules for else_path. :
(.
      ${Sequence_Of_Statements.env_in} := ${else_path.env_in};
.)

Rules for elsif_expression_path. :
(.
      ${Condition_Expression.env_in} := ${elsif_expression_path.env_in};
.)

Rules for elsif_expression_path. :
(.
      ${Dependent_Expression.env_in} := ${elsif_expression_path.env_in};
.)

Rules for elsif_path. :
(.
      ${Condition_Expression.env_in} := ${elsif_path.env_in};
.)

Rules for elsif_path. :
(.
      ${Sequence_Of_Statements.env_in} := ${elsif_path.env_in};
.)

Rules for entry_body. :
(.
      ${Names.env_in} := ${entry_body.env_in};
.)

Rules for entry_body. :
(.
      ${Entry_Index_Specification.env_in} := ${entry_body.env_in};
.)

Rules for entry_body. :
(.
      ${Parameter_Profile.env_in} := ${entry_body.env_in};
.)

Rules for entry_body. :
(.
      ${Entry_Barrier.env_in} := ${entry_body.env_in};
.)

Rules for entry_body. :
(.
      ${Body_Declarative_Items.env_in} := ${entry_body.env_in};
.)

Rules for entry_body. :
(.
      ${Body_Statements.env_in} := ${entry_body.env_in};
.)

Rules for entry_body. :
(.
      ${Exception_Handlers.env_in} := ${entry_body.env_in};
.)

Rules for entry_declaration. :
(.
      ${Names.env_in} := ${entry_declaration.env_in};
.)

Rules for entry_declaration. :
(.
      ${Entry_Family_Definition.env_in} := ${entry_declaration.env_in};
.)

Rules for entry_declaration. :
(.
      ${Parameter_Profile.env_in} := ${entry_declaration.env_in};
.)

Rules for entry_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${entry_declaration.env_in};
.)

Rules for entry_index_specification. :
(.
      ${Names.env_in} := ${entry_index_specification.env_in};
.)

Rules for entry_index_specification. :
(.
      ${Specification_Subtype_Definition.env_in} := ${entry_index_specification.env_in};
.)

Rules for enumeration_literal_specification.Names :
(.
      ${Names.env_in} := ${enumeration_literal_specification.env_in};
.)

Rules for enumeration_type_definition. :
(.
      ${Enumeration_Literal_Declarations.env_in} := ${enumeration_type_definition.env_in};
.)

Rules for exception_declaration. :
(.
      ${Names.env_in} := ${exception_declaration.env_in};
.)

Rules for exception_declaration. :
(.
      ${Aspect_Specifications.env_in} :=
        Gela.Pass_Utils.Add_Names_Create_Region
          (Self.Compilation,
           ${exception_declaration.env_in},
           ${Names.name_list},
           Names);
.)

Rules for exception_handler. :
(.
      ${Choice_Parameter_Specification.env_in} := ${exception_handler.env_in};
.)

Rules for exception_handler. :
(.
      ${Exception_Choices.env_in} := ${exception_handler.env_in};
.)

Rules for exception_handler. :
(.
      ${Handler_Statements.env_in} := ${exception_handler.env_in};
.)

Rules for exception_renaming_declaration. :
(.
      ${Names.env_in} := ${exception_renaming_declaration.env_in};
.)

Rules for exception_renaming_declaration. :
(.
      ${Renamed_Entity.env_in} := ${exception_renaming_declaration.env_in};
.)

Rules for exception_renaming_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${exception_renaming_declaration.env_in};
.)

Rules for exit_statement. :
(.
      ${Exit_Loop_Name.env_in} := ${exit_statement.env_in};
.)

Rules for exit_statement. :
(.
      ${Exit_Condition.env_in} := ${exit_statement.env_in};
.)

Rules for explicit_dereference. :
(.
      ${Prefix.env_in} := ${explicit_dereference.env_in};
.)

Rules for extended_return_statement. :
(.
      ${Return_Object_Specification.env_in} := ${extended_return_statement.env_in};
.)

Rules for extended_return_statement. :
(.
      ${Extended_Return_Statements.env_in} := ${extended_return_statement.env_in};
.)

Rules for extended_return_statement. :
(.
      ${Exception_Handlers.env_in} := ${extended_return_statement.env_in};
.)

Rules for extension_aggregate. :
(.
      ${Extension_Aggregate_Expression.env_in} := ${extension_aggregate.env_in};
.)

Rules for extension_aggregate. :
(.
      ${Record_Component_Associations.env_in} := ${extension_aggregate.env_in};
.)

Rules for floating_point_definition. :
(.
      ${Digits_Expression.env_in} := ${floating_point_definition.env_in};
.)

Rules for floating_point_definition. :
(.
      ${Real_Range_Constraint.env_in} := ${floating_point_definition.env_in};
.)

Rules for for_loop_statement. :
(.
      ${Statement_Identifier.env_in} := ${for_loop_statement.env_in};
.)

Rules for for_loop_statement. :
(.
      ${Loop_Parameter_Specification.env_in} := ${for_loop_statement.env_in};
.)

Rules for for_loop_statement. :
(.
      ${Loop_Statements.env_in} := ${for_loop_statement.env_in};
.)

Rules for formal_access_to_function_definition. :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_in} := ${formal_access_to_function_definition.env_in};
.)

Rules for formal_access_to_function_definition. :
(.
      ${Access_To_Function_Result_Subtype.env_in} := ${formal_access_to_function_definition.env_in};
.)

Rules for formal_access_to_object_definition. :
(.
      ${subtype_indication.env_in} := ${formal_access_to_object_definition.env_in};
.)

Rules for formal_access_to_procedure_definition. :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_in} := ${formal_access_to_procedure_definition.env_in};
.)

Rules for formal_constrained_array_definition. :
(.
      ${Discrete_Subtype_Definitions.env_in} := ${formal_constrained_array_definition.env_in};
.)

Rules for formal_constrained_array_definition. :
(.
      ${Array_Component_Definition.env_in} := ${formal_constrained_array_definition.env_in};
.)

Rules for formal_derived_type_definition. :
(.
      ${Subtype_Mark.env_in} := ${formal_derived_type_definition.env_in};
.)

Rules for formal_derived_type_definition. :
(.
      ${Progenitor_List.env_in} := ${formal_derived_type_definition.env_in};
.)

Rules for formal_derived_type_definition. :
(.
      ${Aspect_Specifications.env_in} := ${formal_derived_type_definition.env_in};
.)

Rules for formal_function_declaration. :
(.
      ${Names.env_in} := ${formal_function_declaration.env_in};
.)

Rules for formal_function_declaration. :
(.
      ${Parameter_Profile.env_in} := ${formal_function_declaration.env_in};
.)

Rules for formal_function_declaration. :
(.
      ${Result_Subtype.env_in} := ${formal_function_declaration.env_in};
.)

Rules for formal_function_declaration. :
(.
      ${Formal_Subprogram_Default.env_in} := ${formal_function_declaration.env_in};
.)

Rules for formal_function_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${formal_function_declaration.env_in};
.)

Rules for formal_incomplete_type_declaration. :
(.
      ${Names.env_in} := ${formal_incomplete_type_declaration.env_in};
.)

Rules for formal_incomplete_type_declaration. :
(.
      ${Discriminant_Part.env_in} := ${formal_incomplete_type_declaration.env_in};
.)

Rules for formal_interface_type_definition. :
(.
      ${Progenitor_List.env_in} := ${formal_interface_type_definition.env_in};
.)

Rules for formal_object_declaration. :
(.
      ${Names.env_in} := ${formal_object_declaration.env_in};
.)

Rules for formal_object_declaration. :
(.
      ${Object_Declaration_Subtype.env_in} := ${formal_object_declaration.env_in};
.)

Rules for formal_object_declaration. :
(.
      ${Initialization_Expression.env_in} := ${formal_object_declaration.env_in};
.)

Rules for formal_object_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${formal_object_declaration.env_in};
.)

Rules for formal_package_declaration. :
(.
      ${Names.env_in} := ${formal_package_declaration.env_in};
.)

Rules for formal_package_declaration. :
(.
      ${Generic_Unit_Name.env_in} := ${formal_package_declaration.env_in};
.)

Rules for formal_package_declaration. :
(.
      ${Generic_Actual_Part.env_in} := ${formal_package_declaration.env_in};
.)

Rules for formal_package_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${formal_package_declaration.env_in};
.)

Rules for formal_procedure_declaration. :
(.
      ${Names.env_in} := ${formal_procedure_declaration.env_in};
.)

Rules for formal_procedure_declaration. :
(.
      ${Parameter_Profile.env_in} := ${formal_procedure_declaration.env_in};
.)

Rules for formal_procedure_declaration. :
(.
      ${Formal_Subprogram_Default.env_in} := ${formal_procedure_declaration.env_in};
.)

Rules for formal_procedure_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${formal_procedure_declaration.env_in};
.)

Rules for formal_type_declaration. :
(.
      ${Names.env_in} := ${formal_type_declaration.env_in};
.)

Rules for formal_type_declaration. :
(.
      ${Discriminant_Part.env_in} :=
        Gela.Pass_Utils.Add_Name_Create_Region
          (Self.Compilation,
           ${formal_type_declaration.env_in},
           ${Names.full_name},
           Gela.Elements.Defining_Names.Defining_Name_Access (Names),
           Gela.Elements.Element_Access (Node));
.)

Rules for formal_type_declaration. :
(.
      ${Type_Declaration_View.env_in} := ${Discriminant_Part.env_out:Discriminant_Part_Env_In};
.)

Rules for formal_type_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${Type_Declaration_View.env_out};
.)

Rules for formal_unconstrained_array_definition. :
(.
      ${Index_Subtype_Definitions.env_in} := ${formal_unconstrained_array_definition.env_in};
.)

Rules for formal_unconstrained_array_definition. :
(.
      ${Array_Component_Definition.env_in} := ${formal_unconstrained_array_definition.env_in};
.)

Rules for full_type_declaration. :
(.
      ${Names.env_in} := ${full_type_declaration.env_in};
.)

Rules for full_type_declaration. :
(.
      ${Discriminant_Part.env_in} :=
        Gela.Pass_Utils.Create_Completion_Region
          (Self.Compilation,
           ${full_type_declaration.env_in},
           ${Names.full_name},
           Gela.Elements.Defining_Names.Defining_Name_Access (Names),
           Gela.Elements.Element_Access (Node));
      --  FIXME: dont create region for enums and completions
.)

Rules for full_type_declaration. :
(.
      ${Type_Declaration_View.env_in} := ${Discriminant_Part.env_out:Discriminant_Part_Env_In};
.)

Rules for full_type_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${Type_Declaration_View.env_out};
.)

Rules for function_body. :
(.
      ${Names.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${Parameter_Profile.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${Result_Subtype.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${Aspect_Specifications.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${Body_Declarative_Items.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${Body_Statements.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${Exception_Handlers.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${end_name.env_in} := ${function_body.env_in};
.)

Rules for auxiliary_apply. :
(.
      ${prefix.env_in} := ${auxiliary_apply.env_in};
.)

Rules for auxiliary_apply. :
(.
      ${Function_Call_Parameters.env_in} := ${auxiliary_apply.env_in};
.)

Rules for function_declaration. :
(.
      ${Names.env_in} := ${function_declaration.env_in};
.)

Rules for function_declaration. :
(.
      --  FIXME: add name after parameters ARM 8.2(2)
      ${Parameter_Profile.env_in} :=
        Gela.Pass_Utils.Add_Name_Create_Region
          (Self.Compilation,
           ${function_declaration.env_in},
           ${Names.full_name},
           Gela.Elements.Defining_Names.Defining_Name_Access (Names),
           Gela.Elements.Element_Access (Node));
.)

Rules for function_declaration. :
(.
      ${Result_Subtype.env_in} := ${function_declaration.env_in};
.)

Rules for function_declaration. :
(.
      ${Result_Expression.env_in} := ${function_declaration.env_in};
.)

Rules for function_declaration. :
(.
      ${Renamed_Entity.env_in} := ${function_declaration.env_in};
.)

Rules for function_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${function_declaration.env_in};
.)

Rules for function_instantiation. :
(.
      ${Names.env_in} := ${function_instantiation.env_in};
.)

Rules for function_instantiation. :
(.
      ${Generic_Unit_Name.env_in} := ${function_instantiation.env_in};
.)

Rules for function_instantiation. :
(.
      ${Generic_Actual_Part.env_in} := ${function_instantiation.env_in};
.)

Rules for function_instantiation. :
(.
      ${Aspect_Specifications.env_in} := ${function_instantiation.env_in};
.)

Rules for generalized_iterator_specification. :
(.
      ${Names.env_in} := ${generalized_iterator_specification.env_in};
.)

Rules for generalized_iterator_specification. :
(.
      ${Iteration_Scheme_Name.env_in} := ${generalized_iterator_specification.env_in};
.)

Rules for generic_association. :
(.
      ${Formal_Parameter.env_in} := ${generic_association.env_in};
.)

Rules for generic_association. :
(.
      ${Actual_Parameter.env_in} := ${generic_association.env_in};
.)

Rules for generic_function_declaration. :
(.
      ${Generic_Formal_Part.env_in} := ${generic_function_declaration.env_in};
.)

Rules for generic_function_declaration. :
(.
      ${Names.env_in} := ${generic_function_declaration.env_in};
.)

Rules for generic_function_declaration. :
(.
      ${Parameter_Profile.env_in} := ${generic_function_declaration.env_in};
.)

Rules for generic_function_declaration. :
(.
      ${Result_Subtype.env_in} := ${generic_function_declaration.env_in};
.)

Rules for generic_function_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${generic_function_declaration.env_in};
.)

Rules for generic_function_renaming. :
(.
      ${Generic_Formal_Part.env_in} := ${generic_function_renaming.env_in};
.)

Rules for generic_function_renaming. :
(.
      ${Names.env_in} := ${generic_function_renaming.env_in};
.)

Rules for generic_function_renaming. :
(.
      ${Renamed_Entity.env_in} := ${generic_function_renaming.env_in};
.)

Rules for generic_function_renaming. :
(.
      ${Aspect_Specifications.env_in} := ${generic_function_renaming.env_in};
.)

Rules for generic_package_declaration. :
(.
      ${Generic_Formal_Part.env_in} :=
        Gela.Pass_Utils.Add_Name_Create_Region
          (Self.Compilation,
           ${generic_package_declaration.env_in},
           ${Names.full_name},
           Gela.Elements.Defining_Names.Defining_Name_Access (Names),
           Gela.Elements.Element_Access (Node));
.)

Rules for generic_package_declaration. :
(.
      ${Names.env_in} := ${generic_package_declaration.env_in};
.)

Rules for generic_package_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${generic_package_declaration.env_in};
.)

Rules for generic_package_declaration. :
(.
      ${Visible_Part_Declarative_Items.env_in} := ${Generic_Formal_Part.env_out};
.)

Rules for generic_package_declaration. :
(.
      ${Private_Part_Declarative_Items.env_in} := ${Visible_Part_Declarative_Items.env_out};
.)

Rules for generic_package_declaration. :
(.
      ${end_name.env_in} := ${generic_package_declaration.env_in};
.)

Rules for generic_package_renaming. :
(.
      ${Generic_Formal_Part.env_in} := ${generic_package_renaming.env_in};
.)

Rules for generic_package_renaming. :
(.
      ${Names.env_in} := ${generic_package_renaming.env_in};
.)

Rules for generic_package_renaming. :
(.
      ${Renamed_Entity.env_in} := ${generic_package_renaming.env_in};
.)

Rules for generic_package_renaming. :
(.
      ${Aspect_Specifications.env_in} := ${generic_package_renaming.env_in};
.)

Rules for generic_procedure_declaration. :
(.
      ${Generic_Formal_Part.env_in} := ${generic_procedure_declaration.env_in};
.)

Rules for generic_procedure_declaration. :
(.
      ${Names.env_in} := ${generic_procedure_declaration.env_in};
.)

Rules for generic_procedure_declaration. :
(.
      ${Parameter_Profile.env_in} := ${generic_procedure_declaration.env_in};
.)

Rules for generic_procedure_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${generic_procedure_declaration.env_in};
.)

Rules for generic_procedure_renaming. :
(.
      ${Generic_Formal_Part.env_in} := ${generic_procedure_renaming.env_in};
.)

Rules for generic_procedure_renaming. :
(.
      ${Names.env_in} := ${generic_procedure_renaming.env_in};
.)

Rules for generic_procedure_renaming. :
(.
      ${Renamed_Entity.env_in} := ${generic_procedure_renaming.env_in};
.)

Rules for generic_procedure_renaming. :
(.
      ${Aspect_Specifications.env_in} := ${generic_procedure_renaming.env_in};
.)

Rules for goto_statement. :
(.
      ${Goto_Label.env_in} := ${goto_statement.env_in};
.)

Rules for if_expression.Expression_Paths :
(.
      ${Expression_Paths.env_in} := ${if_expression.env_in};
.)

Rules for if_expression_path. :
(.
      ${Condition_Expression.env_in} := ${if_expression_path.env_in};
.)

Rules for if_expression_path. :
(.
      ${Dependent_Expression.env_in} := ${if_expression_path.env_in};
.)

Rules for if_path. :
(.
      ${Condition_Expression.env_in} := ${if_path.env_in};
.)

Rules for if_path. :
(.
      ${Sequence_Of_Statements.env_in} := ${if_path.env_in};
.)

Rules for if_statement. :
(.
      ${Statement_Paths.env_in} := ${if_statement.env_in};
.)

Rules for incomplete_type_declaration. :
(.
      ${Names.env_in} := ${incomplete_type_declaration.env_in};
.)

Rules for incomplete_type_declaration. :
(.
      ${Discriminant_Part.env_in} :=
        Gela.Pass_Utils.Add_Name_Create_Region
          (Self.Compilation,
           ${incomplete_type_declaration.env_in},
           ${Names.full_name},
           Gela.Elements.Defining_Names.Defining_Name_Access (Names),
           Gela.Elements.Element_Access (Node));
.)

Rules for interface_type_definition. :
(.
      ${Progenitor_List.env_in} := ${interface_type_definition.env_in};
.)

Rules for known_discriminant_part. :
(.
      ${Discriminants.env_in} := ${known_discriminant_part.env_in};
.)

Rules for label_decorator. :
(.
      ${Label_Names.env_in} := ${label_decorator.env_in};
.)

Rules for label_decorator. :
(.
      ${Unlabeled_Statement.env_in} := ${label_decorator.env_in};
.)

Rules for loop_parameter_specification. :
(.
      ${Names.env_in} := ${loop_parameter_specification.env_in};
.)

Rules for loop_parameter_specification. :
(.
      ${Specification_Subtype_Definition.env_in} := ${loop_parameter_specification.env_in};
.)

Rules for loop_statement. :
(.
      ${Statement_Identifier.env_in} := ${loop_statement.env_in};
.)

Rules for loop_statement. :
(.
      ${Loop_Statements.env_in} := ${loop_statement.env_in};
.)

Rules for membership_test. :
(.
      ${Membership_Test_Expression.env_in} := ${membership_test.env_in};
.)

Rules for membership_test. :
(.
      ${Membership_Test_Choices.env_in} := ${membership_test.env_in};
.)

Rules for modular_type_definition. :
(.
      ${Mod_Static_Expression.env_in} := ${modular_type_definition.env_in};
.)

Rules for number_declaration. :
(.
      ${Names.env_in} := ${number_declaration.env_in};
.)

Rules for number_declaration. :
(.
      ${Initialization_Expression.env_in} := ${number_declaration.env_in};
.)

Rules for object_declaration. :
(.
      ${Names.env_in} := ${object_declaration.env_in};
.)

Rules for object_declaration. :
(.
      ${Object_Declaration_Subtype.env_in} := ${object_declaration.env_in};
.)

Rules for object_declaration. :
(.
      ${Initialization_Expression.env_in} := ${object_declaration.env_in};
.)

Rules for object_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${object_declaration.env_in};
.)

Rules for object_renaming_declaration. :
(.
      ${Names.env_in} := ${object_renaming_declaration.env_in};
.)

Rules for object_renaming_declaration. :
(.
      ${Object_Declaration_Subtype.env_in} := ${object_renaming_declaration.env_in};
.)

Rules for object_renaming_declaration. :
(.
      ${Renamed_Entity.env_in} := ${object_renaming_declaration.env_in};
.)

Rules for object_renaming_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${object_renaming_declaration.env_in};
.)

Rules for ordinary_fixed_point_definition. :
(.
      ${Delta_Expression.env_in} := ${ordinary_fixed_point_definition.env_in};
.)

Rules for ordinary_fixed_point_definition. :
(.
      ${Real_Range_Constraint.env_in} := ${ordinary_fixed_point_definition.env_in};
.)

Rules for package_body. :
(.
      ${Names.env_in} := ${package_body.env_in};
.)

Rules for package_body. :
(.
      ${Aspect_Specifications.env_in} := ${package_body.env_in};
.)

Rules for package_body. :
(.
      ${Body_Declarative_Items.env_in} :=
        Gela.Pass_Utils.Create_Completion_Region
          (Self.Compilation,
           ${package_body.env_in},
           ${Names.full_name},
           Gela.Elements.Defining_Names.Defining_Name_Access (Names),
           Gela.Elements.Element_Access (Node));
.)

Rules for package_body. :
(.
      ${Body_Statements.env_in} := ${Body_Declarative_Items.env_out};
.)

Rules for package_body. :
(.
      ${Exception_Handlers.env_in} := ${Body_Declarative_Items.env_out};
.)

Rules for package_body. :
(.
      ${end_name.env_in} := ${package_body.env_in};
.)

Rules for package_body_stub. :
(.
      ${Names.env_in} := ${package_body_stub.env_in};
.)

Rules for package_body_stub. :
(.
      ${Aspect_Specifications.env_in} := ${package_body_stub.env_in};
.)

Rules for package_declaration. :
(.
      ${Names.env_in} := ${package_declaration.env_in};
.)

Rules for package_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${package_declaration.env_in};
.)

Rules for package_declaration. :
(.
      ${Visible_Part_Declarative_Items.env_in} :=
        Gela.Pass_Utils.Add_Name_Create_Region
          (Self.Compilation,
           ${package_declaration.env_in},
           ${Names.full_name},
           Gela.Elements.Defining_Names.Defining_Name_Access (Names),
           Gela.Elements.Element_Access (Node));
.)

Rules for package_declaration. :
(.
      ${Private_Part_Declarative_Items.env_in} := ${Visible_Part_Declarative_Items.env_out};
.)

Rules for package_declaration. :
(.
      ${end_name.env_in} := ${package_declaration.env_in};
.)

Rules for package_instantiation. :
(.
      ${Names.env_in} := ${package_instantiation.env_in};
.)

Rules for package_instantiation. :
(.
      ${Generic_Unit_Name.env_in} := ${package_instantiation.env_in};
.)

Rules for package_instantiation. :
(.
      ${Generic_Actual_Part.env_in} := ${package_instantiation.env_in};
.)

Rules for package_instantiation. :
(.
      ${Aspect_Specifications.env_in} := ${package_instantiation.env_in};
.)

Rules for Formal_Part_Copy.generic_formal :
(.
      ${generic_formal.env_in} := 0;
.)

Rules for package_instance. :
(.
      ${Names.env_in} := 0;
.)

Rules for package_instance. :
(.
      ${Aspect_Specifications.env_in} := 0;
.)

Rules for package_instance. :
(.
      ${Visible_Part_Declarative_Items.env_in} := 0;
.)

Rules for package_instance. :
(.
      ${Private_Part_Declarative_Items.env_in} := 0;
.)

Rules for package_renaming_declaration. :
(.
      ${Names.env_in} := ${package_renaming_declaration.env_in};
.)

Rules for package_renaming_declaration. :
(.
      ${Renamed_Entity.env_in} := ${package_renaming_declaration.env_in};
.)

Rules for package_renaming_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${package_renaming_declaration.env_in};
.)

Rules for parameter_association. :
(.
      ${Formal_Parameter.env_in} := ${parameter_association.env_in};
.)

Rules for parameter_association. :
(.
      ${Actual_Parameter.env_in} := ${parameter_association.env_in};
.)

Rules for parameter_specification. :
(.
      ${Names.env_in} := ${parameter_specification.env_in};
.)

Rules for parameter_specification. :
(.
      ${Object_Declaration_Subtype.env_in} := ${parameter_specification.env_in};
.)

Rules for parameter_specification. :
(.
      ${Initialization_Expression.env_in} := ${parameter_specification.env_in};
.)

Rules for pragma_argument_association. :
(.
      ${Formal_Parameter.env_in} := ${pragma_argument_association.env_in};
.)

Rules for pragma_argument_association. :
(.
      ${Actual_Parameter.env_in} := ${pragma_argument_association.env_in};
.)

Rules for pragma_node. :
(.
      ${Formal_Parameter.env_in} := ${pragma_node.env_in};
.)

Rules for pragma_node. :
(.
      ${Pragma_Argument_Associations.env_in} := ${pragma_node.env_in};
.)

Rules for private_extension_declaration. :
(.
      ${Names.env_in} := ${private_extension_declaration.env_in};
.)

Rules for private_extension_declaration. :
(.
      ${Discriminant_Part.env_in} := ${private_extension_declaration.env_in};
.)

Rules for private_extension_declaration. :
(.
      ${Type_Declaration_View.env_in} := ${private_extension_declaration.env_in};
.)

Rules for private_extension_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${private_extension_declaration.env_in};
.)

Rules for private_extension_definition. :
(.
      ${Ancestor_Subtype_Indication.env_in} := ${private_extension_definition.env_in};
.)

Rules for private_extension_definition. :
(.
      ${Progenitor_List.env_in} := ${private_extension_definition.env_in};
.)

Rules for private_type_declaration. :
(.
      ${Names.env_in} := ${private_type_declaration.env_in};
.)

Rules for private_type_declaration. :
(.
      ${Discriminant_Part.env_in} :=
        Gela.Pass_Utils.Add_Name_Create_Region
          (Self.Compilation,
           ${private_type_declaration.env_in},
           ${Names.full_name},
           Gela.Elements.Defining_Names.Defining_Name_Access (Names),
           Gela.Elements.Element_Access (Node));
      --  FIXME: dont create region for completions
.)

Rules for private_type_declaration. :
(.
      ${Type_Declaration_View.env_in} := ${Discriminant_Part.env_out:Discriminant_Part_Env_In};
.)

Rules for private_type_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${Type_Declaration_View.env_out};
.)

Rules for procedure_body. :
(.
      ${Names.env_in} := ${procedure_body.env_in};
.)

Rules for procedure_body. :
(.
      --  FIXME: add name after parameters ARM 8.2(2)
      ${Parameter_Profile.env_in} :=
        Gela.Pass_Utils.Add_Name_Create_Region
          (Self.Compilation,
           ${procedure_body.env_in},
           ${Names.full_name},
           Gela.Elements.Defining_Names.Defining_Name_Access (Names),
           Gela.Elements.Element_Access (Node));
.)

Rules for procedure_body. :
(.
      ${Aspect_Specifications.env_in} := ${procedure_body.env_in};
.)

Rules for procedure_body. :
(.
      ${Body_Declarative_Items.env_in} := ${Parameter_Profile.env_out};
.)

Rules for procedure_body. :
(.
      ${Body_Statements.env_in} := ${Body_Declarative_Items.env_out};
.)

Rules for procedure_body. :
(.
      --  ${Body_Statements.Errors}
      ${Exception_Handlers.env_in} := ${Body_Declarative_Items.env_out};
.)

Rules for procedure_body. :
(.
      ${end_name.env_in} := ${procedure_body.env_in};
.)

Rules for procedure_call_statement. :
(.
      ${Function_Call.env_in} := ${procedure_call_statement.env_in};
.)

Rules for procedure_declaration. :
(.
      ${Names.env_in} := ${procedure_declaration.env_in};
.)

Rules for procedure_declaration. :
(.
      --  FIXME: add name after parameters ARM 8.2(2)
      ${Parameter_Profile.env_in} :=
        Gela.Pass_Utils.Add_Name_Create_Region
          (Self.Compilation,
           ${procedure_declaration.env_in},
           ${Names.full_name},
           Gela.Elements.Defining_Names.Defining_Name_Access (Names),
           Gela.Elements.Element_Access (Node));
.)

Rules for procedure_declaration. :
(.
      ${Renamed_Entity.env_in} := ${procedure_declaration.env_in};
.)

Rules for procedure_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${procedure_declaration.env_in};
.)

Rules for procedure_instantiation. :
(.
      ${Names.env_in} := ${procedure_instantiation.env_in};
.)

Rules for procedure_instantiation. :
(.
      ${Generic_Unit_Name.env_in} := ${procedure_instantiation.env_in};
.)

Rules for procedure_instantiation. :
(.
      ${Generic_Actual_Part.env_in} := ${procedure_instantiation.env_in};
.)

Rules for procedure_instantiation. :
(.
      ${Aspect_Specifications.env_in} := ${procedure_instantiation.env_in};
.)

Rules for protected_body. :
(.
      ${Names.env_in} := ${protected_body.env_in};
.)

Rules for protected_body. :
(.
      ${Aspect_Specifications.env_in} := ${protected_body.env_in};
.)

Rules for protected_body. :
(.
      ${Protected_Operation_Items.env_in} := ${protected_body.env_in};
.)

Rules for protected_body_stub. :
(.
      ${Names.env_in} := ${protected_body_stub.env_in};
.)

Rules for protected_body_stub. :
(.
      ${Aspect_Specifications.env_in} := ${protected_body_stub.env_in};
.)

Rules for protected_definition. :
(.
      ${Visible_Protected_Items.env_in} := ${protected_definition.env_in};
.)

Rules for protected_definition. :
(.
      ${Private_Protected_Items.env_in} := ${protected_definition.env_in};
.)

Rules for protected_type_declaration. :
(.
      ${Names.env_in} := ${protected_type_declaration.env_in};
.)

Rules for protected_type_declaration. :
(.
      ${Discriminant_Part.env_in} := ${protected_type_declaration.env_in};
.)

Rules for protected_type_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${protected_type_declaration.env_in};
.)

Rules for protected_type_declaration. :
(.
      ${Progenitor_List.env_in} := ${protected_type_declaration.env_in};
.)

Rules for protected_type_declaration. :
(.
      ${Type_Declaration_View.env_in} := ${protected_type_declaration.env_in};
.)

Rules for qualified_expression. :
(.
      ${Converted_Or_Qualified_Subtype_Mark.env_in} := ${qualified_expression.env_in};
.)

Rules for qualified_expression. :
(.
      ${Converted_Or_Qualified_Expression.env_in} := ${qualified_expression.env_in};
.)

Rules for quantified_expression. :
(.
      ${iterator_specification.env_in} := ${quantified_expression.env_in};
.)

Rules for quantified_expression. :
(.
      ${predicate.env_in} := ${quantified_expression.env_in};
.)

Rules for raise_statement. :
(.
      ${Raised_Exception.env_in} := ${raise_statement.env_in};
.)

Rules for raise_statement. :
(.
      ${Raise_Statement_Message.env_in} := ${raise_statement.env_in};
.)

Rules for range_attribute_reference.Range_Attribute :
(.
      ${Range_Attribute.env_in} := ${range_attribute_reference.env_in};
.)

Rules for range_attribute_reference_dr.Range_Attribute :
(.
      ${Range_Attribute.env_in} := ${range_attribute_reference_dr.env_in};
.)

Rules for association_list. :
(.
      ${Record_Component_Associations.env_in} := ${association_list.env_in};
.)

Rules for record_aggregate.Associations :
(.
      ${Associations.env_in} := ${record_aggregate.env_in};
.)

Rules for record_definition. :
(.
      ${Record_Components.env_in} := ${record_definition.env_in};
.)

Rules for record_representation_clause. :
(.
      ${Representation_Clause_Name.env_in} := ${record_representation_clause.env_in};
.)

Rules for record_representation_clause. :
(.
      ${Mod_Clause_Expression.env_in} := ${record_representation_clause.env_in};
.)

Rules for record_representation_clause. :
(.
      ${Component_Clauses.env_in} := ${record_representation_clause.env_in};
.)

Rules for record_type_definition. :
(.
      ${Record_Definition.env_in} := ${record_type_definition.env_in};
.)

Rules for requeue_statement. :
(.
      ${Requeue_Entry_Name.env_in} := ${requeue_statement.env_in};
.)

Rules for return_object_specification. :
(.
      ${Names.env_in} := ${return_object_specification.env_in};
.)

Rules for return_object_specification. :
(.
      ${Object_Declaration_Subtype.env_in} := ${return_object_specification.env_in};
.)

Rules for return_object_specification. :
(.
      ${Initialization_Expression.env_in} := ${return_object_specification.env_in};
.)

Rules for select_or_path. :
(.
      ${Guard.env_in} := ${select_or_path.env_in};
.)

Rules for select_or_path. :
(.
      ${Sequence_Of_Statements.env_in} := ${select_or_path.env_in};
.)

Rules for selected_component. :
(.
      ${prefix.env_in} := ${selected_component.env_in};
.)

Rules for selected_component. :
(.
      ${Selector.env_in} := ${selected_component.env_in};
.)

Rules for selected_identifier. :
(.
      ${Prefix.env_in} := ${selected_identifier.env_in};
.)

Rules for selected_identifier. :
(.
      ${Selector.env_in} := ${selected_identifier.env_in};
.)

Rules for selective_accept. :
(.
      ${Selective_Statement_Paths.env_in} := ${selective_accept.env_in};
.)

Rules for short_circuit. :
(.
      ${Short_Circuit_Operation_Left_Expression.env_in} := ${short_circuit.env_in};
.)

Rules for short_circuit. :
(.
      ${Short_Circuit_Operation_Right_Expression.env_in} := ${short_circuit.env_in};
.)

Rules for signed_integer_type_definition. :
(.
      ${Integer_Constraint.env_in} := ${signed_integer_type_definition.env_in};
.)

Rules for simple_expression_range. :
(.
      ${Lower_Bound.env_in} := ${simple_expression_range.env_in};
.)

Rules for simple_expression_range. :
(.
      ${Upper_Bound.env_in} := ${simple_expression_range.env_in};
.)

Rules for simple_expression_range_dr. :
(.
      ${Lower_Bound.env_in} := ${simple_expression_range_dr.env_in};
.)

Rules for simple_expression_range_dr. :
(.
      ${Upper_Bound.env_in} := ${simple_expression_range_dr.env_in};
.)

Rules for simple_return_statement. :
(.
      ${Return_Expression.env_in} := ${simple_return_statement.env_in};
.)

Rules for single_protected_declaration. :
(.
      ${Names.env_in} := ${single_protected_declaration.env_in};
.)

Rules for single_protected_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${single_protected_declaration.env_in};
.)

Rules for single_protected_declaration. :
(.
      ${Progenitor_List.env_in} := ${single_protected_declaration.env_in};
.)

Rules for single_protected_declaration. :
(.
      ${Object_Declaration_Subtype.env_in} := ${single_protected_declaration.env_in};
.)

Rules for single_task_declaration. :
(.
      ${Names.env_in} := ${single_task_declaration.env_in};
.)

Rules for single_task_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${single_task_declaration.env_in};
.)

Rules for single_task_declaration. :
(.
      ${Progenitor_List.env_in} := ${single_task_declaration.env_in};
.)

Rules for single_task_declaration. :
(.
      ${Object_Declaration_Subtype.env_in} := ${single_task_declaration.env_in};
.)

Rules for subtype_declaration. :
(.
      ${Names.env_in} := ${subtype_declaration.env_in};
.)

Rules for subtype_declaration. :
(.
      ${Type_Declaration_View.env_in} :=
        Gela.Pass_Utils.Add_Name_Create_Region
          (Self.Compilation,
           ${subtype_declaration.env_in},
           ${Names.full_name},
           Gela.Elements.Defining_Names.Defining_Name_Access (Names),
           Gela.Elements.Element_Access (Node));
.)

Rules for subtype_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${Type_Declaration_View.env_out};
.)

Rules for subtype_indication. :
(.
      ${subtype_mark.env_in} := ${subtype_indication.env_in};
.)

Rules for subtype_indication. :
(.
      ${Subtype_Constraint.env_in} := ${subtype_indication.env_in};
.)

Rules for subunit. :
(.
      ${Context_Clause_Elements.env_in} :=
        Self.Compilation.Context.Environment_Set.Library_Level_Environment;
.)

Rules for subunit. :
(.
      ${parent_unit_name.env_in} :=
        Self.Compilation.Context.Environment_Set.Library_Level_Environment;
.)

Rules for subunit. :
(.
      --  depends on ${Context_Clause_Elements.env_out}
      ${Unit_Declaration.env_in} :=
        Self.Compilation.Context.Environment_Set.Library_Level_Environment;
.)

Rules for task_body. :
(.
      ${Names.env_in} := ${task_body.env_in};
.)

Rules for task_body. :
(.
      ${Aspect_Specifications.env_in} := ${task_body.env_in};
.)

Rules for task_body. :
(.
      ${Body_Declarative_Items.env_in} := ${task_body.env_in};
.)

Rules for task_body. :
(.
      ${Body_Statements.env_in} := ${task_body.env_in};
.)

Rules for task_body. :
(.
      ${Exception_Handlers.env_in} := ${task_body.env_in};
.)

Rules for task_body_stub. :
(.
      ${Names.env_in} := ${task_body_stub.env_in};
.)

Rules for task_body_stub. :
(.
      ${Aspect_Specifications.env_in} := ${task_body_stub.env_in};
.)

Rules for task_definition. :
(.
      ${Visible_Task_Items.env_in} := ${task_definition.env_in};
.)

Rules for task_definition. :
(.
      ${Private_Task_Items.env_in} := ${task_definition.env_in};
.)

Rules for task_type_declaration. :
(.
      ${Names.env_in} := ${task_type_declaration.env_in};
.)

Rules for task_type_declaration. :
(.
      ${Discriminant_Part.env_in} := ${task_type_declaration.env_in};
.)

Rules for task_type_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${task_type_declaration.env_in};
.)

Rules for task_type_declaration. :
(.
      ${Progenitor_List.env_in} := ${task_type_declaration.env_in};
.)

Rules for task_type_declaration. :
(.
      ${Type_Declaration_View.env_in} := ${task_type_declaration.env_in};
.)

Rules for then_abort_path. :
(.
      ${Sequence_Of_Statements.env_in} := ${then_abort_path.env_in};
.)

Rules for unconstrained_array_definition. :
(.
      ${Index_Subtype_Definitions.env_in} := ${unconstrained_array_definition.env_in};
.)

Rules for unconstrained_array_definition. :
(.
      ${Array_Component_Definition.env_in} := ${unconstrained_array_definition.env_in};
.)

Rules for use_package_clause. :
(.
      ${Clause_Names.env_in} := ${use_package_clause.env_in};
.)

Rules for use_type_clause. :
(.
      ${Type_Clause_Names.env_in} := ${use_type_clause.env_in};
.)

Rules for variant. :
(.
      ${Variant_Choices.env_in} := ${variant.env_in};
.)

Rules for variant. :
(.
      ${Record_Components.env_in} := ${variant.env_in};
.)

Rules for variant_part. :
(.
      ${Discriminant_Direct_Name.env_in} := ${variant_part.env_in};
.)

Rules for variant_part. :
(.
      ${Variants.env_in} := ${variant_part.env_in};
.)

Rules for while_loop_statement. :
(.
      ${Statement_Identifier.env_in} := ${while_loop_statement.env_in};
.)

Rules for while_loop_statement. :
(.
      ${While_Condition.env_in} := ${while_loop_statement.env_in};
.)

Rules for while_loop_statement. :
(.
      ${Loop_Statements.env_in} := ${while_loop_statement.env_in};
.)

Rules for with_clause. :
(.
      --  Depend on ${with_clause.env_in}
      ${With_Clause_Names.env_in} :=
        Self.Compilation.Context.Environment_Set.Library_Level_Environment;
.)

