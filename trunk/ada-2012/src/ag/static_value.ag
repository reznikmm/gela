Synthesized attributes
  Record_Component_Associations,
  allocator,
  association,
  attribute_reference,
  box,
  case_expression,
  character_literal,
  direct_name,
  explicit_dereference,
  expression,
  expression_or_box,
  extension_aggregate,
  auxiliary_apply,
  identifier,
  if_expression,
  membership_test,
  name,
  null_literal,
  numeric_literal,
  operator_symbol,
  prefix,
  qualified_expression,
  quantified_expression,
  record_aggregate,
  selected_component,
  short_circuit,
  simple_expression,
  string_literal
   : Gela.Semantic_Types.Value_Index : static_value;

Rules for Record_Component_Associations.association :
(.
      ${Record_Component_Associations.static_value} := 0;
.)

Rules for Record_Component_Associations.association :
(.
	   Self.Compilation.Context.Values.List
	     (Tail  => ${tail.static_value},
        Head  => ${association.static_value},
        Value => ${Record_Component_Associations.static_value});
.)


Rules for string_literal.string_literal_token :
(.
	  ${string_literal.static_value} := Gela.Pass_Utils.Create_String_Value
	    (Self.Compilation, ${string_literal_token.Index});
.)

Rules for operator_symbol.operator_symbol_token :
(.
      --  Copy/Paste from def_name :-/
      Self.Compilation.Context.Interpretation_Manager.Get_Defining_Name
        (${operator_symbol.Down},
         This_Defining_Name);

      Self.Compilation.Context.Values.Name
        (This_Defining_Name,
         ${operator_symbol.static_value});

.)

Rules for identifier.identifier_token :
(.
      --  Copy/Paste from def_name :-/
      Self.Compilation.Context.Interpretation_Manager.Get_Defining_Name
        (${identifier.Down},
         This_Defining_Name);

      Self.Compilation.Context.Values.Name
        (This_Defining_Name,
	       ${identifier.static_value}); -- ${identifier.Down}
.)

Rules for attribute_reference. :
(.
	  ${attribute_reference.static_value} := 0;  --  FIXME
.)
Rules for character_literal.character_literal_token :
(.
	  ${character_literal.static_value} := 0;  --  FIXME
.)
Rules for explicit_dereference. :
(.
	  ${explicit_dereference.static_value} := 0;  --  FIXME
.)
Rules for auxiliary_apply. :
(.
      Self.Compilation.Context.Values.Apply
        (Name  => ${prefix.static_value},
         Args  => ${Function_Call_Parameters.static_value},
         Value => ${auxiliary_apply.static_value});
.)
Rules for qualified_expression. :
(.
	  ${qualified_expression.static_value} := 0;  --  FIXME
.)
Rules for selected_component. :
(.
	  ${selected_component.static_value} := 0;  --  FIXME
.)
Rules for numeric_literal.numeric_literal_token :
(.
    ${numeric_literal.static_value} := Gela.Pass_Utils.Create_Numeric_Value
      (Self.Compilation, ${numeric_literal_token.Index});
.)
Rules for null_literal.null_literal_token :
(.
      ${null_literal.static_value} := 0;  --  FIXME
.)
Rules for record_aggregate. :
(.
      ${record_aggregate.static_value} := ${Record_Component_Associations.static_value};
.)
Rules for extension_aggregate. :
(.
      ${extension_aggregate.static_value} := 0;  --  FIXME
.)
Rules for allocator. :
(.
      ${allocator.static_value} := 0;  --  FIXME
.)
Rules for if_expression.Expression_Paths :
(.
      ${if_expression.static_value} := 0;  --  FIXME
.)
Rules for case_expression. :
(.
      ${case_expression.static_value} := 0;  --  FIXME
.)
Rules for quantified_expression. :
(.
      ${quantified_expression.static_value} := 0;  --  FIXME
.)
Rules for membership_test. :
(.
      ${membership_test.static_value} := 0;  --  FIXME
.)
Rules for short_circuit. :
(.
      ${short_circuit.static_value} := 0;  --  FIXME
.)
Rules for box.box_token :
(.
      ${box.static_value} := 0;  --  FIXME
.)
Rules for association. :
(.
      ${association.static_value} := ${Component_Expression.static_value:0};
.)
