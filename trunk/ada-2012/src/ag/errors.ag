Synthesized attributes
  abort_statement,
  accept_statement,
  access_definition,
  allocator,
  anonymous_access_to_function_definition,
  anonymous_access_to_object_definition,
  anonymous_access_to_procedure_definition,
  assignment_statement,
  association,
  association_list,
  asynchronous_select,
  attribute_reference,
  block_statement,
  box,
  case_expression,
  case_path,
  case_statement,
  character_literal,
  clause_name,
  component_clause,
  component_definition,
  composite_constraint,
  clause_or_pragma,
  constrained_array_definition,
  constraint,
  defining_expanded_unit_name,
  defining_identifier,
  defining_program_unit_name,
  delay_statement,
  delta_constraint,
  digits_constraint,
  direct_name,
  discrete_choice,
  discrete_range,
  discrete_subtype_indication_dr,
  discrete_range_attribute_reference,
  discrete_simple_expression_range,
  discrete_subtype_definition,
  discrete_subtype_indication,
  exception_choice,
  exception_handler,
  exit_statement,
  explicit_dereference,
  expression,
  expression_or_box,
  extended_return_statement,
  extension_aggregate,
  for_loop_statement,
  function_call,
  generic_association,
  generic_formal_parameter,
  goto_statement,
  identifier,
  if_expression,
  if_statement,
  label_decorator,
  loop_statement,
  membership_choice,
  membership_test,
  name,
  null_literal,
  null_statement,
  numeric_literal,
  object_declaration,
  object_definition,
  operator_symbol,
  others_choice,
  package_declaration,
  parameter_specification,
  parenthesized_expression,
  pragma_argument_association,
  pragma_node,
  prefix,
  procedure_body,
  procedure_call_statement,
  program_unit_name,
  qualified_expression,
  quantified_expression,
  raise_statement,
  range_attribute_reference,
  range_attribute_reference_dr,
  range_constraint,
  range_dr,
  record_aggregate,
  requeue_statement,
  scalar_constraint,
  selected_component,
  selected_identifier,
  selective_accept,
  selector_name,
  short_circuit,
  simple_expression,
  simple_expression_range,
  simple_expression_range_dr,
  simple_return_statement,
  statement,
  string_literal,
  subtype_indication,
  subtype_indication_or_access_definition,
  subtype_mark,
  subtype_mark_or_access_definition,
  terminate_alternative_statement,
  unconstrained_array_definition,
  while_loop_statement,
  variant,
  variant_part,
  Array_Component_Choices,
  Associations,
  Body_Statements,
  Block_Statements,
  Case_Statement_Paths,
  Component_Clauses,
  Exception_Choices,
  Exception_Handlers,
  Discrete_Subtype_Definitions,
  Generic_Actual_Part,
  Index_Subtype_Definitions,
  Loop_Statements,
  Membership_Test_Choices,
  Pragma_Argument_Associations,
  Record_Component_Associations,
  Variant_Choices,
  Variants

   : Gela.Semantic_Types.Error_Set_Index : Errors;

Rules for identifier.identifier_token :
(.
        ${identifier.Errors} := 0;  --  ${identifier.Down}
.)

Rules for selected_identifier. :
(.
      ${selected_identifier.Errors} := 0;  --  ${Selector.Defining_Name}
.)

Rules for selected_component. :
(.
      ${selected_component.Errors} := 0;  --  ${Selector.Defining_Name}
.)

Rules for attribute_reference. :
(.
      ${attribute_reference.Errors} := 0;  -- ${prefix.Errors}
.)

Rules for function_call. :
(.
      ${function_call.Errors} := 0;
.)

Rules for subtype_indication. :
(.
      ${subtype_indication.Errors} := ${Subtype_Constraint.Errors:0};
.)

Rules for discrete_subtype_indication_dr. :
(.
      ${discrete_subtype_indication_dr.Errors} := ${Subtype_Constraint.Errors:0};
.)

Rules for delta_constraint. :
(.
      ${delta_constraint.Errors} := 0;
.)

Rules for digits_constraint. :
(.
      ${digits_constraint.Errors} := 0;
.)
Rules for range_attribute_reference.Range_Attribute :
(.
      ${range_attribute_reference.Errors} := 0;
.)
Rules for range_attribute_reference_dr.Range_Attribute :
(.
      ${range_attribute_reference_dr.Errors} := 0;
.)
Rules for simple_expression_range. :
(.
      --  ${Upper_Bound.Errors}, ${Lower_Bound.Errors}
      ${simple_expression_range.Errors} := 0;
.)
Rules for simple_expression_range_dr. :
(.
      --  ${Upper_Bound.Errors}, ${Lower_Bound.Errors}
      ${simple_expression_range_dr.Errors} := 0;
.)
Rules for composite_constraint. :
(.
      ${composite_constraint.Errors} := ${Associations.Errors};
.)
Rules for allocator. :
(.
      ${allocator.Errors} := 0;  --  FIXME
.)
Rules for case_expression. :
(.
      ${case_expression.Errors} := 0;  --  FIXME
.)
Rules for extension_aggregate. :
(.
      ${extension_aggregate.Errors} := 0;  --  FIXME
.)
Rules for if_expression.Expression_Paths :
(.
      ${if_expression.Errors} := 0;  --  FIXME
.)
Rules for null_literal.null_literal_token :
(.
      ${null_literal.Errors} := 0;  --  FIXME
.)
Rules for string_literal.string_literal_token :
(.
      ${string_literal.Errors} := 0;  --  FIXME
.)
Rules for numeric_literal.numeric_literal_token :
(.
      ${numeric_literal.Errors} := 0;  --  FIXME
.)
Rules for quantified_expression. :
(.
      ${quantified_expression.Errors} := 0;  --  FIXME
.)
Rules for association_list. :
(.
      ${association_list.Errors} := ${Record_Component_Associations.Errors};
.)

Rules for character_literal.character_literal_token :
(.
      ${character_literal.Errors} := 0; --  FIXME
.)
Rules for explicit_dereference. :
(.
      ${explicit_dereference.Errors} := 0; --  FIXME
.)
Rules for operator_symbol.operator_symbol_token :
(.
      ${operator_symbol.Errors} := 0; --  FIXME
.)
Rules for qualified_expression. :
(.
      ${qualified_expression.Errors} := 0; --  FIXME
.)
Rules for object_declaration. :
(.
      ${object_declaration.Errors} := ${Initialization_Expression.Errors:0};
      --  ${Object_Declaration_Subtype.Errors};
.)
Rules for parameter_specification. :
(.
      ${parameter_specification.Errors} := ${Initialization_Expression.Errors:0};
      --  ${Object_Declaration_Subtype.Errors};
.)
Rules for parenthesized_expression. :
(.
      ${parenthesized_expression.Errors} := ${Expression_Parenthesized.Errors};
.)
Rules for membership_test. :
(.
      ${membership_test.Errors} := 0; --  FIXME
      --  ${Membership_Test_Choices.Errors}
.)
Rules for short_circuit. :
(.
      ${short_circuit.Errors} := 0; --  FIXME
.)
Rules for Array_Component_Choices.discrete_choice :
(.
      ${Array_Component_Choices.Errors} := 0;
.)
Rules for Array_Component_Choices.discrete_choice :
(.
      ${Array_Component_Choices.Errors} := ${discrete_choice.Errors}; --  FIXME
.)
Rules for Associations.association :
(.
      ${Associations.Errors} := 0; --  FIXME
.)
Rules for Index_Subtype_Definitions.subtype_mark :
(.
      ${Index_Subtype_Definitions.Errors} := 0;
.)
Rules for Index_Subtype_Definitions.subtype_mark :
(.
      ${Index_Subtype_Definitions.Errors} := ${subtype_mark.Errors};
.)
Rules for Discrete_Subtype_Definitions.discrete_subtype_definition :
(.
      ${Discrete_Subtype_Definitions.Errors} := 0;
.)
Rules for Discrete_Subtype_Definitions.discrete_subtype_definition :
(.
      ${Discrete_Subtype_Definitions.Errors} := ${discrete_subtype_definition.Errors};
.)
Rules for Body_Statements.statement :
(.
      ${Body_Statements.Errors} := 0;
.)
Rules for Body_Statements.statement :
(.
      ${Body_Statements.Errors} := ${statement.Errors};
.)
Rules for Block_Statements.statement :
(.
      ${Block_Statements.Errors} := 0;
.)
Rules for Block_Statements.statement :
(.
      ${Block_Statements.Errors} := ${statement.Errors};
.)
Rules for Loop_Statements.statement :
(.
      ${Loop_Statements.Errors} := 0;
.)
Rules for Loop_Statements.statement :
(.
      ${Loop_Statements.Errors} := ${statement.Errors};
.)
Rules for Case_Statement_Paths.case_path :
(.
      ${Case_Statement_Paths.Errors} := 0;
.)
Rules for Case_Statement_Paths.case_path :
(.
      ${Case_Statement_Paths.Errors} := ${case_path.Errors}; --  FIXME
.)

Rules for Component_Clauses.clause_or_pragma :
(.
      ${Component_Clauses.Errors} := 0;
.)
Rules for Component_Clauses.clause_or_pragma :
(.
      ${Component_Clauses.Errors} := ${clause_or_pragma.Errors};
.)
Rules for Record_Component_Associations.association :
(.
      ${Record_Component_Associations.Errors} := 0;
.)
Rules for Record_Component_Associations.association :
(.
      ${Record_Component_Associations.Errors} := ${association.Errors};
.)
Rules for Pragma_Argument_Associations.pragma_argument_association :
(.
      ${Pragma_Argument_Associations.Errors} := 0;
.)
Rules for Pragma_Argument_Associations.pragma_argument_association :
(.
      ${Pragma_Argument_Associations.Errors} :=
        ${pragma_argument_association.Errors};
.)
Rules for Variant_Choices.discrete_choice :
(.
      ${Variant_Choices.Errors} := 0;
.)
Rules for Variant_Choices.discrete_choice :
(.
      ${Variant_Choices.Errors} := ${discrete_choice.Errors}; --  FIXME
.)
Rules for Variants.variant :
(.
      ${Variants.Errors} := 0;
.)
Rules for Variants.variant :
(.
      ${Variants.Errors} := ${variant.Errors}; --  FIXME
.)
Rules for Membership_Test_Choices.membership_choice :
(.
      ${Membership_Test_Choices.Errors} := 0;
.)
Rules for Membership_Test_Choices.membership_choice :
(.
      ${Membership_Test_Choices.Errors} := ${membership_choice.Errors};
.)
Rules for Exception_Choices.exception_choice :
(.
      ${Exception_Choices.Errors} := 0;
.)
Rules for Exception_Choices.exception_choice :
(.
      ${Exception_Choices.Errors} := ${exception_choice.Errors}; --  FIXME
.)
Rules for Exception_Handlers.exception_handler :
(.
      ${Exception_Handlers.Errors} := 0;
.)
Rules for Exception_Handlers.exception_handler :
(.
      ${Exception_Handlers.Errors} := ${exception_handler.Errors}; --  FIXME
.)
Rules for Generic_Actual_Part.generic_association :
(.
      ${Generic_Actual_Part.Errors} := 0;
.)
Rules for Generic_Actual_Part.generic_association :
(.
      ${Generic_Actual_Part.Errors} := ${generic_association.Errors}; --  FIXME
.)

Rules for unconstrained_array_definition. :
(.
      ${unconstrained_array_definition.Errors} := ${Index_Subtype_Definitions.Errors};
      --  ${Array_Component_Definition.Errors}
.)
Rules for constrained_array_definition. :
(.
      ${constrained_array_definition.Errors} := ${Discrete_Subtype_Definitions.Errors};
      --  ${Array_Component_Definition.Errors}
.)

Rules for component_clause. :
(.
      ${component_clause.Errors} := ${Component_Clause_Range.Errors};
.)

Rules for component_definition. :
(.
      ${component_definition.Errors} := ${Component_Subtype_Indication.Errors};
.)

Rules for anonymous_access_to_object_definition. :
(.
      ${anonymous_access_to_object_definition.Errors} := 0;  --  FIXME
.)
Rules for anonymous_access_to_function_definition. :
(.
      ${anonymous_access_to_function_definition.Errors} := 0;  --  FIXME
.)
Rules for anonymous_access_to_procedure_definition. :
(.
      ${anonymous_access_to_procedure_definition.Errors} := 0;  --  FIXME
.)
Rules for discrete_subtype_indication. :
(.
      ${discrete_subtype_indication.Errors} := 0;  --  FIXME
.)
Rules for discrete_range_attribute_reference.Range_Attribute :
(.
      ${discrete_range_attribute_reference.Errors} := 0;  --  FIXME
.)
Rules for discrete_simple_expression_range. :
(.
      ${discrete_simple_expression_range.Errors} := 0;  --  FIXME
      --  ${Upper_Bound.Errors}, ${Lower_Bound.Errors}
.)
Rules for defining_expanded_unit_name. :
(.
      ${defining_expanded_unit_name.Errors} := ${Defining_Prefix.Errors};
.)
Rules for package_declaration. :
(.
      ${package_declaration.Errors} := ${Names.Errors};
.)
Rules for defining_identifier.identifier_token :
(.
      ${defining_identifier.Errors} := 0;
.)
Rules for abort_statement. :
(.
      ${abort_statement.Errors} := 0;  --  FIXME
.)
Rules for accept_statement. :
(.
      ${accept_statement.Errors} := 0;  --  FIXME
.)
Rules for assignment_statement. :
(.
      ${assignment_statement.Errors} := 0;  --  FIXME
.)
Rules for asynchronous_select. :
(.
      ${asynchronous_select.Errors} := 0;  --  FIXME
.)
Rules for block_statement. :
(.
      ${block_statement.Errors} := 0;  --  FIXME
.)
Rules for case_statement. :
(.
      ${case_statement.Errors} := ${Case_Statement_Paths.Errors};  --  FIXME
.)
Rules for delay_statement. :
(.
      ${delay_statement.Errors} := 0;  --  FIXME
.)
Rules for exit_statement. :
(.
      ${exit_statement.Errors} := 0;  --  FIXME
.)
Rules for extended_return_statement. :
(.
      ${extended_return_statement.Errors} := 0;  --  FIXME
.)
Rules for for_loop_statement. :
(.
      ${for_loop_statement.Errors} := 0;  --  FIXME
.)
Rules for goto_statement. :
(.
      ${goto_statement.Errors} := 0;  --  FIXME
.)
Rules for if_statement. :
(.
      ${if_statement.Errors} := 0;  --  FIXME
.)
Rules for label_decorator. :
(.
      ${label_decorator.Errors} := 0;  --  FIXME
.)
Rules for loop_statement. :
(.
      ${loop_statement.Errors} := 0;  --  FIXME
.)
Rules for null_statement. :
(.
      ${null_statement.Errors} := 0;  --  FIXME
.)
Rules for pragma_argument_association. :
(.
      ${pragma_argument_association.Errors} :=
        ${Actual_Parameter.Errors};  --  FIXME
.)
Rules for pragma_node. :
(.
      ${pragma_node.Errors} := 0;  --  FIXME
.)
Rules for procedure_call_statement. :
(.
      ${procedure_call_statement.Errors} := 0;  --  FIXME
.)
Rules for raise_statement. :
(.
      ${raise_statement.Errors} := 0;  --  FIXME
.)
Rules for requeue_statement. :
(.
      ${requeue_statement.Errors} := 0;  --  FIXME
.)
Rules for selective_accept. :
(.
      ${selective_accept.Errors} := 0;  --  FIXME
.)
Rules for simple_return_statement. :
(.
      ${simple_return_statement.Errors} := 0;  --  FIXME
.)
Rules for terminate_alternative_statement. :
(.
      ${terminate_alternative_statement.Errors} := 0;  --  FIXME
.)
Rules for while_loop_statement. :
(.
      ${while_loop_statement.Errors} := 0;  --  FIXME
.)
Rules for association. :
(.
      ${association.Errors} := ${Component_Expression.Errors:0};  --  FIXME
.)
Rules for box.box_token :
(.
      ${box.Errors} := 0;  --  FIXME
.)
Rules for others_choice.others_token :
(.
      ${others_choice.Errors} := 0;  --  FIXME
.)
Rules for record_aggregate.Associations :
(.
      ${record_aggregate.Errors} := ${Associations.Errors};
.)
Rules for variant. :
(.
      ${variant.Errors} := ${Variant_Choices.Errors};  --  FIXME
.)
Rules for variant_part. :
(.
      ${variant_part.Errors} := ${Variants.Errors};  --  FIXME
.)
Rules for case_path. :
(.
      ${case_path.Errors} := ${Variant_Choices.Errors};  --  FIXME
.)
Rules for procedure_body. :
(.
      ${procedure_body.Errors} := ${Exception_Handlers.Errors};  --  FIXME
.)
Rules for exception_handler. :
(.
      ${exception_handler.Errors} := ${Exception_Choices.Errors};  --  FIXME
.)
Rules for generic_association. :
(.
      ${generic_association.Errors} := ${Formal_Parameter.Errors:0};
.)
