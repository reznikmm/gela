Inherited attributes
  abort_statement,
  accept_statement,
  access_definition,
  access_to_function_definition,
  access_to_object_definition,
  access_to_procedure_definition,
  allocator,
  anonymous_access_to_function_definition,
  anonymous_access_to_object_definition,
  anonymous_access_to_procedure_definition,
  aspect_clause,
  assignment_statement,
  asynchronous_select,
  at_clause,
  attribute_definition_clause,
  attribute_reference,
  basic_declaration,
  basic_declarative_item,
  block_statement,
  body_declaration,
  body_stub,
  box,
  case_expression,
  case_statement,
  character_literal,
  choice_parameter_specification,
  clause_name,
  clause_or_pragma,
  component_clause,
  component_declaration,
  component_item,
  composite_constraint,
  constrained_array_definition,
  constraint,
  context_item,
  decimal_fixed_point_definition,
  declarative_item,
  declarative_region,
  defining_character_literal,
  defining_designator,
  defining_enumeration_literal,
  defining_enumeration_name,
  defining_expanded_unit_name,
  defining_identifier,
  defining_name,
  defining_operator_symbol,
  defining_program_unit_name,
  delay_statement,
  delta_constraint,
  derived_record_definition,
  derived_type_definition,
  designator,
  digits_constraint,
  direct_name,
  discrete_choice,
  discrete_range,
  discrete_subtype_indication_dr,
  discriminant_specification,
  element_iterator_specification,
  entry_body,
  entry_declaration,
  entry_index_specification,
  enumeration_literal,
  enumeration_type_definition,
  exception_choice,
  exception_declaration,
  exception_handler,
  exception_renaming_declaration,
  exit_statement,
  explicit_dereference,
  expression,
  expression_or_box,
  extended_return_statement,
  extension_aggregate,
  floating_point_definition,
  for_loop_statement,
  formal_function_declaration,
  formal_incomplete_type_declaration,
  formal_object_declaration,
  formal_package_declaration,
  formal_procedure_declaration,
  formal_type_declaration,
  full_type_declaration,
  function_body,
  function_call,
  function_declaration,
  function_instantiation,
  generalized_iterator_specification,
  generic_formal,
  generic_formal_parameter,
  generic_function_declaration,
  generic_function_renaming,
  generic_package_declaration,
  generic_package_renaming,
  generic_procedure_declaration,
  generic_procedure_renaming,
  goto_statement,
  identifier,
  if_expression,
  if_statement,
  incomplete_type_declaration,
  interface_type_definition,
  iterator_specification,
  label_decorator,
  library_unit_body,
  library_unit_declaration,
  loop_parameter_specification,
  loop_statement,
  membership_choice,
  membership_test,
  modular_type_definition,
  name,
  null_component,
  null_literal,
  null_statement,
  number_declaration,
  numeric_literal,
  object_declaration,
  object_definition,
  object_renaming_declaration,
  operator_symbol,
  ordinary_fixed_point_definition,
  others_choice,
  package_body,
  package_body_stub,
  package_declaration,
  package_instantiation,
  package_renaming_declaration,
  parameter_specification,
  pragma_node,
  prefix,
  private_extension_declaration,
  private_type_declaration,
  procedure_body,
  procedure_call_statement,
  procedure_declaration,
  procedure_instantiation,
  program_unit_name,
  proper_body,
  protected_body,
  protected_body_stub,
  protected_element_declaration,
  protected_operation_declaration,
  protected_operation_item,
  protected_type_declaration,
  qualified_expression,
  quantified_expression,
  raise_statement,
  range_attribute_reference,
  range_attribute_reference_dr,
  range_constraint,
  range_dr,
  record_aggregate,
  record_representation_clause,
  record_type_definition,
  requeue_statement,
  return_object_specification,
  root_type_definition,
  scalar_constraint,
  selected_component,
  selected_identifier,
  selective_accept,
  selector_name,
  short_circuit,
  signed_integer_type_definition,
  simple_expression,
  simple_expression_range,
  simple_expression_range_dr,
  simple_name,
  simple_return_statement,
  single_protected_declaration,
  single_task_declaration,
  statement,
  string_literal,
  subtype_declaration,
  subtype_indication,
  subtype_indication_or_access_definition,
  subtype_mark,
  subtype_mark_or_access_definition,
  task_body,
  task_body_stub,
  task_item,
  task_type_declaration,
  terminate_alternative_statement,
  type_definition,
  unconstrained_array_definition,
  use_clause,
  use_package_clause,
  use_type_clause,
  variant_part,
  while_loop_statement,
  with_clause,

  Aborted_Tasks,
  Accept_Body_Exception_Handlers,
  Accept_Body_Statements,
  Accept_Parameters,
  Access_To_Subprogram_Parameter_Profile,
  Array_Component_Choices,
  Block_Declarative_Items,
  Block_Exception_Handlers,
  Block_Statements,
  Body_Declarative_Items,
  Body_Exception_Handlers,
  Body_Statements,
  Case_Path_Alternative_Choices,
  Case_Statement_Alternative_Choices,
  Clause_Names,
  Compilation_Pragmas,
  Component_Clauses,
  Context_Clause_Elements,
  Discriminants,
  Exception_Choices,
  Extended_Return_Exception_Handlers,
  Extended_Return_Statements,
  Generic_Formal_Part,
  Handler_Statements,
  Index_Subtype_Definitions,
  Label_Names,
  Loop_Statements,
  Membership_Test_Choices,
  Names,
  Parameter_Profile,
  Private_Part_Declarative_Items,
  Private_Protected_Items,
  Private_Task_Items,
  Progenitor_List,
  Protected_Operation_Items,
  Record_Components,
  Sequence_Of_Statements,
  Type_Clause_Names,
  Variant_Choices,
  Visible_Part_Declarative_Items,
  Visible_Protected_Items,
  Visible_Task_Items,
  With_Clause_Names

  : Gela.Elements.Element_Access : Parent;

Rules for label_decorator. :
(.
      ${Label_Names.Parent} := Gela.Elements.Element_Access (Unlabeled_Statement);
.)

Rules for Label_Names.defining_identifier :
(.
      ${defining_identifier.Parent} := ${Label_Names.Parent};
.)

Rules for Names.defining_identifier :
(.
      ${defining_identifier.Parent} := ${Names.Parent};
.)

Rules for choice_parameter_specification.Names :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for defining_expanded_unit_name. :
(.
      ${Defining_Selector.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for element_iterator_specification. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for entry_body. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for entry_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for entry_index_specification. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for enumeration_literal_specification.Names :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for formal_function_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for formal_incomplete_type_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for formal_package_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for formal_procedure_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for formal_type_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for full_type_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for function_body. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for function_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for function_instantiation. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for generalized_iterator_specification. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for generic_function_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for generic_function_renaming. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for generic_package_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for generic_package_renaming. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for generic_procedure_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for generic_procedure_renaming. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for incomplete_type_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for loop_parameter_specification. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for package_body. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for package_body_stub. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for package_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for package_instantiation. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for package_renaming_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for private_extension_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for private_type_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for procedure_body. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for procedure_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for procedure_instantiation. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for protected_body. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for protected_body_stub. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for protected_type_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for return_object_specification. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for single_protected_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for single_task_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for subtype_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for task_body. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for task_body_stub. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for task_type_declaration. :
(.
      ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for component_declaration. :
(.
	  ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for discriminant_specification. :
(.
	  ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for exception_declaration. :
(.
	  ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for exception_renaming_declaration. :
(.
	  ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for formal_object_declaration. :
(.
	  ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for number_declaration. :
(.
	  ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for object_declaration. :
(.
	  ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for object_renaming_declaration. :
(.
	  ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for parameter_specification. :
(.
	  ${Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for compilation_unit_body. :
(.
    ${Unit_Declaration.Parent} := Gela.Elements.Element_Access (Node);
.)


Rules for Accept_Body_Exception_Handlers.exception_handler :
(.
      ${exception_handler.Parent} := ${Accept_Body_Exception_Handlers.Parent};
.)
Rules for Accept_Parameters.parameter_specification :
(.
      ${parameter_specification.Parent} := ${Accept_Parameters.Parent};
.)
Rules for Access_To_Subprogram_Parameter_Profile.parameter_specification :
(.
      ${parameter_specification.Parent} := ${Access_To_Subprogram_Parameter_Profile.Parent};
.)
Rules for Block_Exception_Handlers.exception_handler :
(.
      ${exception_handler.Parent} := ${Block_Exception_Handlers.Parent};
.)
Rules for Body_Exception_Handlers.exception_handler :
(.
      ${exception_handler.Parent} := ${Body_Exception_Handlers.Parent};
.)
Rules for Discriminants.discriminant_specification :
(.
      ${discriminant_specification.Parent} := ${Discriminants.Parent};
.)
Rules for Extended_Return_Exception_Handlers.exception_handler :
(.
      ${exception_handler.Parent} := ${Extended_Return_Exception_Handlers.Parent};
.)
Rules for Parameter_Profile.parameter_specification :
(.
      ${parameter_specification.Parent} := ${Parameter_Profile.Parent};
.)
Rules for Private_Part_Declarative_Items.basic_declarative_item :
(.
      ${basic_declarative_item.Parent} := ${Private_Part_Declarative_Items.Parent};
.)
Rules for Visible_Part_Declarative_Items.basic_declarative_item :
(.
      ${basic_declarative_item.Parent} := ${Visible_Part_Declarative_Items.Parent};
.)

Rules for Accept_Body_Statements.statement :
(.
      ${statement.Parent} := ${Accept_Body_Statements.Parent};
.)
Rules for Block_Declarative_Items.declarative_item :
(.
      ${declarative_item.Parent} := ${Block_Declarative_Items.Parent};
.)
Rules for Block_Statements.statement :
(.
      ${statement.Parent} := ${Block_Statements.Parent};
.)
Rules for Body_Declarative_Items.declarative_item :
(.
      ${declarative_item.Parent} := ${Body_Declarative_Items.Parent};
.)
Rules for Body_Statements.statement :
(.
      ${statement.Parent} := ${Body_Statements.Parent};
.)
Rules for Compilation_Pragmas.context_item :
(.
      ${context_item.Parent} := ${Compilation_Pragmas.Parent};
.)
Rules for Component_Clauses.clause_or_pragma :
(.
      ${clause_or_pragma.Parent} := ${Component_Clauses.Parent};
.)
Rules for Context_Clause_Elements.context_item :
(.
      ${context_item.Parent} := ${Context_Clause_Elements.Parent};
.)
Rules for Extended_Return_Statements.statement :
(.
      ${statement.Parent} := ${Extended_Return_Statements.Parent};
.)
Rules for Generic_Formal_Part.generic_formal :
(.
      ${generic_formal.Parent} := ${Generic_Formal_Part.Parent};
.)
Rules for Handler_Statements.statement :
(.
      ${statement.Parent} := ${Handler_Statements.Parent};
.)
Rules for Loop_Statements.statement :
(.
      ${statement.Parent} := ${Loop_Statements.Parent};
.)
Rules for Private_Protected_Items.protected_element_declaration :
(.
      ${protected_element_declaration.Parent} := ${Private_Protected_Items.Parent};
.)
Rules for Protected_Operation_Items.protected_operation_item :
(.
      ${protected_operation_item.Parent} := ${Protected_Operation_Items.Parent};
.)
Rules for Record_Components.component_item :
(.
      ${component_item.Parent} := ${Record_Components.Parent};
.)
Rules for Sequence_Of_Statements.statement :
(.
      ${statement.Parent} := ${Sequence_Of_Statements.Parent};
.)
Rules for Visible_Protected_Items.protected_operation_declaration :
(.
      ${protected_operation_declaration.Parent} := ${Visible_Protected_Items.Parent};
.)
Rules for Visible_Task_Items.task_item :
(.
     ${task_item.Parent} := ${Visible_Task_Items.Parent};
.)
Rules for Private_Task_Items.task_item :
(.
     ${task_item.Parent} := ${Private_Task_Items.Parent};
.)
Rules for Membership_Test_Choices.membership_choice :
(.
  ${membership_choice.Parent} := ${Membership_Test_Choices.Parent};
.)

Rules for accept_statement. :
(.
     ${Accept_Parameters.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for accept_statement. :
(.
     ${Accept_Body_Exception_Handlers.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for access_to_function_definition. :
(.
     ${Access_To_Subprogram_Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for access_to_procedure_definition. :
(.
     ${Access_To_Subprogram_Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for anonymous_access_to_function_definition. :
(.
     ${Access_To_Subprogram_Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for anonymous_access_to_procedure_definition. :
(.
     ${Access_To_Subprogram_Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for block_statement. :
(.
     ${Block_Exception_Handlers.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for entry_body. :
(.
     ${Entry_Index_Specification.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for entry_body. :
(.
     ${Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for entry_body. :
(.
     ${Body_Exception_Handlers.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for entry_declaration. :
(.
     ${Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for exception_handler. :
(.
     ${Choice_Parameter_Specification.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for extended_return_statement. :
(.
     ${Return_Object_Specification.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for extended_return_statement. :
(.
     ${Extended_Return_Exception_Handlers.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for for_loop_statement. :
(.
     ${Loop_Parameter_Specification.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_access_to_function_definition. :
(.
     ${Access_To_Subprogram_Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_access_to_procedure_definition. :
(.
     ${Access_To_Subprogram_Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_function_declaration. :
(.
     ${Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_procedure_declaration. :
(.
     ${Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for function_body. :
(.
     ${Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for function_body. :
(.
     ${Body_Exception_Handlers.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for function_declaration. :
(.
     ${Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for Compilation. :
(.
     ${Compilation_Pragmas.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for accept_statement. :
(.
     ${Accept_Body_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for block_statement. :
(.
     ${Block_Declarative_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for block_statement. :
(.
     ${Block_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for case_path. :
(.
     ${Sequence_Of_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for compilation_unit_body. :
(.
     ${Context_Clause_Elements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for compilation_unit_declaration. :
(.
     ${Context_Clause_Elements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for compilation_unit_declaration. :
(.
     ${Unit_Declaration.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for else_path. :
(.
     ${Sequence_Of_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for elsif_path. :
(.
     ${Sequence_Of_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for entry_body. :
(.
     ${Body_Declarative_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for entry_body. :
(.
     ${Body_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for exception_handler. :
(.
     ${Handler_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for extended_return_statement. :
(.
     ${Extended_Return_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for for_loop_statement. :
(.
     ${Loop_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for function_body. :
(.
     ${Body_Declarative_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for function_body. :
(.
     ${Body_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_function_declaration. :
(.
     ${Generic_Formal_Part.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_function_declaration. :
(.
     ${Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_function_renaming. :
(.
     ${Generic_Formal_Part.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_package_declaration. :
(.
     ${Generic_Formal_Part.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_package_declaration. :
(.
     ${Visible_Part_Declarative_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_package_declaration. :
(.
     ${Private_Part_Declarative_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_package_renaming. :
(.
     ${Generic_Formal_Part.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_procedure_declaration. :
(.
     ${Generic_Formal_Part.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_procedure_declaration. :
(.
     ${Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_procedure_renaming. :
(.
     ${Generic_Formal_Part.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for if_path. :
(.
     ${Sequence_Of_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for known_discriminant_part. :
(.
     ${Discriminants.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for label_decorator. :
(.
     ${Unlabeled_Statement.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for loop_statement. :
(.
     ${Loop_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for package_body. :
(.
     ${Body_Declarative_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for package_body. :
(.
     ${Body_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for package_body. :
(.
     ${Body_Exception_Handlers.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for package_declaration. :
(.
     ${Visible_Part_Declarative_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for package_declaration. :
(.
     ${Private_Part_Declarative_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for procedure_body. :
(.
     ${Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for procedure_body. :
(.
     ${Body_Declarative_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for procedure_body. :
(.
     ${Body_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for procedure_body. :
(.
     ${Body_Exception_Handlers.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for procedure_declaration. :
(.
     ${Parameter_Profile.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for protected_body. :
(.
     ${Protected_Operation_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for protected_definition. :
(.
     ${Visible_Protected_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for protected_definition. :
(.
     ${Private_Protected_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for quantified_expression. :
(.
     ${iterator_specification.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for record_definition. :
(.
     ${Record_Components.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for record_representation_clause. :
(.
     ${Component_Clauses.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for select_or_path. :
(.
     ${Sequence_Of_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for subunit. :
(.
     ${Context_Clause_Elements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for subunit. :
(.
     ${Unit_Declaration.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for task_body. :
(.
     ${Body_Declarative_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for task_body. :
(.
     ${Body_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for task_body. :
(.
     ${Body_Exception_Handlers.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for then_abort_path. :
(.
     ${Sequence_Of_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for variant. :
(.
     ${Record_Components.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for while_loop_statement. :
(.
     ${Loop_Statements.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for task_definition. :
(.
     ${Visible_Task_Items.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for task_definition. :
(.
     ${Private_Task_Items.Parent} := Gela.Elements.Element_Access (Node);
.)


Rules for accept_statement. :
(.
      ${Accept_Entry_Direct_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for at_clause. :
(.
      ${Representation_Clause_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for attribute_reference. :
(.
      ${Attribute_Designator_Identifier.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for component_clause. :
(.
      ${Representation_Clause_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for parameter_association. :
(.
      ${Formal_Parameter.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for pragma_argument_association. :
(.
      ${Formal_Parameter.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for pragma_node. :
(.
      ${Formal_Parameter.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for record_representation_clause. :
(.
      ${Representation_Clause_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for variant_part. :
(.
      ${Discriminant_Direct_Name.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for Clause_Names.program_unit_name :
(.
      ${program_unit_name.Parent} := ${Clause_Names.Parent};
.)
Rules for Index_Subtype_Definitions.subtype_mark :
(.
      ${subtype_mark.Parent} := ${Index_Subtype_Definitions.Parent};
.)
Rules for Progenitor_List.subtype_mark :
(.
      ${subtype_mark.Parent} := ${Progenitor_List.Parent};
.)
Rules for Type_Clause_Names.subtype_mark :
(.
      ${subtype_mark.Parent} := ${Type_Clause_Names.Parent};
.)
Rules for With_Clause_Names.program_unit_name :
(.
      ${program_unit_name.Parent} := ${With_Clause_Names.Parent};
.)
Rules for Aborted_Tasks.name :
(.
  ${name.Parent} := ${Aborted_Tasks.Parent};
.)
Rules for Exception_Choices.exception_choice :
(.
  ${exception_choice.Parent} := ${Exception_Choices.Parent};
.)
Rules for Array_Component_Choices.discrete_choice :
(.
  ${discrete_choice.Parent} := ${Array_Component_Choices.Parent};
.)
Rules for Case_Path_Alternative_Choices.discrete_choice :
(.
  ${discrete_choice.Parent} := ${Case_Path_Alternative_Choices.Parent};
.)
Rules for Case_Statement_Alternative_Choices.discrete_choice :
(.
  ${discrete_choice.Parent} := ${Case_Statement_Alternative_Choices.Parent};
.)
Rules for Variant_Choices.discrete_choice :
(.
  ${discrete_choice.Parent} := ${Variant_Choices.Parent};
.)




Rules for anonymous_access_to_object_definition. :
(.
  ${Anonymous_Access_To_Object_Subtype_Mark.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for aspect_specification. :
(.
  ${Aspect_Mark.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for attribute_definition_clause. :
(.
  ${Representation_Clause_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for defining_expanded_unit_name. :
(.
  ${Defining_Prefix.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for discrete_subtype_indication. :
(.
  ${Subtype_Mark.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for discrete_subtype_indication_dr. :
(.
  ${Subtype_Mark.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for exit_statement. :
(.
  ${Exit_Loop_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_derived_type_definition. :
(.
  ${Subtype_Mark.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_package_declaration. :
(.
  ${Generic_Unit_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for function_instantiation. :
(.
  ${Generic_Unit_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_package_declaration. :
(.
  ${end_name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for goto_statement. :
(.
  ${Goto_Label.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for package_body. :
(.
  ${end_name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for package_declaration. :
(.
  ${end_name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for package_instantiation. :
(.
  ${Generic_Unit_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for procedure_body. :
(.
  ${end_name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for procedure_instantiation. :
(.
  ${Generic_Unit_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for qualified_expression. :
(.
  ${Converted_Or_Qualified_Subtype_Mark.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for selected_component. :
(.
  ${Selector.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for selected_identifier. :
(.
  ${Prefix.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for selected_identifier. :
(.
  ${Selector.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for subtype_indication. :
(.
  ${subtype_mark.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for subunit. :
(.
  ${parent_unit_name.Parent} := Gela.Elements.Element_Access (Node);
.)


Rules for access_to_function_definition. :
(.
  ${Access_To_Function_Result_Subtype.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for allocator. :
(.
  ${Subpool_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for allocator. :
(.
  ${Subtype_Or_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for anonymous_access_to_function_definition. :
(.
  ${Access_To_Function_Result_Subtype.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for assignment_statement. :
(.
  ${Assignment_Variable_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for derived_record_definition. :
(.
  ${Progenitor_List.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for discriminant_specification. :
(.
  ${Object_Declaration_Subtype.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for element_iterator_specification. :
(.
  ${Iteration_Scheme_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for exception_renaming_declaration. :
(.
  ${Renamed_Entity.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for explicit_dereference. :
(.
  ${Prefix.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_access_to_function_definition. :
(.
  ${Access_To_Function_Result_Subtype.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_derived_type_definition. :
(.
  ${Progenitor_List.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_function_declaration. :
(.
  ${Result_Subtype.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_function_declaration. :
(.
  ${Formal_Subprogram_Default.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_interface_type_definition. :
(.
  ${Progenitor_List.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_object_declaration. :
(.
  ${Object_Declaration_Subtype.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_procedure_declaration. :
(.
  ${Formal_Subprogram_Default.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_unconstrained_array_definition. :
(.
  ${Index_Subtype_Definitions.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for function_body. :
(.
  ${Result_Subtype.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for function_body. :
(.
  ${end_name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for function_declaration. :
(.
  ${Result_Subtype.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generalized_iterator_specification. :
(.
  ${Iteration_Scheme_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_association. :
(.
  ${Formal_Parameter.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_function_declaration. :
(.
  ${Result_Subtype.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_function_renaming. :
(.
  ${Renamed_Entity.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_package_renaming. :
(.
  ${Renamed_Entity.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_procedure_renaming. :
(.
  ${Renamed_Entity.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for interface_type_definition. :
(.
  ${Progenitor_List.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for object_renaming_declaration. :
(.
  ${Object_Declaration_Subtype.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for object_renaming_declaration. :
(.
  ${Renamed_Entity.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for package_renaming_declaration. :
(.
  ${Renamed_Entity.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for parameter_specification. :
(.
  ${Object_Declaration_Subtype.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for private_extension_definition. :
(.
  ${Progenitor_List.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for procedure_call_statement. :
(.
  ${Function_Call.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for protected_type_declaration. :
(.
  ${Progenitor_List.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for raise_statement. :
(.
  ${Raised_Exception.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for requeue_statement. :
(.
  ${Requeue_Entry_Name.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for single_protected_declaration. :
(.
  ${Progenitor_List.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for single_task_declaration. :
(.
  ${Progenitor_List.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for task_type_declaration. :
(.
  ${Progenitor_List.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for unconstrained_array_definition. :
(.
  ${Index_Subtype_Definitions.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for use_package_clause. :
(.
  ${Clause_Names.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for use_type_clause. :
(.
  ${Type_Clause_Names.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for with_clause. :
(.
  ${With_Clause_Names.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for attribute_reference. :
(.
  ${prefix.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for component_clause. :
(.
  ${Component_Clause_Position.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for discrete_simple_expression_range. :
(.
  ${Lower_Bound.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for discrete_simple_expression_range. :
(.
  ${Upper_Bound.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for function_call. :
(.
  ${prefix.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for membership_test. :
(.
  ${Membership_Test_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for selected_component. :
(.
  ${prefix.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for simple_expression_range. :
(.
  ${Lower_Bound.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for simple_expression_range. :
(.
  ${Upper_Bound.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for simple_expression_range_dr. :
(.
  ${Lower_Bound.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for simple_expression_range_dr. :
(.
  ${Upper_Bound.Parent} := Gela.Elements.Element_Access (Node);
.)

Rules for accept_statement. :
(.
  ${Accept_Entry_Index.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for aspect_specification. :
(.
  ${Aspect_Definition.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for assignment_statement. :
(.
  ${Assignment_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for at_clause. :
(.
  ${Representation_Clause_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for attribute_definition_clause. :
(.
  ${Representation_Clause_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for attribute_reference. :
(.
  ${Attribute_Designator_Expressions.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for case_expression. :
(.
  ${expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for case_expression_path. :
(.
  ${Dependent_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for case_statement. :
(.
  ${Case_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for component_declaration. :
(.
  ${Initialization_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for decimal_fixed_point_definition. :
(.
  ${Delta_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for decimal_fixed_point_definition. :
(.
  ${Digits_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for delay_statement. :
(.
  ${Delay_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for delta_constraint. :
(.
  ${Delta_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for digits_constraint. :
(.
  ${Digits_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for discriminant_specification. :
(.
  ${Initialization_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for else_expression_path. :
(.
  ${Dependent_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for elsif_expression_path. :
(.
  ${Condition_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for elsif_expression_path. :
(.
  ${Dependent_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for elsif_path. :
(.
  ${Condition_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for entry_body. :
(.
  ${Entry_Barrier.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for exit_statement. :
(.
  ${Exit_Condition.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for extension_aggregate. :
(.
  ${Extension_Aggregate_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for floating_point_definition. :
(.
  ${Digits_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_object_declaration. :
(.
  ${Initialization_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for function_declaration. :
(.
  ${Result_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for function_declaration. :
(.
  ${Renamed_Entity.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for generic_association. :
(.
  ${Actual_Parameter.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for if_expression_path. :
(.
  ${Condition_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for if_expression_path. :
(.
  ${Dependent_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for if_path. :
(.
  ${Condition_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for modular_type_definition. :
(.
  ${Mod_Static_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for number_declaration. :
(.
  ${Initialization_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for object_declaration. :
(.
  ${Initialization_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for ordinary_fixed_point_definition. :
(.
  ${Delta_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for parameter_association. :
(.
  ${Actual_Parameter.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for parameter_specification. :
(.
  ${Initialization_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for pragma_argument_association. :
(.
  ${Actual_Parameter.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for procedure_declaration. :
(.
  ${Renamed_Entity.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for qualified_expression. :
(.
  ${Converted_Or_Qualified_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for quantified_expression. :
(.
  ${predicate.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for raise_statement. :
(.
  ${Raise_Statement_Message.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for record_representation_clause. :
(.
  ${Mod_Clause_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for return_object_specification. :
(.
  ${Initialization_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for select_or_path. :
(.
  ${Guard.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for short_circuit. :
(.
  ${Short_Circuit_Operation_Left_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for short_circuit. :
(.
  ${Short_Circuit_Operation_Right_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for simple_return_statement. :
(.
  ${Return_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for while_loop_statement. :
(.
  ${While_Condition.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for membership_test. :
(.
  ${Membership_Test_Choices.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for association. :
(.
  ${Component_Expression.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for association. :
(.
  ${Array_Component_Choices.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for case_expression_path. :
(.
  ${Case_Path_Alternative_Choices.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for case_path. :
(.
  ${Case_Statement_Alternative_Choices.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for variant. :
(.
  ${Variant_Choices.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for function_call. :
(.
  ${Function_Call_Parameters.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for component_definition. :
(.
  ${Component_Subtype_Indication.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for object_declaration. :
(.
  ${Object_Declaration_Subtype.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for return_object_specification. :
(.
  ${Object_Declaration_Subtype.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for discrete_range_attribute_reference.Range_Attribute :
(.
  ${Range_Attribute.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for range_attribute_reference.Range_Attribute :
(.
  ${Range_Attribute.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for range_attribute_reference_dr.Range_Attribute :
(.
  ${Range_Attribute.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for access_to_object_definition. :
(.
  ${subtype_indication.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for decimal_fixed_point_definition. :
(.
  ${Real_Range_Constraint.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for derived_record_definition. :
(.
  ${Parent_Subtype_Indication.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for derived_type_definition. :
(.
  ${Parent_Subtype_Indication.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for element_iterator_specification. :
(.
  ${subtype_indication.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for floating_point_definition. :
(.
  ${Real_Range_Constraint.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for formal_access_to_object_definition. :
(.
  ${subtype_indication.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for ordinary_fixed_point_definition. :
(.
  ${Real_Range_Constraint.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for private_extension_definition. :
(.
  ${Ancestor_Subtype_Indication.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for signed_integer_type_definition. :
(.
  ${Integer_Constraint.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for subtype_declaration. :
(.
  ${Type_Declaration_View.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for delta_constraint. :
(.
  ${Real_Range_Constraint.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for digits_constraint. :
(.
  ${Real_Range_Constraint.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for discrete_subtype_indication. :
(.
  ${Subtype_Constraint.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for discrete_subtype_indication_dr. :
(.
  ${Subtype_Constraint.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for full_type_declaration. :
(.
  ${Type_Declaration_View.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for subtype_indication. :
(.
  ${Subtype_Constraint.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for abort_statement. :
(.
  ${Aborted_Tasks.Parent} := Gela.Elements.Element_Access (Node);
.)
Rules for exception_handler. :
(.
  ${Exception_Choices.Parent} := Gela.Elements.Element_Access (Node);
.)
