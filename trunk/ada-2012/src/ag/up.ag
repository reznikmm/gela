Synthesized attributes
  access_definition,
  allocator,
  anonymous_access_to_object_definition,
  anonymous_access_to_function_definition,
  anonymous_access_to_procedure_definition,
  attribute_reference,
  box,
  case_expression,
  character_literal,
  clause_name,
  composite_constraint,
  constrained_array_definition,
  constraint,
  delta_constraint,
  digits_constraint,
  direct_name,
  discrete_choice,
  discrete_range,
  discrete_subtype_indication_dr,
  exception_choice,
  explicit_dereference,
  expression,
  expression_or_box,
  extension_aggregate,
  auxiliary_apply,
  identifier,
  if_expression,
  membership_choice,
  membership_test,
  name,
  null_literal,
  numeric_literal,
  object_definition,
  operator_symbol,
  others_choice,
  prefix,
  program_unit_name,
  qualified_expression,
  quantified_expression,
  range_attribute_reference,
  range_attribute_reference_dr,
  range_constraint,
  range_dr,
  record_aggregate,
  scalar_constraint,
  selected_component,
  selected_identifier,
  short_circuit,
  simple_expression,
  simple_expression_range,
  simple_expression_range_dr,
  string_literal,
  subtype_indication,
  subtype_indication_or_access_definition,
  subtype_mark,
  subtype_mark_or_access_definition,
  unconstrained_array_definition,
  
  Membership_Test_Choices
   : Gela.Interpretations.Interpretation_Set_Index : Up;

Synthesized attributes
  Array_Component_Choices,
  Variant_Choices,
  association,
  case_path,
  variant
   : Gela.Interpretations.Interpretation_Tuple_Index : Up;

Synthesized attributes
  Associations,
  Case_Statement_Paths,
  Record_Component_Associations,
  Variants,
  association_list
   : Gela.Interpretations.Interpretation_Tuple_List_Index : Up;

Rules for Array_Component_Choices.discrete_choice :
(.
      ${Array_Component_Choices.Up} := 0;
.)

Rules for Array_Component_Choices.discrete_choice :
(.
      ${Array_Component_Choices.Up} := 0;
      Self.Compilation.Context.Interpretation_Manager.Add_Tuple
        (${discrete_choice.Up},
         ${tail.Up},
         ${Array_Component_Choices.Up});
.)

Rules for Associations.association :
(.
      ${Associations.Up} := 0;
.)

Rules for Associations.association :
(.
      ${Associations.Up} := 0;
      Self.Compilation.Context.Interpretation_Manager.Add_Tuple_List
        (${association.Up}, ${tail.Up}, ${Associations.Up});
.)

Rules for Membership_Test_Choices.membership_choice :
(.
      ${Membership_Test_Choices.Up} := 0;
.)

Rules for Membership_Test_Choices.membership_choice :
(.
      ${Membership_Test_Choices.Up} := ${membership_choice.Up};
      --   ${tail.Up}  FIXME
.)

Rules for Record_Component_Associations.association :
(.
      ${Record_Component_Associations.Up} := 0;
.)

Rules for Record_Component_Associations.association :
(.
      ${Record_Component_Associations.Up} := 0;
      Self.Compilation.Context.Interpretation_Manager.Add_Tuple_List
        (${association.Up}, ${tail.Up}, ${Record_Component_Associations.Up});
.)

Rules for Variant_Choices.discrete_choice :
(.
      ${Variant_Choices.Up} := 0;
.)

Rules for Variant_Choices.discrete_choice :
(.
      ${Variant_Choices.Up} := 0;
      Self.Compilation.Context.Interpretation_Manager.Add_Tuple
        (${discrete_choice.Up},
         ${tail.Up},
         ${Variant_Choices.Up});
.)

Rules for Variants.variant :
(.
      ${Variants.Up} := 0;
.)

Rules for Variants.variant :
(.
      ${Variants.Up} := 0;
      Self.Compilation.Context.Interpretation_Manager.Add_Tuple_List
        (${variant.Up},
         ${tail.Up},
         ${Variants.Up});
.)

Rules for Case_Statement_Paths.case_path :
(.
      ${Case_Statement_Paths.Up} := 0;
.)

Rules for Case_Statement_Paths.case_path :
(.
      ${Case_Statement_Paths.Up} := 0;
      Self.Compilation.Context.Interpretation_Manager.Add_Tuple_List
        (${case_path.Up},
         ${tail.Up},
         ${Case_Statement_Paths.Up});
.)

Rules for identifier.identifier_token :
(.
      Gela.Pass_Utils.Resolve.Direct_Name
        (Self.Compilation,
         ${identifier.env_in},
         Self.Compilation.Get_Token (${identifier_token.Index}).Symbol,
         ${identifier.Up});
.)

Rules for selected_identifier. :
(.
      Gela.Pass_Utils.Resolve.Selected_Component
        (Self.Compilation,
         ${selected_identifier.env_in},
         ${Prefix.Up},
         ${Selector.full_name},
         ${selected_identifier.Up});
.)

Rules for selected_component. :
(.
      Gela.Pass_Utils.Resolve.Selected_Component
        (Self.Compilation,
         ${selected_component.env_in},
         ${prefix.Up},
         ${Selector.full_name},
         ${selected_component.Up});
.)

Rules for association. :
(.
      ${association.Up} := 0;
      Self.Compilation.Context.Interpretation_Manager.Add_Tuple
        (${Component_Expression.Up:Gela.Pass_Utils.Resolve.Placeholder (Self.Compilation)},
         ${Array_Component_Choices.Up},
         ${association.Up});
.)

Rules for attribute_reference. :
(.
      Gela.Pass_Utils.Resolve.Attribute_Reference
        (Self.Compilation,
         ${attribute_reference.env_in},
         ${prefix.Up},
         ${Attribute_Designator_Identifier.full_name:0},
         ${attribute_reference.Up});
.)

Rules for composite_constraint. :
(.
      ${composite_constraint.Up} :=
        Gela.Interpretations.Interpretation_Set_Index (${Associations.Up});
.)

Rules for auxiliary_apply. :
(.
      Gela.Pass_Utils.Resolve.Function_Call
        (Self.Compilation,
         ${auxiliary_apply.env_in},
         ${prefix.Up},
         ${Function_Call_Parameters.Up},
         ${auxiliary_apply.Up});
.)

Rules for character_literal.character_literal_token :
(.
      ${character_literal.Up} := 0;  --  FIXME
.)
Rules for explicit_dereference. :
(.
      ${explicit_dereference.Up} := 0;  --  FIXME
.)
Rules for operator_symbol.operator_symbol_token :
(.
      Gela.Pass_Utils.Resolve.Direct_Name
        (Self.Compilation,
         ${operator_symbol.env_in},
         Self.Compilation.Get_Token (${operator_symbol_token.Index}).Symbol,
         ${operator_symbol.Up});
.)
Rules for qualified_expression. :
(.
      ${qualified_expression.Up} := 0;  --  FIXME
.)

Rules for delta_constraint. :
(.
      ${delta_constraint.Up} := ${Real_Range_Constraint.Up:0};
.)

Rules for digits_constraint. :
(.
      ${digits_constraint.Up} := ${Real_Range_Constraint.Up:0};
.)

Rules for range_attribute_reference.Range_Attribute :
(.
      --  depends on ${range_attribute_reference.env_in}
      ${range_attribute_reference.Up} := ${Range_Attribute.Up};
.)

Rules for range_attribute_reference_dr.Range_Attribute :
(.
      --  depends on ${range_attribute_reference_dr.env_in}
      ${range_attribute_reference_dr.Up} := ${Range_Attribute.Up};
.)

Rules for simple_expression_range. :
(.
      Gela.Pass_Utils.Resolve.Simple_Expression_Range
        (Self.Compilation,
         ${simple_expression_range.env_in},
         ${Lower_Bound.Up},
         ${Upper_Bound.Up},
         ${simple_expression_range.Up});
.)

Rules for simple_expression_range_dr. :
(.
      Gela.Pass_Utils.Resolve.Simple_Expression_Range
        (Self.Compilation,
         ${simple_expression_range_dr.env_in},
         ${Lower_Bound.Up},
         ${Upper_Bound.Up},
         ${simple_expression_range_dr.Up});
.)

Rules for allocator. :
(.
      ${allocator.Up} := 0;  --  FIXME
.)

Rules for case_expression. :
(.
      ${case_expression.Up} := 0;  --  FIXME
.)

Rules for case_path. :
(.
      ${case_path.Up} := ${Variant_Choices.Up};
.)

Rules for extension_aggregate. :
(.
      ${extension_aggregate.Up} := 0;  --  FIXME
.)

Rules for if_expression.Expression_Paths :
(.
      ${if_expression.Up} := 0;  --  FIXME
.)

Rules for null_literal.null_literal_token :
(.
      ${null_literal.Up} := 0;  --  FIXME
.)

Rules for numeric_literal.numeric_literal_token :
(.
      --  4.2 (8/2)
      Gela.Pass_Utils.Resolve.Numeric_Literal
        (Self.Compilation,
         ${numeric_literal_token.Index}, ${numeric_literal.Up});
.)

Rules for string_literal.string_literal_token :
(.
      --  LARL syntax has only operator_symbol
      --  TEMPORARY {string_literal.Up} := 0;
      Gela.Pass_Utils.Resolve.String_Literal
        (Self.Compilation,
         ${string_literal_token.Index}, ${string_literal.Up});
.)


Rules for quantified_expression. :
(.
      ${quantified_expression.Up} := 0;  --  FIXME
.)

Rules for association_list. :
(.
      ${association_list.Up} := ${Record_Component_Associations.Up};
.)

Rules for record_aggregate.Associations :
(.
      ${record_aggregate.Up} := 0;
      Self.Compilation.Context.Interpretation_Manager.Add_Expression_Category
        (Match  => Gela.Pass_Utils.Resolve.Record_Matcher,
         Down   => (1 .. 0 => 0),
         Result => ${record_aggregate.Up});
      Self.Compilation.Context.Interpretation_Manager.Add_Expression_Category
        (Match  => Gela.Pass_Utils.Resolve.Array_Matcher,
         Down   => (1 .. 0 => 0),
         Result => ${record_aggregate.Up});
.)

Rules for membership_test. :
(.
      Gela.Pass_Utils.Resolve.Membership_Test
        (Self.Compilation,
         ${membership_test.env_in},
         ${Membership_Test_Expression.Up},
         ${Membership_Test_Choices.Up},
         ${membership_test.Up});
.)

Rules for short_circuit. :
(.
      ${short_circuit.Up} := 0;  --  FIXME
.)

Rules for object_definition. :
(.
      ${object_definition.Up} := 0;  --  FIXME
.)

Rules for subtype_indication. :
(.
      ${subtype_indication.Up} := ${subtype_mark.Up};
.)

Rules for discrete_subtype_indication_dr. :
(.
      ${discrete_subtype_indication_dr.Up} := ${Subtype_Mark.Up};
.)

Rules for anonymous_access_to_object_definition. :
(.
      ${anonymous_access_to_object_definition.Up} := 0;  --  FIXME
.)

Rules for anonymous_access_to_function_definition. :
(.
      ${anonymous_access_to_function_definition.Up} := 0;  --  FIXME
.)

Rules for anonymous_access_to_procedure_definition. :
(.
      ${anonymous_access_to_procedure_definition.Up} := 0;  --  FIXME
.)


Rules for unconstrained_array_definition. :
(.
      ${unconstrained_array_definition.Up} := 0;  --  FIXME
.)

Rules for constrained_array_definition. :
(.
      ${constrained_array_definition.Up} := 0;  --  FIXME
.)

Rules for box.box_token :
(.
      ${box.Up} := 0;  --  FIXME
.)

Rules for others_choice.others_token :
(.
      ${others_choice.Up} := Gela.Pass_Utils.Resolve.Placeholder (Self.Compilation);
.)

Rules for variant. :
(.
      ${variant.Up} := ${Variant_Choices.Up};
.)
