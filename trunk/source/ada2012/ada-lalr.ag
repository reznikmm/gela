Token less_token;
Token equal_token;
Token greater_token;
Token hyphen_token             Priority 16 left;
Token slash_token              Priority 18 left;
Token star_token               Priority 18 left;
Token ampersand_token          Priority 16 left;
Token plus_token               Priority 16 left;
Token less_or_equal_token;
Token greater_or_equal_token;
Token inequality_token;
Token double_star_token        Priority 20 none;
Token and_token;
Token or_token;
Token xor_token;
Token mod_token                Priority 18 left;
Token rem_token                Priority 18 left;
Token abs_token                Priority 20 none;
Token not_token                Priority 20 none;
Token right_label_token;
Token box_token;
Token left_label_token;
Token assignment_token;
Token arrow_token;
Token double_dot_token;
Token apostrophe_token;
Token left_parenthesis_token;
Token right_parenthesis_token;
Token comma_token;
Token dot_token;
Token colon_token;
Token semicolon_token;
Token vertical_line_token      Priority 12 left;

Token abort_token;
Token abstract_token;
Token accept_token;
Token access_token;
Token aliased_token;
Token all_token;
Token array_token;
Token at_token;
Token begin_token;
Token body_token;
Token case_token;
Token constant_token;
Token declare_token;
Token delay_token;
Token delta_token;
Token digits_token;
Token do_token;
Token else_token;
Token elsif_token;
Token end_token;
Token entry_token;
Token exception_token;
Token exit_token;
Token ffor_token;
Token function_token;
Token generic_token;
Token goto_token;
Token if_token;
Token in_token;
Token interface_token;
Token is_token;
Token limited_token;
Token loop_token;
Token new_token;
Token null_token;
Token of_token;
Token others_token;
Token out_token;
Token overriding_token;
Token package_token;
Token pragma_token;
Token private_token;
Token procedure_token;
Token protected_token;
Token raise_token;
Token range_token;
Token record_token;
Token renames_token;
Token requeue_token;
Token return_token;
Token reverse_token;
Token select_token;
Token separate_token;
Token some_token;
Token subtype_token;
Token synchronized_token;
Token tagged_token;
Token task_token;
Token terminate_token;
Token then_token;
Token type_token;
Token until_token;
Token use_token;
Token when_token;
Token while_token;
Token with_token;

Token comment_token;
Token identifier_token;
Token numeric_literal_token;
Token character_literal_token;
Token string_literal_token;

_compilation ::= expression;

expression ::= relation |
  (and)      expression and_token relation |
  (and_then) expression and_token then_token relation |
  (or)       expression or_token  relation |
  (or_else)  expression or_token  else_token relation |
  (xor)      expression xor_token relation
;

Rules for expression.and :
(.         ${expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${and_token.ast}, -${expression.ast}, -${relation.ast});
.)

Rules for expression.or :
(.         ${expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${or_token.ast}, -${expression.ast}, -${relation.ast});
.)

Rules for expression.xor :
(.         ${expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${xor_token.ast}, -${expression.ast}, -${relation.ast});
.)

Rules for expression.and_then :
(.         ${expression.ast} := +Self.Compilation.Store.Fabric.Short_Circuit
           (-${expression.ast}, -${and_token.ast}, -${then_token.ast}, -${relation.ast});
.)

Rules for expression.or_else :
(.         ${expression.ast} := +Self.Compilation.Store.Fabric.Short_Circuit
           (-${expression.ast}, -${or_token.ast}, -${else_token.ast}, -${relation.ast});
.)



relation ::= 
(relation)
  simple_expression <left> [relational_operator simple_expression <right>] |
(membership)
  simple_expression [not_token] in_token membership_choice_list;

Rules for relation.relation :
(.         ${relation.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${relational_operator.ast}, -${left.ast}, -${right.ast});
.)

Rules for relation.membership :
(.         ${relation.ast} := +Self.Compilation.Store.Fabric.Membership_Test
           (-${simple_expression.ast},
            -${not_token.ast:(null, 0)},
            -${in_token.ast},
            -${membership_choice_list.ast});
.)



membership_choice_list ::=
  membership_choice {vertical_line_token membership_choice} <mchoice_list>;

Priority membership_choice_list. 10 left;

Rules for membership_choice_list. :
(.
         declare
            Conv : constant Gela.Nodes.Element :=
              ${mchoice_list.ast:+Self.Compilation.Store.Fabric.Membership_Choice_Sequence};
            List : constant Gela.Nodes.Membership_Choice_Sequence := -Conv;
         begin
            List.Object.Prepend (List.Payload, ${membership_choice.ast});
            ${membership_choice_list.ast} := Conv;
         end;
.)

Rules for mchoice_list. :
(.
         declare
            Conv : constant Gela.Nodes.Element :=
              ${head.ast:+Self.Compilation.Store.Fabric.Membership_Choice_Sequence};
            List : constant Gela.Nodes.Membership_Choice_Sequence := -Conv;
         begin
            List.Object.Append (List.Payload, ${membership_choice.ast});
            ${mchoice_list.ast} := Conv;
         end;
.)



membership_choice ::= simple_expression | range;

relational_operator ::=
  equal_token |
  inequality_token |
  less_token |
  less_or_equal_token |
  greater_token |
  greater_or_equal_token;



simple_expression ::=
  numeric_literal_token |
  null_token |
  aggregate |
  name |
  allocator |
(conditional)
  left_parenthesis_token conditional_expression right_parenthesis_token |
(quantified)
  left_parenthesis_token quantified_expression right_parenthesis_token |
(abs) abs_token simple_expression <left> |
(not) not_token simple_expression <left> |
(power) simple_expression <left> double_star_token simple_expression <right> |
(star)  simple_expression <left> star_token  simple_expression <right> |
(slash) simple_expression <left> slash_token simple_expression <right> |
(mod)   simple_expression <left> mod_token   simple_expression <right> |
(rem)   simple_expression <left> rem_token   simple_expression <right> |
(neg)   hyphen_token simple_expression <left> |
(nop)   plus_token simple_expression <left> |
(plus)  simple_expression <left> plus_token simple_expression <right> |
(minus) simple_expression <left> hyphen_token simple_expression <right> |
(amp)   simple_expression <left> ampersand_token simple_expression <right>
;

Priority simple_expression.abs   20 none;
Priority simple_expression.not   20 none;
Priority simple_expression.power 20 none;
Priority simple_expression.star  18 left;
Priority simple_expression.slash 18 left;
Priority simple_expression.mod   18 left;
Priority simple_expression.rem   18 left;
Priority simple_expression.neg   16 left;
Priority simple_expression.nop   16 left;
Priority simple_expression.plus  16 left;
Priority simple_expression.minus 16 left;
Priority simple_expression.amp   16 left;

Rules for simple_expression.plus :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${plus_token.ast}, -${left.ast}, -${right.ast});
.)

Rules for simple_expression.minus :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${hyphen_token.ast}, -${left.ast}, -${right.ast});
.)

Rules for simple_expression.amp :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${ampersand_token.ast}, -${left.ast}, -${right.ast});
.)

Rules for simple_expression.neg :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${hyphen_token.ast}, -${left.ast});
.)

Rules for simple_expression.nop :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${plus_token.ast}, -${left.ast});
.)

Rules for simple_expression.star :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${star_token.ast}, -${left.ast}, -${right.ast});
.)

Rules for simple_expression.slash :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${slash_token.ast}, -${left.ast}, -${right.ast});
.)

Rules for simple_expression.mod :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${mod_token.ast}, -${left.ast}, -${right.ast});
.)

Rules for simple_expression.rem :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${rem_token.ast}, -${left.ast}, -${right.ast});
.)

Rules for simple_expression.power :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${double_star_token.ast}, -${left.ast}, -${right.ast});
.)

Rules for simple_expression.abs :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${abs_token.ast}, -${left.ast});
.)

Rules for simple_expression.not :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Infix_Call
           (-${not_token.ast}, -${left.ast});
.)

Rules for simple_expression.numeric_literal_token :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Numeric_Literal
           (-${numeric_literal_token.ast});
.)

Rules for simple_expression.null_token :
(.         ${simple_expression.ast} := +Self.Compilation.Store.Fabric.Null_Literal
           (-${null_token.ast});
.)

Rules for simple_expression.conditional :
(.         ${simple_expression.ast} := ${conditional_expression.ast};
.)

Rules for simple_expression.quantified :
(.         ${simple_expression.ast} := ${quantified_expression.ast};
.)



aggregate ::=
  record_aggregate | extension_aggregate
;

record_aggregate ::=
  left_parenthesis_token
  record_component_association_list
  right_parenthesis_token;

Rules for record_aggregate. :
(.
         ${record_aggregate.ast} :=
           +Self.Compilation.Store.Fabric.Record_Aggregate
             (-${left_parenthesis_token.ast},
              -${record_component_association_list.ast},
              -${right_parenthesis_token.ast});
.)



record_component_association_list ::=
(association)
  record_component_association
  {comma_token record_component_association} <component_association_list>  |
(null)
  null_token record_token
;

Rules for record_component_association_list.association :
(.
         declare
            Conv : constant Gela.Nodes.Element :=
                ${component_association_list.ast:+Self.Compilation.Store.Fabric.Association_Sequence};
            List : constant Gela.Nodes.Association_Sequence := -Conv;
         begin
            List.Object.Prepend
              (List.Payload, ${record_component_association.ast});
            ${record_component_association_list.ast} := Conv;
         end;
.)

Rules for component_association_list. :
(.
         declare
            Conv : constant Gela.Nodes.Element :=
                ${head.ast:+Self.Compilation.Store.Fabric.Association_Sequence};
            List : constant Gela.Nodes.Association_Sequence := -Conv;
         begin
            List.Object.Append (List.Payload, ${record_component_association.ast});
            ${component_association_list.ast} := Conv;
         end;
.)

Rules for record_component_association_list.null :
(.
         declare
            List : constant Gela.Nodes.Association_Sequence :=
              Self.Compilation.Store.Fabric.Association_Sequence;
         begin
            ${record_component_association_list.ast} := +List;
         end;
.)



record_component_association ::=
(expression)
  [discrete_choice_list arrow_token] expression |
(box)
  discrete_choice_list arrow_token box_token
;

Rules for record_component_association.expression :
(.          ${record_component_association.ast} := +Self.Compilation.Store.Fabric.Association
           (-${discrete_choice_list.ast:(null, 0)}, -${arrow_token.ast:(null, 0)}, -${expression.ast});
.)

Rules for record_component_association.box :
(.
         declare
            Box : constant Gela.Nodes.Element :=
              +Self.Compilation.Store.Fabric.Box (-${box_token.ast});
         begin
           ${record_component_association.ast} := +Self.Compilation.Store.Fabric.Association
             (-${discrete_choice_list.ast}, -${arrow_token.ast}, -Box);
         end;
.)



discrete_choice_list ::=
   discrete_choice {vertical_line_token discrete_choice} <choice_list>
;

Rules for discrete_choice_list. :
(.
         declare
            Conv : constant Gela.Nodes.Element :=
              ${choice_list.ast:+Self.Compilation.Store.Fabric.Discrete_Choice_Sequence};
            List : constant Gela.Nodes.Discrete_Choice_Sequence := -Conv;
         begin
            List.Object.Prepend (List.Payload, ${discrete_choice.ast});
            ${discrete_choice_list.ast} := Conv;
         end;
.)

Rules for choice_list. :
(.
         declare
            Conv : constant Gela.Nodes.Element :=
              ${head.ast:+Self.Compilation.Store.Fabric.Discrete_Choice_Sequence};
            List : constant Gela.Nodes.Discrete_Choice_Sequence := -Conv;
         begin
            List.Object.Append (List.Payload, ${discrete_choice.ast});
            ${choice_list.ast} := Conv;
         end;
.)



discrete_choice ::=
  expression |
  discrete_range |
  others_token
;

Rules for discrete_choice.others_token :
(.         ${discrete_choice.ast} := +Self.Compilation.Store.Fabric.Others_Choice
         (-${others_token.ast});
.)



discrete_range ::=
  (subtype_indication) simple_expression range_constraint |
  range_attribute_reference |
  (range)  simple_expression <left> double_dot_token simple_expression <right>
;

Rules for discrete_range.subtype_indication :
(.         ${discrete_range.ast} :=
           +Self.Compilation.Store.Fabric.Discrete_Subtype_Indication_Dr
             (-${simple_expression.ast}, -${range_constraint.ast});
.)

Rules for discrete_range.range :
(.         ${discrete_range.ast} :=
           +Self.Compilation.Store.Fabric.Simple_Expression_Range_Dr
             (-${left.ast}, -${double_dot_token.ast}, -${right.ast});
.)

Rules for discrete_range.range_attribute_reference :
(.         ${discrete_range.ast} :=
           +Self.Compilation.Store.Fabric.Range_Attribute_Reference_Dr
             (-${range_attribute_reference.ast});
.)



discrete_subtype_definition ::=
  (subtype_indication) simple_expression [range_constraint] |
  range_attribute_reference |
  (range)  simple_expression <left> double_dot_token simple_expression <right>
;

Rules for discrete_subtype_definition.subtype_indication :
(.         ${discrete_subtype_definition.ast} :=
           +Self.Compilation.Store.Fabric.Discrete_Subtype_Indication
             (-${simple_expression.ast}, -${range_constraint.ast:(null, 0)});
.)


Rules for discrete_subtype_definition.range_attribute_reference :
(.         ${discrete_subtype_definition.ast} :=
           +Self.Compilation.Store.Fabric.Discrete_Range_Attribute_Reference
             (-${range_attribute_reference.ast});
.)

Rules for discrete_subtype_definition.range :
(.         ${discrete_subtype_definition.ast} :=
           +Self.Compilation.Store.Fabric.Discrete_Simple_Expression_Range
             (-${left.ast}, -${double_dot_token.ast}, -${right.ast});
.)



range ::=
  range_attribute_reference |
  (range) simple_expression <left> double_dot_token simple_expression <right>
;

Rules for range.range :
(.         ${range.ast} :=
           +Self.Compilation.Store.Fabric.Simple_Expression_Range
             (-${left.ast}, -${double_dot_token.ast}, -${right.ast});
.)

Rules for range.range_attribute_reference :
(.         ${range.ast} :=
           +Self.Compilation.Store.Fabric.Range_Attribute_Reference
             (-${range_attribute_reference.ast});
.)



range_constraint ::= range_token range;

Rules for range_constraint. :
(.         ${range_constraint.ast} := ${range.ast};
.)


extension_aggregate ::= 
  left_parenthesis_token
  name with_token
  record_component_association_list
  right_parenthesis_token
;

Rules for extension_aggregate. :
(.
         ${extension_aggregate.ast} :=
           +Self.Compilation.Store.Fabric.Extension_Aggregate
             (-${left_parenthesis_token.ast},
              -${name.ast},
              -${with_token.ast},
              -${record_component_association_list.ast},
              -${right_parenthesis_token.ast});
.)



name ::=
  direct_name |
  explicit_dereference |
  selected_component |
  attribute_reference |
  function_call |
  character_literal_token |
  qualified_expression;

Rules for name.character_literal_token :
(.         ${name.ast} := +Self.Compilation.Store.Fabric.Character_Literal
         (-${character_literal_token.ast});
.)




direct_name ::= identifier | operator_symbol;

identifier ::= identifier_token;

Rules for identifier.identifier_token :
(.         ${identifier.ast} := +Self.Compilation.Store.Fabric.Identifier
           (-${identifier_token.ast});
.)



explicit_dereference ::= prefix dot_token all_token;

Rules for explicit_dereference. :
(.         ${explicit_dereference.ast} := +Self.Compilation.Store.Fabric.Explicit_Dereference
         (-${prefix.ast}, -${dot_token.ast}, -${all_token.ast});
.)


selected_component ::= prefix dot_token selector_name;

Rules for selected_component. :
(.         ${selected_component.ast} := +Self.Compilation.Store.Fabric.Selected_Component
         (-${prefix.ast}, -${dot_token.ast}, -${selector_name.ast});
.)



prefix ::= name;

selector_name ::=
  identifier |
  character_literal_token |
  operator_symbol;

Rules for selector_name.character_literal_token :
(.         ${selector_name.ast} := +Self.Compilation.Store.Fabric.Character_Literal
         (-${character_literal_token.ast});
.)



attribute_reference ::=
  prefix apostrophe_token identifier;

Rules for attribute_reference. :
(.         ${attribute_reference.ast} := +Self.Compilation.Store.Fabric.Attribute_Reference
         (-${prefix.ast}, -${apostrophe_token.ast}, -${identifier.ast},
          (null, 0),
          (null, 0));
.)



function_call ::= prefix record_aggregate;

Rules for function_call. :
(.         ${function_call.ast} := +Self.Compilation.Store.Fabric.Function_Call
         (-${prefix.ast}, -${record_aggregate.ast});
.)



qualified_expression ::= prefix apostrophe_token aggregate;

Rules for qualified_expression. :
(.         ${qualified_expression.ast} := +Self.Compilation.Store.Fabric.Qualified_Expression
         (-${prefix.ast}, -${apostrophe_token.ast}, -${aggregate.ast});
.)



allocator ::= new_token [subpool_specification] name;

Rules for allocator. :
(.         ${allocator.ast} := +Self.Compilation.Store.Fabric.Allocator
         (-${new_token.ast}, -${subpool_specification.ast:(null, 0)}, -${name.ast});
.)



subpool_specification ::=
  left_parenthesis_token name right_parenthesis_token;

Rules for subpool_specification. :
(.         ${subpool_specification.ast} := ${name.ast};
.)



conditional_expression ::= if_expression | case_expression;

if_expression ::=
  if_token expression <condition> then_token expression <then>
  {elsif_token expression <condition> then_token expression} <elsif_exp_list>
  [(else) else_token expression <else>];

Rules for if_expression. :
(.
         declare
            Path : constant Gela.Nodes.If_Expression_Path :=
              Self.Compilation.Store.Fabric.If_Expression_Path
                (-${if_token.ast},
                 -${condition.ast},
                 -${then_token.ast},
                 -${then.ast});
            Conv : constant Gela.Nodes.Element :=
              ${elsif_exp_list.ast:+Self.Compilation.Store.Fabric.If_Else_Expression_Path_Sequence};
            List : constant Gela.Nodes.If_Else_Expression_Path_Sequence :=
              -Conv;
         begin
            List.Object.Prepend (List.Payload, +Path);
            ${if_expression.ast} := +Self.Compilation.Store.Fabric.If_Expression (List);
         end;
.)

Rules for if_expression. :
(.
         declare
            Path : constant Gela.Nodes.If_Expression_Path :=
              Self.Compilation.Store.Fabric.If_Expression_Path
                (-${if_token.ast},
                 -${condition.ast},
                 -${then_token.ast},
                 -${then.ast});
            Tail : constant Gela.Nodes.Else_Expression_Path :=
              Self.Compilation.Store.Fabric.Else_Expression_Path
                (-${else_token.ast},
                 -${else.ast});
            Conv : constant Gela.Nodes.Element :=
              ${elsif_exp_list.ast:+Self.Compilation.Store.Fabric.If_Else_Expression_Path_Sequence};
            List : constant Gela.Nodes.If_Else_Expression_Path_Sequence :=
              -Conv;
         begin
            List.Object.Prepend (List.Payload, +Path);
            List.Object.Append (List.Payload, +Tail);
            ${if_expression.ast} := +Self.Compilation.Store.Fabric.If_Expression (List);
         end;
.)

Rules for elsif_exp_list. :
(.
         declare
            Path : constant Gela.Nodes.Elsif_Expression_Path :=
              Self.Compilation.Store.Fabric.Elsif_Expression_Path
                (-${elsif_token.ast},
                 -${condition.ast},
                 -${then_token.ast},
                 -${expression.ast});
            Conv : constant Gela.Nodes.Element :=
              ${head.ast:+Self.Compilation.Store.Fabric.If_Else_Expression_Path_Sequence};
            List : constant Gela.Nodes.If_Else_Expression_Path_Sequence :=
              -Conv;
         begin
            List.Object.Append (List.Payload, +Path);
            ${elsif_exp_list.ast} := Conv;
         end;
.)



case_expression ::=
  case_token expression is_token
  case_expression_alternative
  {comma_token case_expression_alternative} <case_exp_alternative_list>;

Rules for case_expression. :
(.
         declare
            Conv : constant Gela.Nodes.Element :=
              ${case_exp_alternative_list.ast:+Self.Compilation.Store.Fabric.Case_Expression_Path_Sequence};
            List : constant Gela.Nodes.Case_Expression_Path_Sequence :=
              -Conv;
         begin
            List.Object.Prepend (List.Payload, ${case_expression_alternative.ast});
            ${case_expression.ast} := +Self.Compilation.Store.Fabric.Case_Expression
              (-${case_token.ast},
               -${expression.ast},
               -${is_token.ast},
               List);
         end;
.)

Rules for case_exp_alternative_list. :
(.
         declare
            Conv : constant Gela.Nodes.Element :=
              ${head.ast:+Self.Compilation.Store.Fabric.Case_Expression_Path_Sequence};
            List : constant Gela.Nodes.Case_Expression_Path_Sequence :=
              -Conv;
         begin
            List.Object.Append (List.Payload, ${case_expression_alternative.ast});
            ${case_exp_alternative_list.ast} := Conv;
         end;
.)

case_expression_alternative ::= 
  when_token discrete_choice_list arrow_token expression;

Rules for case_expression_alternative. :
(.         ${case_expression_alternative.ast} := +Self.Compilation.Store.Fabric.Case_Expression_Path
         (-${when_token.ast},
          -${discrete_choice_list.ast},
          -${arrow_token.ast},
          -${expression.ast});
.)

quantified_expression ::=
(loop)
  ffor_token quantifier loop_parameter_specification arrow_token expression |
(iterator)
  ffor_token quantifier iterator_specification arrow_token expression;

Rules for quantified_expression.loop :
(.
         ${quantified_expression.ast} := +Self.Compilation.Store.Fabric.Quantified_Expression
             (-${ffor_token.ast},
              -${quantifier.ast},
              -${loop_parameter_specification.ast},
              -${arrow_token.ast},
              -${expression.ast});
.)

Rules for quantified_expression.iterator :
(.
         ${quantified_expression.ast} := +Self.Compilation.Store.Fabric.Quantified_Expression
             (-${ffor_token.ast},
              -${quantifier.ast},
              -${iterator_specification.ast},
              -${arrow_token.ast},
              -${expression.ast});
.)



loop_parameter_specification ::=
  defining_identifier in_token [reverse_token] discrete_subtype_definition;

Rules for loop_parameter_specification. :
(.         ${loop_parameter_specification.ast} :=
           +Self.Compilation.Store.Fabric.Loop_Parameter_Specification
             (-${defining_identifier.ast},
              -${in_token.ast},
              -${reverse_token.ast:(null, 0)},
              -${discrete_subtype_definition.ast});
.)



range_attribute_reference ::=
  prefix apostrophe_token range_token
  [(exp) left_parenthesis_token expression right_parenthesis_token];

Rules for range_attribute_reference. :
(.         ${range_attribute_reference.ast} := +Self.Compilation.Store.Fabric.Attribute_Reference
         (-${prefix.ast},
          -${apostrophe_token.ast},
          (null, 0),
          -${range_token.ast},
          -${expression.ast:(null, 0)});
.)


quantifier ::= all_token | some_token;

iterator_specification ::=
  defining_identifier
  [(subtype) colon_token subtype_indication] of_token [reverse_token] name
;

Rules for iterator_specification. :
(.
         ${iterator_specification.ast} := +Self.Compilation.Store.Fabric.
           Element_Iterator_Specification
             (-${defining_identifier.ast},
              -${colon_token.ast:(null, 0)},
              -${subtype_indication.ast:(null, 0)},
              -${of_token.ast},
              -${reverse_token.ast:(null, 0)},
              -${name.ast});
.)

subtype_indication ::= [null_exclusion] subtype_mark [scalar_constraint];

Rules for subtype_indication. :
(.
         ${subtype_indication.ast} := +Self.Compilation.Store.Fabric.Subtype_Indication
             (-${null_exclusion.ast:(null, 0)},
              -${subtype_mark.ast},
              -${scalar_constraint.ast:(null, 0)});
.)


subtype_mark ::= name;

null_exclusion ::= not_token null_token;

scalar_constraint ::= range_constraint | digits_constraint | delta_constraint;

digits_constraint ::= digits_token simple_expression [range_constraint];

Rules for digits_constraint. :
(.         ${digits_constraint.ast} := +Self.Compilation.Store.Fabric.Digits_Constraint
         (-${digits_token.ast}, -${simple_expression.ast}, -${range_constraint.ast:(null, 0)});
.)


delta_constraint ::= delta_token simple_expression [range_constraint];

Rules for delta_constraint. :
(.         ${delta_constraint.ast} := +Self.Compilation.Store.Fabric.Delta_Constraint
         (-${delta_token.ast}, -${simple_expression.ast}, -${range_constraint.ast:(null, 0)});
.)


defining_identifier ::= identifier_token;

Rules for defining_identifier.identifier_token :
(.         ${defining_identifier.ast} := +Self.Compilation.Store.Fabric.Defining_Identifier
         (-${identifier_token.ast});
.)



operator_symbol ::= string_literal_token;

Rules for operator_symbol.string_literal_token :
(.         ${operator_symbol.ast} := +Self.Compilation.Store.Fabric.Operator_Symbol
         (-${string_literal_token.ast});
.)



Synthesized attributes
  _compilation,
  aggregate,
  allocator,
  attribute_reference,
  case_expression,
  case_expression_alternative,
  case_exp_alternative_list,
  component_association_list,
  conditional_expression,
  choice_list,
  defining_identifier,
  delta_constraint,
  digits_constraint,
  direct_name,
  discrete_choice,
  discrete_choice_list,
  discrete_range,
  discrete_subtype_definition,
  identifier,
  if_expression,
  elsif_exp_list,
  explicit_dereference,
  expression,
  extension_aggregate,
  function_call,
  iterator_specification,
  loop_parameter_specification,
  mchoice_list,
  membership_choice,
  membership_choice_list,
  name,
  null_exclusion,
  operator_symbol,
  prefix,
  qualified_expression,
  quantified_expression,
  quantifier,
  range,
  range_attribute_reference,
  range_constraint,
  record_aggregate,
  record_component_association,
  record_component_association_list,
  relation,
  relational_operator,
  scalar_constraint,
  selected_component,
  selector_name,
  simple_expression,
  subtype_indication,
  subtype_mark,
  subpool_specification
 : Integer : ast;

Synthesized attributes
  abort_token,
  abs_token,
  abstract_token,
  accept_token,
  access_token,
  aliased_token,
  all_token,
  ampersand_token,
  and_token,
  apostrophe_token,
  array_token,
  arrow_token,
  assignment_token,
  at_token,
  begin_token,
  body_token,
  box_token,
  case_token,
  character_literal_token,
  colon_token,
  comma_token,
  comment_token,
  constant_token,
  declare_token,
  delay_token,
  delta_token,
  digits_token,
  do_token,
  dot_token,
  double_dot_token,
  double_star_token,
  else_token,
  elsif_token,
  end_token,
  entry_token,
  equal_token,
  exception_token,
  exit_token,
  ffor_token,
  function_token,
  generic_token,
  goto_token,
  greater_or_equal_token,
  greater_token,
  hyphen_token,
  identifier_token,
  if_token,
  in_token,
  inequality_token,
  interface_token,
  is_token,
  left_label_token,
  left_parenthesis_token,
  less_or_equal_token,
  less_token,
  limited_token,
  loop_token,
  mod_token,
  new_token,
  not_token,
  null_token,
  numeric_literal_token,
  of_token,
  or_token,
  others_token,
  out_token,
  overriding_token,
  package_token,
  plus_token,
  pragma_token,
  private_token,
  procedure_token,
  protected_token,
  raise_token,
  range_token,
  record_token,
  rem_token,
  renames_token,
  requeue_token,
  return_token,
  reverse_token,
  right_label_token,
  right_parenthesis_token,
  select_token,
  semicolon_token,
  separate_token,
  slash_token,
  some_token,
  star_token,
  string_literal_token,
  subtype_token,
  synchronized_token,
  tagged_token,
  task_token,
  terminate_token,
  then_token,
  type_token,
  until_token,
  use_token,
  vertical_line_token,
  when_token,
  while_token,
  with_token,
  xor_token
 : Integer : ast;

