Token token;

Compilation ::=
  {compilation_unit} <units>
  {context_item}     <Compilation_Pragmas>
;

abort_statement ::=
  token  <abort_token>
  {name} <Aborted_Tasks>
  token  <semicolon_token>;

accept_statement ::=
  token                     <accept_token>
  identifier                <Accept_Entry_Direct_Name>
  token                     <left_parenthesis_token>
  expression                <Accept_Entry_Index>
  token                     <right_parenthesis_token>
  token                     <lp_token>
  {parameter_specification} <Accept_Parameters>
  token                     <rp_token>
  token                     <do_token>
  {statement}               <Accept_Body_Statements>
  token                     <exception_token>
  {exception_handler}       <Accept_Body_Exception_Handlers>
  token                     <end_token>
  token                     <identifier_token>
  token                     <semicolon_token>;

access_definition ::=
  anonymous_access_to_object_definition |
  anonymous_access_to_function_definition |
  anonymous_access_to_procedure_definition;

access_to_function_definition ::=
  token <not_token>
  token <null_token>
  token <access_token>
  token <protected_token>
  token <function_token>
  token                      <lp_token>
  {parameter_specification}  <Access_To_Subprogram_Parameter_Profile>
  token                      <rp_token>
  token <return_token>
  token <return_not_token>
  token <return_null_token>
  subtype_mark_or_access_definition <Access_To_Function_Result_Subtype>;

access_to_object_definition ::=
  token <not_token>
  token <null_token>
  token <access_token>
  token <constant_token>
  subtype_indication <subtype_indication>
;

access_to_procedure_definition ::=
  token <not_token>
  token <null_token>
  token <access_token>
  token <protected_token>
  token <procedure_token>
  token                      <lp_token>
  {parameter_specification}  <Access_To_Subprogram_Parameter_Profile>
  token                      <rp_token>
;

allocator ::=
  token <new_token>
  token <left_parenthesis_token>
  name  <Subpool_Name>
  token <right_parenthesis_token>
  name  <Subtype_Or_Expression>
;

alt_record_definition ::= record_definition | null_record_definition;

anonymous_access_to_function_definition ::=
  token <not_token>
  token <null_token>
  token <access_token>
  token <protected_token>
  token <function_token>
  token                      <lp_token>
  {parameter_specification}  <Access_To_Subprogram_Parameter_Profile>
  token                      <rp_token>
  token <return_token>
  token <return_not_token>
  token <return_null_token>
  subtype_mark_or_access_definition <Access_To_Function_Result_Subtype>;

anonymous_access_to_object_definition ::=
  token <not_token>
  token <null_token>
  token <access_token>
  token <constant_token>
  subtype_mark <Anonymous_Access_To_Object_Subtype_Mark>;

anonymous_access_to_procedure_definition ::=
  token <not_token>
  token <null_token>
  token <access_token>
  token <protected_token>
  token <procedure_token>
  token                      <lp_token>
  {parameter_specification}  <Access_To_Subprogram_Parameter_Profile>
  token                      <rp_token>
;

aspect_clause ::=
  attribute_definition_clause |
  record_representation_clause |
  at_clause |
  pragma_node;

aspect_specification ::=
   subtype_mark <Aspect_Mark>
   token <arrow_token>
   expression   <Aspect_Definition>
;

assignment_statement ::=
  name        <Assignment_Variable_Name>
  token       <assignment_token>
  expression  <Assignment_Expression>
  token       <semicolon_token>
;

association ::=
  {discrete_choice} <Array_Component_Choices>
  token             <arrow_token>
  expression_or_box <Component_Expression>;

asynchronous_select ::=
  token                    <select_token>
  {select_then_abort_path} <Asynchronous_Statement_Paths>
  token                    <end_token>
  token                    <end_select>
  token                    <semicolon_token>
;

at_clause ::=
  token      <for_token>
  identifier <Representation_Clause_Name>
  token      <use_token>
  token      <at_token>
  expression <Representation_Clause_Expression>
  token      <semicolon_token>
;

attribute_definition_clause ::=
  token <for_token>
  clause_name <Representation_Clause_Name>
  token <use_token>
  expression <Representation_Clause_Expression>
  token <semicolon_token>
;

clause_name ::= attribute_reference | identifier;

attribute_reference ::=
  prefix
  token <apostrophe_token>
  identifier <Attribute_Designator_Identifier>
  token <designator_token>
  expression <Attribute_Designator_Expressions>
;

basic_declarative_item ::=
  basic_declaration |
  aspect_clause |
  use_clause;

basic_declaration ::=
  full_type_declaration |
  incomplete_type_declaration |
  private_type_declaration |
  private_extension_declaration |
  task_type_declaration |
  protected_type_declaration |
  subtype_declaration |
  object_declaration |
  single_task_declaration |
  single_protected_declaration |
  number_declaration |
  procedure_declaration |
  function_declaration |
  package_declaration |
  object_renaming_declaration |
  exception_renaming_declaration |
  package_renaming_declaration |
  generic_package_renaming |
  generic_procedure_renaming |
  generic_function_renaming |
  exception_declaration |
  generic_package_declaration |
  generic_function_declaration |
  generic_procedure_declaration |
  package_instantiation |
  procedure_instantiation |
  function_instantiation
;

block_statement ::= 
  token               <Statement_Identifier>
  token               <colon_token>
  token               <declare_token>
  {declarative_item}  <Block_Declarative_Items>
  token               <begin_token>
  {statement}         <Block_Statements>
  token               <exception_token>
  {exception_handler} <Block_Exception_Handlers>
  token               <end_token>
  token               <identifier_token>
  token               <semicolon_token>;

body_declaration ::= proper_body | body_stub;

body_stub ::=
  package_body_stub |
  task_body_stub |
  protected_body_stub;

box ::= token <box_token>;

case_expression ::=
  token <case_token>
  expression <expression>
  token <is_token>
  {case_expression_path} <Case_Expression_Paths>;

case_expression_path ::=
    token <when_token>
    {discrete_choice} <Case_Path_Alternative_Choices>
    token <arrow_token>
    expression <Dependent_Expression>
;

case_path ::=
    token             <when_token>
    {discrete_choice} <Case_Statement_Alternative_Choices>
    token             <arrow_token>
    {statement}       <Sequence_Of_Statements>
;

case_statement ::= 
  token       <case_token>
  expression  <Case_Expression>
  token       <is_token>
  {case_path} <Case_Statement_Paths>
  token       <end_token>
  token       <endcase>
  token       <semicolon_token>;

character_literal ::= token <character_literal_token>;

choice_parameter_specification ::= defining_identifier <Names>;

clause_or_pragma ::=  component_clause | pragma_node;

compilation_unit ::=
  compilation_unit_declaration |
  compilation_unit_body |
  subunit;

compilation_unit_body ::=
  {context_item}    <Context_Clause_Elements>
  library_unit_body <Unit_Declaration>;

compilation_unit_declaration ::=
  {context_item}           <Context_Clause_Elements>
  token                    <private_token>
  library_unit_declaration <Unit_Declaration>;

component_clause ::= 
  identifier         <Representation_Clause_Name>
  token              <at_token>
  simple_expression  <Component_Clause_Position>
  token              <range_token>
  discrete_simple_expression_range
                     <Component_Clause_Range>
  token              <semicolon_token>
;

component_declaration ::=
  {defining_identifier}  <Names>
  token                  <colon_token>
  component_definition   <Object_Declaration_Subtype>
  token                  <assignment_token>
  [expression            <Initialization_Expression>]
  {aspect_specification} <Aspect_Specifications>
  token                  <semicolon_token>
;

component_definition ::=
  token <aliased_token>
  subtype_indication_or_access_definition <Component_Subtype_Indication>
;

component_item ::=
  component_declaration |
  aspect_clause |
  variant_part |
  null_component;

constrained_array_definition ::=
    token <array_token>
    token <left_token>
    {discrete_subtype_definition} <Discrete_Subtype_Definitions>
    token <right_token>
    token <of_token>
    component_definition <Array_Component_Definition>
;

constraint ::= scalar_constraint | composite_constraint;

composite_constraint ::=
  token         <left_token>
  {association} <Associations>
  token         <right_token>
;

context_item ::= with_clause | use_clause | pragma_node;

decimal_fixed_point_definition ::=
  token                    <delta_token>
  expression               <Delta_Expression>
  token                    <digits_token>
  expression               <Digits_Expression>
  [simple_expression_range <Real_Range_Constraint>]
;

declarative_item ::= basic_declarative_item | body_declaration;

defining_character_literal ::= token <character_literal>;

defining_designator ::= defining_program_unit_name | defining_operator_symbol;

defining_enumeration_literal ::= token <identifier>;

defining_enumeration_name ::=
  defining_enumeration_literal | defining_character_literal;

defining_expanded_unit_name ::=
  program_unit_name <Defining_Prefix>
  token <dot_token>
  defining_identifier <Defining_Selector>
;

defining_identifier ::= token <identifier_token>;

defining_operator_symbol ::= token <operator_symbol_token>;

defining_program_unit_name ::=
  defining_identifier | defining_expanded_unit_name;

delay_statement ::=
  token      <delay_token>
  token      <until_token>
  expression <Delay_Expression>
  token      <semicolon_token>
;

delta_constraint ::=
  token            <delta_token>
  expression       <Delta_Expression>
  range_constraint <Real_Range_Constraint>;

derived_record_definition ::=
  token <abstract_token>
  token <limited_token>
  token <new_token>
  subtype_indication <Parent_Subtype_Indication>
  {subtype_mark}     <Progenitor_List>
  token <with_token>
  alt_record_definition  <Record_Definition>
;

derived_type_definition ::=
  token <abstract_token>
  token <limited_token>
  token <new_token>
  subtype_indication <Parent_Subtype_Indication>
;

digits_constraint ::=
  token            <digits_token>
  expression       <Digits_Expression>
  range_constraint <Real_Range_Constraint>;

direct_name ::=
  identifier |
  operator_symbol;

discrete_choice ::= expression | discrete_range | others_choice;

discrete_range ::= discrete_subtype_indication_dr | range_dr;

discrete_range_attribute_reference ::=
    attribute_reference <Range_Attribute>;

discrete_simple_expression_range ::=
  simple_expression <Lower_Bound>
  token <double_dot_token>
  simple_expression <Upper_Bound>
;

discrete_subtype_definition ::=
   discrete_subtype_indication |
   discrete_range_attribute_reference |
   discrete_simple_expression_range;

discrete_subtype_indication ::=
    subtype_mark <Subtype_Mark>
    range_constraint <Subtype_Constraint>;

discrete_subtype_indication_dr ::=
    subtype_mark <Subtype_Mark>
    range_constraint <Subtype_Constraint>;

discriminant_part ::=
  unknown_discriminant_part |
  known_discriminant_part;

discriminant_specification ::= 
  {defining_identifier}             <Names>
  token                             <colon_token>
  token                             <not_token>
  token                             <null_token>
  subtype_mark_or_access_definition <Object_Declaration_Subtype>
  token                             <assignment_token>
  [expression                       <Initialization_Expression>]
;

designator ::= program_unit_name | operator_symbol;

element_iterator_specification ::=
   defining_identifier <Names>
   token <colon_token>
   subtype_indication
   token <of_token>
   token <reverse_token>
   name <Iteration_Scheme_Name>;

else_expression_path ::=
    token <else_token>
    expression <Dependent_Expression>
;

else_path ::=
  token       <else_token>
  {statement} <Sequence_Of_Statements>
;

elsif_expression_path ::=
    token <elsif_token>
    expression <Condition_Expression>
    token <then_token>
    expression <Dependent_Expression>
;

elsif_path ::=
  token       <elsif_token>
  expression  <Condition_Expression>
  token       <then_token>
  {statement} <Sequence_Of_Statements>
;

entry_body ::=
  token                       <entry_token>
  defining_program_unit_name  <Names>
  token                       <left_parenthesis_token>
  [entry_index_specification  <Entry_Index_Specification>]
  token                       <right_parenthesis_token>
  token                       <lp_token>
  {parameter_specification}   <Parameter_Profile>
  token                       <rp_token>
  token                       <when_token>
  expression                  <Entry_Barrier>
  token                       <is_token>
  {declarative_item}          <Body_Declarative_Items>
  token                       <begin_token>
  {statement}                 <Body_Statements>
  token                       <exception_token>
  {exception_handler}         <Body_Exception_Handlers>
  token                       <end_token>
  token                       <identifier_token>
  token                       <semicolon_token>
;

entry_declaration ::= 
  token                        <not_token>
  token                        <overriding_token>
  token                        <entry_token>
  defining_identifier          <Names>
  token                        <left_parenthesis_token>
  [discrete_subtype_definition <Entry_Family_Definition>]
  token                        <right_parenthesis_token>
  token                        <lp_token>
  {parameter_specification}    <Parameter_Profile>
  token                        <rp_token>
  {aspect_specification}       <Aspect_Specifications>
  token                        <semicolon_token>
;

entry_index_specification ::=
  token                       <for_token>
  defining_identifier         <Names>
  token                       <in_token>
  discrete_subtype_definition <Specification_Subtype_Definition>
;

enumeration_literal ::= token <enumeration_literal_token>;

enumeration_literal_specification ::= defining_enumeration_name <Names>;

enumeration_type_definition ::=
  token         <left_token>
  {enumeration_literal_specification} <Enumeration_Literal_Declarations>
  token         <right_token>
;

exception_choice ::= program_unit_name | others_choice;

exception_declaration ::=
  {defining_identifier}  <Names>
  token                  <colon_token>
  token                  <exception_token>
  {aspect_specification} <Aspect_Specifications>
  token                  <semicolon_token>
;

exception_handler ::= 
  token <when_token>
  choice_parameter_specification <Choice_Parameter_Specification>
  token <colon_token>
  {exception_choice} <Exception_Choices>
  token <arrow_token>
  {statement} <Handler_Statements>
;

exception_renaming_declaration ::=
  {defining_identifier}  <Names>
  token                  <colon_token>
  token                  <exception_token>
  token                  <renames_token>
  name <Renamed_Entity>
  {aspect_specification} <Aspect_Specifications>
  token                  <semicolon_token>
;

exit_statement  ::=
  token                  <exit_token>
  program_unit_name      <Exit_Loop_Name>
  token                  <when_token>
  expression             <Exit_Condition>
  token                  <semicolon_token>
;

explicit_dereference ::= name <Prefix> token <dot_token> token <all_token>;

expression ::= membership_test | simple_expression | short_circuit;

expression_or_box ::= expression | box;

extended_return_statement ::=
  token                       <return_token>
  return_object_specification <Return_Object_Specification>
  token                       <do_token>
  {statement}                 <Extended_Return_Statements>
  token                       <exception_token>
  {exception_handler}         <Extended_Return_Exception_Handlers>
  token                       <end_token>
  token                       <endreturn>
  token                       <semicolon_token>;

extension_aggregate ::=
  token         <left_token>
  expression    <Extension_Aggregate_Expression>
  token         <with_token>
  {association} <Record_Component_Associations>
  token         <right_token>;

floating_point_definition ::=
  token                    <digits_token>
  expression               <Digits_Expression>
  [simple_expression_range <Real_Range_Constraint>]
;

for_loop_statement ::= 
  token                  <Statement_Identifier>
  token                  <colon_token>
  token                  <for_token>
  iterator_specification <Loop_Parameter_Specification>
  token                  <loop_token>
  {statement}            <Loop_Statements>
  token                  <end_token>
  token                  <end_loop>
  token                  <identifier_token>
  token                  <semicolon_token>
;

formal_access_to_function_definition ::=
  token                     <not_token>
  token                     <null_token>
  token                     <access_token>
  token                     <protected_token>
  token                     <function_token>
  token                     <lp_token>
  {parameter_specification} <Access_To_Subprogram_Parameter_Profile>
  token                     <rp_token>
  token                     <return_token>
  token                     <return_not_token>
  token                     <return_null_token>
  subtype_mark_or_access_definition <Access_To_Function_Result_Subtype>
;

formal_access_to_object_definition ::=
  token <not_token>
  token <null_token>
  token <access_token>
  token <constant_token>
  subtype_indication <subtype_indication>
;

formal_access_to_procedure_definition ::=
  token                     <not_token>
  token                     <null_token>
  token                     <access_token>
  token                     <protected_token>
  token                     <procedure_token>
  token                     <lp_token>
  {parameter_specification} <Access_To_Subprogram_Parameter_Profile>
  token                     <rp_token>
;

formal_constrained_array_definition ::=
    token <array_token>
    token <left_token>
    {discrete_subtype_definition} <Discrete_Subtype_Definitions>
    token <right_token>
    token <of_token>
    component_definition <Array_Component_Definition>
;

formal_decimal_fixed_point_definition ::=
  token <delta_token>
  token <delta_box>
  token <digits_token>
  token <digits_box>;

formal_derived_type_definition ::=
  token                  <abstract_token>
  token                  <limited_token>
  token                  <synchronized_token>
  token                  <new_token>
  subtype_mark           <Subtype_Mark>
  token                  <and_token>
  {subtype_mark}         <Progenitor_List>
  token                  <with_token>
  token                  <private_token>
  {aspect_specification} <Aspect_Specifications>
;

formal_discrete_type_definition ::=
  token      <left_parenthesis_token>
  token      <box_token>
  token      <right_parenthesis_token>;

formal_floating_point_definition ::=
  token <digits_token>
  token <box_token>;

formal_function_declaration ::=
  token                      <with_token>
  token                      <function_token>
  defining_designator        <Names>
  token                      <lp_token>
  {parameter_specification}  <Parameter_Profile>
  token                      <rp_token>
  token                      <return_token>
  token                      <return_not_token>
  token                      <return_null_token>
  subtype_mark_or_access_definition <Result_Subtype>
  token                      <is_token>
  token                      <abstract_token>
  [name                      <Formal_Subprogram_Default>]
  token                      <box_token>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

formal_incomplete_type_declaration ::=
  token                      <type_token>
  defining_identifier        <Names>
  discriminant_part          <Discriminant_Part>
  token                      <is_token>
  token                      <tagged_token>
  token                      <semicolon_token>
;

formal_interface_type_definition ::=
    token <kind_token>
    token <interface_token>
    {subtype_mark} <Progenitor_List>
;

formal_modular_type_definition ::=
  token <mod_token>
  token <box_token>;

formal_object_declaration ::=
  {defining_identifier}             <Names>
  token                             <colon_token>
  token                             <in_token>
  token                             <out_token>
  token                             <not_token>
  token                             <null_token>
  subtype_mark_or_access_definition <Object_Declaration_Subtype>
  token                             <assignment_token>
  [expression                       <Initialization_Expression>]
  {aspect_specification}            <Aspect_Specifications>
  token                             <semicolon_token>
;

formal_ordinary_fixed_point_definition ::=
  token <delta_token>
  token <box_token>;

formal_package_declaration ::=
  token                      <with_token>
  token                      <package_token>
  defining_program_unit_name <Names>
  token                      <is_token>
  token                      <new_token>
  program_unit_name          <Generic_Unit_Name>
  token                      <left_parenthesis_token>
  {generic_association}      <Generic_Actual_Part>
  token                      <right_parenthesis_token>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

formal_private_type_definition ::=
  token <abstract_token>
  token <tagged_token>
  token <limited_token>
  token <private_token>;

formal_procedure_declaration ::=
  token                      <with_token>
  token                      <procedure_token>
  defining_program_unit_name <Names>
  token                      <lp_token>
  {parameter_specification}  <Parameter_Profile>
  token                      <rp_token>
  token                      <is_token>
  token                      <abstract_token>
  token                      <box_token>
  token                      <null_token>
  [name                      <Formal_Subprogram_Default>]
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

formal_signed_integer_type_definition ::=
  token <range_token>
  token <box_token>;

formal_type_declaration ::=
  token                  <type_token>
  defining_identifier    <Names>
  [discriminant_part     <Discriminant_Part>]
  token                  <is_token>
  formal_type_definition <Type_Declaration_View>
  {aspect_specification} <Aspect_Specifications>
  token                  <semicolon_token>
;

formal_type_definition ::=
  formal_private_type_definition |
  formal_derived_type_definition |
  formal_discrete_type_definition |
  formal_signed_integer_type_definition |
  formal_modular_type_definition |
  formal_floating_point_definition |
  formal_ordinary_fixed_point_definition |
  formal_decimal_fixed_point_definition |
  formal_constrained_array_definition |
  formal_unconstrained_array_definition |
  formal_access_to_object_definition |
  formal_access_to_procedure_definition |
  formal_access_to_function_definition |
  formal_interface_type_definition
;

formal_unconstrained_array_definition ::=
    token <array_token>
    token <left_token>
    {subtype_mark} <Index_Subtype_Definitions>
    token <right_token>
    token <of_token>
    component_definition <Array_Component_Definition>
;

full_type_declaration ::=
  token         <type_token>
  defining_identifier <Names>
  [discriminant_part <Discriminant_Part>]
  token         <is_token>
  type_definition <Type_Declaration_View>
  {aspect_specification} <Aspect_Specifications>
  token <semicolon_token>
;

function_body ::=
  token                      <not_token>
  token                      <overriding_token>
  token                      <function_token>
  defining_designator        <Names>
  token                      <lp_token>
  {parameter_specification}  <Parameter_Profile>
  token                      <rp_token>
  token                      <return_token>
  token                      <return_not_token>
  token                      <return_null_token>
  subtype_mark_or_access_definition <Result_Subtype>
  {aspect_specification}     <Aspect_Specifications>
  token                      <is_token>
  {declarative_item}         <Body_Declarative_Items>
  token                      <begin_token>
  {statement}                <Body_Statements>
  token                      <exception_token>
  {exception_handler}        <Body_Exception_Handlers>
  token                      <end_token>
  [designator                <end_name>]
  token                      <semicolon_token>
;

function_call ::= prefix record_aggregate <Function_Call_Parameters>;

function_declaration ::=
  token                      <not_token>
  token                      <overriding_token>
  token                      <function_token>
  defining_designator        <Names>
  token                      <lp_token>
  {parameter_specification}  <Parameter_Profile>
  token                      <rp_token>
  token                      <return_token>
  token                      <return_not_token>
  token                      <return_null_token>
  subtype_mark_or_access_definition <Result_Subtype>
  token                      <is_token>
  token                      <abstract_token>
  [expression                <Result_Expression>]
  token                      <renames_token>
  [expression                <Renamed_Entity>]
  token                      <separate_token>
  {aspect_specification}     <Aspect_Specifications>
  token <semicolon_token>
;

function_instantiation ::=
  token                      <not_token>
  token                      <overriding_token>
  token                      <function_token>
  defining_designator        <Names>
  token                      <is_token>
  token                      <new_token>
  program_unit_name          <Generic_Unit_Name>
  token                      <left_parenthesis_token>
  {generic_association}      <Generic_Actual_Part>
  token                      <right_parenthesis_token>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;



library_unit_declaration ::=
  procedure_declaration |
  function_declaration |
  package_declaration |
  generic_procedure_declaration |
  generic_function_declaration |
  generic_package_declaration |
  package_instantiation |
  procedure_instantiation |
  function_instantiation |
  package_renaming_declaration |
  generic_package_renaming |
  generic_procedure_renaming |
  generic_function_renaming
;

library_unit_body ::= package_body | function_body | procedure_body;

subunit ::=
  {context_item}            <Context_Clause_Elements>
  token                     <separate_token>
  token                     <left_parenthesis_token>
  program_unit_name         <parent_unit_name>
  token                     <right_parenthesis_token>
  proper_body               <Unit_Declaration>;


range_dr ::= range_attribute_reference_dr | simple_expression_range_dr;

range_attribute_reference_dr ::=
    attribute_reference <Range_Attribute>;

simple_expression_range_dr ::=
  simple_expression <Lower_Bound>
  token <double_dot_token>
  simple_expression <Upper_Bound>
;

procedure_call_statement ::=
  name                    <Called_Name>
  {parameter_association} <Call_Statement_Parameters>
  token                   <semicolon_token>;

return_object_specification ::= 
  defining_identifier <Names>
  token               <colon_token>
  token               <aliased_token>
  token               <constant_token>
  subtype_indication_or_access_definition <Object_Declaration_Subtype>
  token               <assignment_token>
  [expression         <Initialization_Expression>]
;



generic_association ::=
  generic_formal_parameter <Formal_Parameter>
  token                    <arrow_token>
  expression               <Actual_Parameter>
  token                    <box_token>
;

generic_formal ::=
  use_clause |
  pragma_node |
  formal_object_declaration |
  formal_type_declaration |
  formal_incomplete_type_declaration |
  formal_procedure_declaration |
  formal_function_declaration |
  formal_package_declaration;

generic_formal_parameter ::= selector_name | others_choice;

generic_function_declaration ::=
  token                      <generic_token>
  {generic_formal}           <Generic_Formal_Part>
  token                      <function_token>
  defining_designator        <Names>
  token                      <lp_token>
  {parameter_specification}  <Parameter_Profile>
  token                      <rp_token>
  token                      <return_token>
  token                      <return_not_token>
  token                      <return_null_token>
  subtype_mark_or_access_definition <Result_Subtype>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

generic_package_declaration ::=
  token                      <generic_token>
  {generic_formal}           <Generic_Formal_Part>
  token                      <package_token>
  defining_program_unit_name <Names>
  {aspect_specification}     <Aspect_Specifications>
  token                      <is_token>
  {basic_declarative_item}   <Visible_Part_Declarative_Items>
  token                      <private_token>
  {basic_declarative_item}   <Private_Part_Declarative_Items>
  token                      <end_token>
  [program_unit_name         <end_name>]
  token                      <semicolon_token>
;

generic_package_renaming ::=
  token                      <generic_token>
  {generic_formal}           <Generic_Formal_Part>
  token                      <package_token>
  defining_program_unit_name <Names>
  token                      <renames_token>
  name                       <Renamed_Entity>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

generic_procedure_renaming ::=
  token                      <generic_token>
  {generic_formal}           <Generic_Formal_Part>
  token                      <procedure_token>
  defining_program_unit_name <Names>
  token                      <renames_token>
  name                       <Renamed_Entity>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

generic_function_renaming ::=
  token                      <generic_token>
  {generic_formal}           <Generic_Formal_Part>
  token                      <function_token>
  defining_program_unit_name <Names>
  token                      <renames_token>
  name                       <Renamed_Entity>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

generic_procedure_declaration ::=
  token                      <generic_token>
  {generic_formal}           <Generic_Formal_Part>
  token                      <procedure_token>
  defining_program_unit_name <Names>
  token                      <lp_token>
  {parameter_specification}  <Parameter_Profile>
  token                      <rp_token>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

goto_statement  ::=
  token                  <exit_token>
  program_unit_name      <Goto_Label>
  token                  <semicolon_token>
;

identifier ::= token <identifier_token>;

if_expression_path ::=
    token <if_token>
    expression <Condition_Expression>
    token <then_token>
    expression <Dependent_Expression>
;

if_else_expression_path ::=
  if_expression_path | elsif_expression_path | else_expression_path;

if_expression ::= {if_else_expression_path} <Expression_Paths>;

incomplete_type_declaration ::=
  token                      <type_token>
  defining_identifier        <Names>
  [discriminant_part         <Discriminant_Part>]
  token                      <is_token>
  incomplete_type_definition <Type_Declaration_View>
  token                      <semicolon_token>
;

incomplete_type_definition ::= token <tagged_token>;

interface_type_definition ::=
    token <kind_token>
    token <interface_token>
    {subtype_mark} <Progenitor_List>
;

ordinary_fixed_point_definition ::=
  token                   <delta_token>
  expression              <Delta_Expression>
  simple_expression_range <Real_Range_Constraint>
;


quantified_expression ::=
  token <for_token>
  token <quantifier_token>
  iterator_specification
  token <arrow_token>
  expression <predicate>
;

if_elsif_else_path ::= if_path | elsif_path | else_path;

if_path ::=
  token       <if_token>
  expression  <Condition_Expression>
  token       <then_token>
  {statement} <Sequence_Of_Statements>
;

if_statement ::=
  {if_elsif_else_path} <Statement_Paths>
  token                <end_token>
  token                <if_token>
  token                <semicolon_token>
;


iterator_specification ::=
  generalized_iterator_specification |
  element_iterator_specification |
  loop_parameter_specification
;

generalized_iterator_specification ::=
   defining_identifier <Names>
   token <in_token>
   token <reverse_token>
   name <Iteration_Scheme_Name>;

loop_parameter_specification ::=
  defining_identifier         <Names>
  token                       <in_token>
  token                       <reverse_token>
  discrete_subtype_definition <Specification_Subtype_Definition>
;

loop_statement ::= 
  token        <Statement_Identifier>
  token        <colon_token>
  token        <loop_token>
  {statement}  <Loop_Statements>
  token        <end_token>
  token        <end_loop>
  token        <identifier_token>
  token        <semicolon_token>
;

while_loop_statement ::= 
  token        <Statement_Identifier>
  token        <colon_token>
  token        <while_token>
  expression   <While_Condition>
  token        <loop_token>
  {statement}  <Loop_Statements>
  token        <end_token>
  token        <end_loop>
  token        <identifier_token>
  token        <semicolon_token>
;

known_discriminant_part ::= 
  token                        <left_parenthesis_token>
  {discriminant_specification} <Discriminants>
  token                        <right_parenthesis_token>;

membership_test ::=
  simple_expression <Membership_Test_Expression>
  token <not_token>
  token <in_token>
  {membership_choice} <Membership_Test_Choices>
;

membership_choice ::= simple_expression | range_constraint;

modular_type_definition ::=
  token <mod_token>
  expression <Mod_Static_Expression>;

name ::= direct_name |
  explicit_dereference |
  selected_component |
  attribute_reference |
  function_call |
  character_literal |
  qualified_expression;

null_component ::= token <null_token> token <semicolon_token>;

null_literal ::= token <null_literal_token>;

null_record_definition ::=
  token <null_token>
  token <record_token>;

label_decorator ::=
  {defining_identifier} <Label_Names>
  statement             <Unlabeled_Statement>;

null_statement ::=
  token <null_token>
  token <semicolon_token>;

number_declaration ::= 
  {defining_identifier} <Names>
  token                 <colon_token>
  token                 <constant_token>
  token                 <assignment_token>
  expression            <Initialization_Expression>
  token                 <semicolon_token>
;

numeric_literal ::= token <numeric_literal_token>;

object_declaration ::=
  {defining_identifier}  <Names>
  token                  <colon_token>
  token                  <aliased_token>
  token                  <constant_token>
  object_definition      <Object_Declaration_Subtype>
  token                  <assignment_token>
  [expression            <Initialization_Expression>]
  {aspect_specification} <Aspect_Specifications>
  token                  <semicolon_token>
;

object_definition ::=
  subtype_indication |
  access_definition |
  unconstrained_array_definition |
  constrained_array_definition;

object_renaming_declaration ::=
  {defining_identifier} <Names>
  token <colon_token>
  token <not_token>
  token <null_token>
  subtype_mark_or_access_definition <Object_Declaration_Subtype>
  token <renames_token>
  name <Renamed_Entity>
  {aspect_specification} <Aspect_Specifications>
  token <semicolon_token>
;

operator_symbol ::= token <operator_symbol_token>;

others_choice ::= token <others_token>;

package_body ::=
  token                      <package_token>
  token                      <body_token>
  defining_program_unit_name <Names>
  {aspect_specification}     <Aspect_Specifications>
  token                      <is_token>
  {declarative_item}         <Body_Declarative_Items>
  token                      <begin_token>
  {statement}                <Body_Statements>
  token                      <exception_token>
  {exception_handler}        <Body_Exception_Handlers>
  token                      <end_token>
  [program_unit_name         <end_name>]
  token                      <semicolon_token>
;

package_body_stub ::=
  token                      <package_token>
  token                      <body_token>
  defining_program_unit_name <Names>
  token                      <is_token>
  token                      <separate_token>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

package_declaration ::=
  token                      <package_token>
  defining_program_unit_name <Names>
  {aspect_specification}     <Aspect_Specifications>
  token                      <is_token>
  {basic_declarative_item}   <Visible_Part_Declarative_Items>
  token                      <private_token>
  {basic_declarative_item}   <Private_Part_Declarative_Items>
  token                      <end_token>
  [program_unit_name         <end_name>]
  token                      <semicolon_token>
;

package_instantiation ::=
  token                      <package_token>
  defining_program_unit_name <Names>
  token                      <is_token>
  token                      <new_token>
  program_unit_name          <Generic_Unit_Name>
  token                      <left_parenthesis_token>
  {generic_association}      <Generic_Actual_Part>
  token                      <right_parenthesis_token>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

package_renaming_declaration ::=
  token                      <package_token>
  defining_program_unit_name <Names>
  token                      <renames_token>
  name                       <Renamed_Entity>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

parameter_association ::=
  identifier <Formal_Parameter>
  expression <Actual_Parameter>
;

parameter_specification ::=
  {defining_identifier}             <Names>
  token                             <colon_token>
  token                             <aliased_token>
  token                             <in_token>
  token                             <out_token>
  token                             <not_token>
  token                             <null_token>
  subtype_mark_or_access_definition <Object_Declaration_Subtype>
  token                             <assignment_token>
  [expression                       <Initialization_Expression>]
;

pragma_node ::=
  token         <pragma_token>
  identifier    <Formal_Parameter>
  token         <left_token>
  {pragma_argument_association} <Pragma_Argument_Associations>
  token         <right_token>
  token <semicolon_token>
;

pragma_argument_association ::=
    identifier <Formal_Parameter>
    token      <arrow_token>
    expression <Actual_Parameter>
;

prefix ::= name;

private_extension_declaration ::=
  token                        <type_token>
  defining_identifier          <Names>
  [discriminant_part           <Discriminant_Part>]
  token                        <is_token>
  private_extension_definition <Type_Declaration_View>
  {aspect_specification}       <Aspect_Specifications>
  token                        <semicolon_token>
;

private_extension_definition ::=
  token              <abstract_token>
  token              <limited_token>
  token              <synchronized_token>
  token              <new_token>
  subtype_indication <Ancestor_Subtype_Indication>
  {subtype_mark}     <Progenitor_List>
  token              <with_token>
  token              <private_token>
;

private_type_declaration ::=
  token                      <type_token>
  defining_identifier        <Names>
  [discriminant_part         <Discriminant_Part>]
  token                      <is_token>
  private_type_definition    <Type_Declaration_View>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

private_type_definition ::=
  token <abstract_token>
  token <tagged_token>
  token <limited_token>
  token <private_token>;

procedure_body ::=
  token                      <not_token>
  token                      <overriding_token>
  token                      <procedure_token>
  defining_program_unit_name <Names>
  token                      <lp_token>
  {parameter_specification}  <Parameter_Profile>
  token                      <rp_token>
  {aspect_specification}     <Aspect_Specifications>
  token                      <is_token>
  {declarative_item}         <Body_Declarative_Items>
  token                      <begin_token>
  {statement}                <Body_Statements>
  token                      <exception_token>
  {exception_handler}        <Body_Exception_Handlers>
  token                      <end_token>
  [program_unit_name         <end_name>]
  token                      <semicolon_token>
;

procedure_declaration ::=
  token                      <not_token>
  token                      <overriding_token>
  token                      <procedure_token>
  defining_program_unit_name <Names>
  token                      <lp_token>
  {parameter_specification}  <Parameter_Profile>
  token                      <rp_token>
  token                      <is_token>
  token                      <abstract_token>
  token                      <renames_token>
  [expression                <Renamed_Entity>]
  token                      <separate_token>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

procedure_instantiation ::=
  token                      <not_token>
  token                      <overriding_token>
  token                      <procedure_token>
  defining_program_unit_name <Names>
  token                      <is_token>
  token                      <new_token>
  program_unit_name          <Generic_Unit_Name>
  token                      <left_parenthesis_token>
  {generic_association}      <Generic_Actual_Part>
  token                      <right_parenthesis_token>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

program_unit_name ::= identifier | selected_identifier;

proper_body ::= 
  procedure_body |
  function_body |
  package_body |
  task_body |
  protected_body;

protected_body ::= 
  token                      <protected_token>
  token                      <body_token>
  defining_identifier        <Names>
  {aspect_specification}     <Aspect_Specifications>
  token                      <is_token>
  {protected_operation_item} <Protected_Operation_Items>
  token                      <end_token>
  token                      <identifier_token>
  token                      <semicolon_token>
;

protected_body_stub ::=
  token                      <protected_token>
  token                      <body_token>
  defining_identifier        <Names>
  token                      <is_token>
  token                      <separate_token>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

protected_definition ::=
  {protected_operation_declaration} <Visible_Protected_Items>
  token                             <private_token>
  {protected_element_declaration}   <Private_Protected_Items>
  token                             <end_token>
  token                             <identifier_token>
;

protected_element_declaration ::=
  protected_operation_declaration |
  component_declaration;

protected_operation_declaration ::=
  procedure_declaration |
  function_declaration |
  entry_declaration |
  aspect_clause;

protected_operation_item ::=
  procedure_declaration |
  function_declaration |
  procedure_body |
  function_body |
  entry_body |
  aspect_clause
;

protected_type_declaration ::= 
  token                    <protected_token>
  token                    <type_token>
  defining_identifier      <Names>
  [known_discriminant_part <Discriminant_Part>]
  {aspect_specification}   <Aspect_Specifications>
  token                    <is_token>
  token                    <new_token>
  {subtype_mark}           <Progenitor_List>
  token                    <with_token>
  protected_definition     <Type_Declaration_View>
  token                    <semicolon_token>
;

qualified_expression ::=
  subtype_mark <Converted_Or_Qualified_Subtype_Mark>
  token <apostrophe_token>
  expression <Converted_Or_Qualified_Expression>;

raise_statement ::=
  token      <raise_token>
  name       <Raised_Exception>
  token      <with_token>
  expression <Raise_Statement_Message>
  token      <semicolon_token>
;

range_constraint ::= range_attribute_reference | simple_expression_range;

range_attribute_reference ::=
  attribute_reference <Range_Attribute>;

record_aggregate ::=
  token         <left_token>
  {association} <Record_Component_Associations>
  token         <right_token>;

record_definition ::=
  token <record_token>
    {component_item} <Record_Components>
  token <end_token>
  token <end_record_token>
;

record_representation_clause ::=
  token              <for_token>
  identifier         <Representation_Clause_Name>
  token              <use_token>
  token              <record_token>
  token              <at_token>
  token              <mod_token>
  [expression        <Mod_Clause_Expression>]
  token              <mod_semicolon>
  {clause_or_pragma} <Component_Clauses>
  token              <end_token>
  token              <end_record>
  token              <semicolon_token>
;

record_type_definition ::=
  token <abstract_token>
  token <tagged_token>
  token <limited_token>
  alt_record_definition <Record_Definition>
;

requeue_statement ::=
  token <requeue_token>
  name  <Requeue_Entry_Name>
  token <with_token>
  token <abort_token>
  token <semicolon_token>
;

scalar_constraint ::= range_constraint | digits_constraint | delta_constraint;

simple_expression_range ::=
  simple_expression <Lower_Bound>
  token <double_dot_token>
  simple_expression <Upper_Bound>
;

select_or_else_path ::= select_or_path | else_path;

select_or_path ::=
    token      <or_token>
    token      <when_token>
    expression <Guard>
    token      <arrow_token>
    {statement} <Sequence_Of_Statements>
;

select_then_abort_path ::= select_or_path | then_abort_path;

selected_component ::= prefix token <dot_token> selector_name <Selector>;

selected_identifier ::=
  program_unit_name <Prefix> token <dot_token> selector_name <Selector>;

selective_accept ::=
  token                 <select_token>
  {select_or_else_path} <Selective_Statement_Paths>
  token                 <end_token>
  token                 <end_select>
  token                 <semicolon_token>
;

selector_name ::=
  identifier |
  enumeration_literal |
  character_literal |
  operator_symbol;

short_circuit ::=
  expression <Short_Circuit_Operation_Left_Expression>
  token <and_token>
  token <then_token>
  expression <Short_Circuit_Operation_Right_Expression>;

signed_integer_type_definition ::=
  token <range_token>
  simple_expression_range <Integer_Constraint>
;

simple_expression ::=
    numeric_literal |
    null_literal |
    record_aggregate |
    extension_aggregate |
    name |
    allocator |
    if_expression |
    case_expression |
    quantified_expression;

simple_return_statement ::=
  token      <return_token>
  expression <Return_Expression>
  token      <semicolon_token>
;

single_protected_declaration ::=
  token                  <protected_token>
  defining_identifier    <Names>
  {aspect_specification} <Aspect_Specifications>
  token                  <is_token>
  token                  <new_token>
  {subtype_mark}         <Progenitor_List>
  token                  <with_token>
  protected_definition   <Object_Declaration_Subtype>
  token                  <semicolon_token>
;

single_task_declaration ::=
  token                  <task_token>
  defining_identifier    <Names>
  {aspect_specification} <Aspect_Specifications>
  token                  <is_token>
  token                  <new_token>
  {subtype_mark}         <Progenitor_List>
  token                  <with_token>
  [task_definition       <Object_Declaration_Subtype>]
  token                  <semicolon_token>
;

statement ::=
  label_decorator |
  null_statement |
  assignment_statement |
  exit_statement |
  goto_statement |
  simple_return_statement |
  procedure_call_statement |
  requeue_statement |
  delay_statement |
  terminate_alternative_statement |
  abort_statement |
  raise_statement |
  pragma_node |
  if_statement |
  case_statement |
  loop_statement |
  while_loop_statement |
  for_loop_statement |
  block_statement |
  extended_return_statement |
  accept_statement |
  selective_accept |
  asynchronous_select;

subtype_declaration ::=
  token <subtype_token>
  defining_identifier <Names>
  token <is_token>
  subtype_indication <Type_Declaration_View>
  {aspect_specification} <Aspect_Specifications>
  token <semicolon_token>
;

subtype_indication ::=
  token <not_token>
  token <null_token>
  subtype_mark
  [constraint <Subtype_Constraint>];

subtype_indication_or_access_definition ::=
  subtype_indication | access_definition;

subtype_mark ::= identifier |
  selected_identifier |
  selected_component |
  attribute_reference |
  function_call;

subtype_mark_or_access_definition ::= subtype_mark | access_definition;

task_body ::= 
  token                      <task_token>
  token                      <body_token>
  defining_identifier        <Names>
  {aspect_specification}     <Aspect_Specifications>
  token                      <is_token>
  {declarative_item}         <Body_Declarative_Items>
  token                      <begin_token>
  {statement}                <Body_Statements>
  token                      <exception_token>
  {exception_handler}        <Body_Exception_Handlers>
  token                      <end_token>
  token                      <identifier_token>
  token                      <semicolon_token>
;

task_body_stub ::=
  token                      <task_token>
  token                      <body_token>
  defining_identifier        <Names>
  token                      <is_token>
  token                      <separate_token>
  {aspect_specification}     <Aspect_Specifications>
  token                      <semicolon_token>
;

task_definition ::= 
  {task_item}   <Visible_Task_Items>
  token         <private_token>
  {task_item}   <Private_Task_Items>
  token         <end_token>
  token         <identifier_token>
;

task_item ::= entry_declaration | aspect_clause;

task_type_declaration ::= 
  token                    <task_token>
  token                    <type_token>
  defining_identifier      <Names>
  [known_discriminant_part <Discriminant_Part>]
  {aspect_specification}   <Aspect_Specifications>
  token                    <is_token>
  token                    <new_token>
  {subtype_mark}           <Progenitor_List>
  token                    <with_token>
  [task_definition         <Type_Declaration_View>]
  token                    <semicolon_token>
;

terminate_alternative_statement ::=
  token <terminate_token>
  token <semicolon_token>;

then_abort_path ::= 
    token      <then_token>
    token      <abort_token>
    {statement} <Sequence_Of_Statements>
;

type_definition ::=
  enumeration_type_definition |
  signed_integer_type_definition |
  modular_type_definition |
  floating_point_definition |
  ordinary_fixed_point_definition |
  decimal_fixed_point_definition |
  unconstrained_array_definition |
  constrained_array_definition |
  record_type_definition |
  access_to_object_definition |
  access_to_function_definition |
  access_to_procedure_definition |
  derived_type_definition |
  derived_record_definition |
  interface_type_definition;

unconstrained_array_definition ::=
    token <array_token>
    token <left_token>
    {subtype_mark} <Index_Subtype_Definitions>
    token <right_token>
    token <of_token>
    component_definition <Array_Component_Definition>
;

unknown_discriminant_part ::=
    token <left_token>
    token <box_token>
    token <right_token>
;

use_clause ::= use_package_clause | use_type_clause;

use_package_clause ::=
  token <use_token>
  {program_unit_name} <Clause_Names>
  token <semicolon_token>
;

use_type_clause ::=
  token <use_token>
  token <all_token>
  token <type_token>
  {subtype_mark} <Type_Clause_Names>
  token <semicolon_token>
;

variant_part ::=
  token <case_token>
  identifier <Discriminant_Direct_Name>
  token <is_token>
  {variant} <Variants>
  token <end_token>
  token <end_case_token>
  token <semicolon_token>
;

variant ::=
  token <when_token>
  {discrete_choice} <Variant_Choices>
  token <arrow_token>
  {component_item} <Record_Components>
;

with_clause ::=
  token <limited_token>
  token <private_token>
  token <with_token>
  {program_unit_name} <Clause_Names>
  token <semicolon_token>
;

defining_name ::= defining_identifier |
  defining_character_literal |
  defining_operator_symbol |
  defining_enumeration_literal;

declarative_region ::=
  basic_declaration |
  discriminant_specification |
  component_declaration |
  iterator_specification |
  parameter_specification |
  function_body |
  procedure_body |
  return_object_specification |
  entry_declaration |
  entry_index_specification |
  choice_parameter_specification |
  formal_object_declaration |
  formal_type_declaration |
  formal_incomplete_type_declaration |
  formal_procedure_declaration |
  formal_function_declaration |
  formal_package_declaration |
  block_statement |
  loop_statement |
  while_loop_statement |
  for_loop_statement |
  quantified_expression |
  extended_return_statement |
  accept_statement |
  exception_handler;

simple_name ::=
  identifier |
  operator_symbol |
  character_literal |
  enumeration_literal;

Synthesized attributes
  token  : Gela.Lexical_Types.Token_Count : Index;

Synthesized attributes
  compilation_unit,
  compilation_unit_declaration,
  compilation_unit_body,
  subunit,
  character_literal,
  enumeration_literal,
  defining_designator,
  defining_expanded_unit_name,
  defining_identifier,
  defining_operator_symbol,
  defining_program_unit_name,
  function_body,
  function_declaration,
  function_instantiation,
  generic_package_declaration,
  generic_package_renaming,
  generic_function_declaration,
  generic_function_renaming,
  generic_procedure_declaration,
  generic_procedure_renaming,
  identifier,
  library_unit_body,
  library_unit_declaration,
  operator_symbol,
  package_body,
  package_declaration,
  package_instantiation,
  package_renaming_declaration,
  procedure_body,
  procedure_declaration,
  procedure_instantiation,
  program_unit_name,
  proper_body,
  protected_body,
  selected_identifier,
  selector_name,
  task_body
  : Gela.Lexical_Types.Symbol : full_name;

Rules for compilation_unit_declaration. :
(.
      ${compilation_unit_declaration.full_name} := ${Unit_Declaration.full_name};
.)

Rules for compilation_unit_body. :
(.
      ${compilation_unit_body.full_name} := ${Unit_Declaration.full_name};
.)

Rules for subunit. :
(.
      Self.Compilation.Context.Symbols.Join
        (${parent_unit_name.full_name}, ${Unit_Declaration.full_name}, ${subunit.full_name});
.)

Rules for defining_identifier.identifier_token :
(.
      ${defining_identifier.full_name} := 
        Self.Compilation.Get_Token (${identifier_token.Index}).Symbol;
.)

Rules for defining_operator_symbol.operator_symbol_token :
(.
      ${defining_operator_symbol.full_name} :=
        Self.Compilation.Get_Token (${operator_symbol_token.Index}).Symbol;
.)

Rules for identifier.identifier_token :
(.
      ${identifier.full_name} :=
        Self.Compilation.Get_Token (${identifier_token.Index}).Symbol;
.)

Rules for operator_symbol.operator_symbol_token :
(.
      ${operator_symbol.full_name} :=
        Self.Compilation.Get_Token (${operator_symbol_token.Index}).Symbol;
.)

Rules for enumeration_literal.enumeration_literal_token :
(.
      ${enumeration_literal.full_name} :=
        Self.Compilation.Get_Token (${enumeration_literal_token.Index}).Symbol;
.)

Rules for character_literal.character_literal_token :
(.
      ${character_literal.full_name} :=
        Self.Compilation.Get_Token (${character_literal_token.Index}).Symbol;
.)

Rules for selected_identifier. :
(.
      Self.Compilation.Context.Symbols.Join
        (${Prefix.full_name}, ${Selector.full_name}, ${selected_identifier.full_name});
.)

Rules for defining_expanded_unit_name. :
(.
      Self.Compilation.Context.Symbols.Join
        (${Defining_Prefix.full_name},
         ${Defining_Selector.full_name},
         ${defining_expanded_unit_name.full_name});
.)

Rules for procedure_declaration. :
(.
      ${procedure_declaration.full_name} := ${Names.full_name};
.)

Rules for function_declaration. :
(.
      ${function_declaration.full_name} := ${Names.full_name};
.)

Rules for package_declaration. :
(.
      ${package_declaration.full_name} := ${Names.full_name};
.)

Rules for generic_package_declaration. :
(.
      ${generic_package_declaration.full_name} := ${Names.full_name};
.)

Rules for generic_function_declaration. :
(.
      ${generic_function_declaration.full_name} := ${Names.full_name};
.)

Rules for generic_procedure_declaration. :
(.
      ${generic_procedure_declaration.full_name} := ${Names.full_name};
.)

Rules for package_instantiation. :
(.
      ${package_instantiation.full_name} := ${Names.full_name};
.)

Rules for procedure_instantiation. :
(.
      ${procedure_instantiation.full_name} := ${Names.full_name};
.)

Rules for function_instantiation. :
(.
      ${function_instantiation.full_name} := ${Names.full_name};
.)

Rules for package_renaming_declaration. :
(.
      ${package_renaming_declaration.full_name} := ${Names.full_name};
.)

Rules for generic_package_renaming. :
(.
      ${generic_package_renaming.full_name} := ${Names.full_name};
.)

Rules for generic_procedure_renaming. :
(.
      ${generic_procedure_renaming.full_name} := ${Names.full_name};
.)

Rules for generic_function_renaming. :
(.
      ${generic_function_renaming.full_name} := ${Names.full_name};
.)

Rules for package_body. :
(.
      ${package_body.full_name} := ${Names.full_name};
.)

Rules for function_body. :
(.
      ${function_body.full_name} := ${Names.full_name};
.)

Rules for procedure_body. :
(.
      ${procedure_body.full_name} := ${Names.full_name};
.)

Rules for task_body. :
(.
      ${task_body.full_name} := ${Names.full_name};
.)

Rules for protected_body. :
(.
      ${protected_body.full_name} := ${Names.full_name};
.)

Synthesized attributes
  compilation_unit,
  compilation_unit_declaration,
  compilation_unit_body,
  subunit,
  library_unit_body,
  package_body,
  function_body,
  procedure_body,
  library_unit_declaration,
  procedure_declaration,
  function_declaration,
  package_declaration,
  generic_procedure_declaration,
  generic_function_declaration,
  generic_package_declaration,
  package_instantiation,
  procedure_instantiation,
  function_instantiation,
  package_renaming_declaration,
  generic_package_renaming,
  generic_procedure_renaming,
  generic_function_renaming,
  proper_body,
  task_body,
  protected_body
    : Gela.Semantic_Types.Unit_Kinds : unit_kind;

Rules for compilation_unit_declaration. :
(.
      ${compilation_unit_declaration.unit_kind} := ${Unit_Declaration.unit_kind};
.)

Rules for compilation_unit_body. :
(.
      ${compilation_unit_body.unit_kind} := ${Unit_Declaration.unit_kind};
.)

Rules for subunit. :
(.
      ${subunit.unit_kind} := ${Unit_Declaration.unit_kind};
.)

Rules for package_body. :
(.
      ${package_body.unit_kind} := Gela.Semantic_Types.A_Package_Body;
.)

Rules for function_body. :
(.
      ${function_body.unit_kind} := Gela.Semantic_Types.A_Function_Body;
.)

Rules for procedure_body. :
(.
      ${procedure_body.unit_kind} := Gela.Semantic_Types.A_Procedure_Body;
.)

Rules for procedure_declaration. :
(.
      ${procedure_declaration.unit_kind} := Gela.Semantic_Types.A_Procedure;
.)

Rules for function_declaration. :
(.
      ${function_declaration.unit_kind} := Gela.Semantic_Types.A_Function;
.)

Rules for package_declaration. :
(.
      ${package_declaration.unit_kind} := Gela.Semantic_Types.A_Package;
.)

Rules for generic_procedure_declaration. :
(.
      ${generic_procedure_declaration.unit_kind} := Gela.Semantic_Types.A_Generic_Procedure;
.)

Rules for generic_function_declaration. :
(.
      ${generic_function_declaration.unit_kind} := Gela.Semantic_Types.A_Generic_Function;
.)

Rules for generic_package_declaration. :
(.
      ${generic_package_declaration.unit_kind} := Gela.Semantic_Types.A_Generic_Package;
.)

Rules for package_instantiation. :
(.
      ${package_instantiation.unit_kind} := Gela.Semantic_Types.A_Package_Instance;
.)

Rules for procedure_instantiation. :
(.
      ${procedure_instantiation.unit_kind} := Gela.Semantic_Types.A_Procedure_Instance;
.)

Rules for function_instantiation. :
(.
      ${function_instantiation.unit_kind} := Gela.Semantic_Types.A_Function_Instance;
.)

Rules for package_renaming_declaration. :
(.
      ${package_renaming_declaration.unit_kind} := Gela.Semantic_Types.A_Package_Renaming;
.)

Rules for generic_package_renaming. :
(.
      ${generic_package_renaming.unit_kind} := Gela.Semantic_Types.A_Generic_Package_Renaming;
.)

Rules for generic_procedure_renaming. :
(.
      ${generic_procedure_renaming.unit_kind} := Gela.Semantic_Types.A_Generic_Procedure_Renaming;
.)

Rules for generic_function_renaming. :
(.
      ${generic_function_renaming.unit_kind} := Gela.Semantic_Types.A_Generic_Function_Renaming;
.)

Rules for task_body. :
(.
      ${task_body.unit_kind} := Gela.Semantic_Types.A_Generic_Procedure_Renaming;
.)

Rules for protected_body. :
(.
      ${protected_body.unit_kind} := Gela.Semantic_Types.A_Generic_Function_Renaming;
.)

Rules for Compilation. :
(.
      ${units.env_in} := 0;  --  not used!
.)

Rules for Compilation. :
(.
      ${Compilation_Pragmas.env_in} := ${units.env_out};
.)


Inherited attributes
  Aborted_Tasks,
  Accept_Body_Exception_Handlers,
  Accept_Body_Statements,
  Accept_Parameters,
  Access_To_Subprogram_Parameter_Profile,
  Array_Component_Choices,
  Aspect_Specifications,
  Associations,
  Asynchronous_Statement_Paths,
  Block_Declarative_Items,
  Block_Exception_Handlers,
  Block_Statements,
  Body_Declarative_Items,
  Body_Exception_Handlers,
  Body_Statements,
  Call_Statement_Parameters,
  Case_Expression_Paths,
  Case_Path_Alternative_Choices,
  Case_Statement_Alternative_Choices,
  Case_Statement_Paths,
  Clause_Names,
  Compilation_Pragmas,
  Component_Clauses,
  Context_Clause_Elements,
  Discrete_Subtype_Definitions,
  Discriminants,
  Enumeration_Literal_Declarations,
  Exception_Choices,
  Expression_Paths,
  Extended_Return_Exception_Handlers,
  Extended_Return_Statements,
  Generic_Actual_Part,
  Generic_Formal_Part,
  Handler_Statements,
  Index_Subtype_Definitions,
  Label_Names,
  Loop_Statements,
  Membership_Test_Choices,
  Names,
  Parameter_Profile,
  Pragma_Argument_Associations,
  Private_Part_Declarative_Items,
  Private_Protected_Items,
  Private_Task_Items,
  Progenitor_List,
  Protected_Operation_Items,
  Record_Component_Associations,
  Record_Components,
  Selective_Statement_Paths,
  Sequence_Of_Statements,
  Statement_Paths,
  Type_Clause_Names,
  Variant_Choices,
  Variants,
  Visible_Part_Declarative_Items,
  Visible_Protected_Items,
  Visible_Task_Items,
  abort_statement,
  accept_statement,
  access_definition,
  access_to_function_definition,
  access_to_object_definition,
  access_to_procedure_definition,
  allocator,
  alt_record_definition,
  anonymous_access_to_function_definition,
  anonymous_access_to_object_definition,
  anonymous_access_to_procedure_definition,
  aspect_clause,
  aspect_specification,
  assignment_statement,
  association,
  asynchronous_select,
  at_clause,
  attribute_definition_clause,
  attribute_reference,
  basic_declaration,
  basic_declarative_item,
  block_statement,
  body_declaration,
  body_stub,
  box,
  case_expression,
  case_expression_path,
  case_path,
  case_statement,
  character_literal,
  choice_parameter_specification,
  clause_name,
  clause_or_pragma,
  compilation_unit,
  compilation_unit_body,
  compilation_unit_declaration,
  component_clause,
  component_declaration,
  component_definition,
  component_item,
  composite_constraint,
  constrained_array_definition,
  constraint,
  context_item,
  decimal_fixed_point_definition,
  declarative_item,
  declarative_region,
  defining_character_literal,
  defining_designator,
  defining_enumeration_literal,
  defining_enumeration_name,
  defining_expanded_unit_name,
  defining_identifier,
  defining_name,
  defining_operator_symbol,
  defining_program_unit_name,
  delay_statement,
  delta_constraint,
  derived_record_definition,
  derived_type_definition,
  designator,
  digits_constraint,
  direct_name,
  discrete_choice,
  discrete_range,
  discrete_range_attribute_reference,
  discrete_simple_expression_range,
  discrete_subtype_definition,
  discrete_subtype_indication,
  discrete_subtype_indication_dr,
  discriminant_part,
  discriminant_specification,
  element_iterator_specification,
  else_expression_path,
  else_path,
  elsif_expression_path,
  elsif_path,
  entry_body,
  entry_declaration,
  entry_index_specification,
  enumeration_literal,
  enumeration_literal_specification,
  enumeration_type_definition,
  exception_choice,
  exception_declaration,
  exception_handler,
  exception_renaming_declaration,
  exit_statement,
  explicit_dereference,
  expression,
  expression_or_box,
  extended_return_statement,
  extension_aggregate,
  floating_point_definition,
  for_loop_statement,
  formal_access_to_function_definition,
  formal_access_to_object_definition,
  formal_access_to_procedure_definition,
  formal_constrained_array_definition,
  formal_decimal_fixed_point_definition,
  formal_derived_type_definition,
  formal_discrete_type_definition,
  formal_floating_point_definition,
  formal_function_declaration,
  formal_incomplete_type_declaration,
  formal_interface_type_definition,
  formal_modular_type_definition,
  formal_object_declaration,
  formal_ordinary_fixed_point_definition,
  formal_package_declaration,
  formal_private_type_definition,
  formal_procedure_declaration,
  formal_signed_integer_type_definition,
  formal_type_declaration,
  formal_type_definition,
  formal_unconstrained_array_definition,
  full_type_declaration,
  function_body,
  function_call,
  function_declaration,
  function_instantiation,
  generalized_iterator_specification,
  generic_association,
  generic_formal,
  generic_formal_parameter,
  generic_function_declaration,
  generic_function_renaming,
  generic_package_declaration,
  generic_package_renaming,
  generic_procedure_declaration,
  generic_procedure_renaming,
  goto_statement,
  identifier,
  if_else_expression_path,
  if_elsif_else_path,
  if_expression,
  if_expression_path,
  if_path,
  if_statement,
  incomplete_type_declaration,
  interface_type_definition,
  iterator_specification,
  known_discriminant_part,
  label_decorator,
  library_unit_body,
  library_unit_declaration,
  loop_parameter_specification,
  loop_statement,
  membership_choice,
  membership_test,
  modular_type_definition,
  name,
  null_component,
  null_literal,
  null_record_definition,
  null_statement,
  number_declaration,
  numeric_literal,
  object_declaration,
  object_definition,
  object_renaming_declaration,
  operator_symbol,
  ordinary_fixed_point_definition,
  others_choice,
  package_body,
  package_body_stub,
  package_declaration,
  package_instantiation,
  package_renaming_declaration,
  parameter_association,
  parameter_specification,
  pragma_argument_association,
  pragma_node,
  prefix,
  private_extension_declaration,
  private_extension_definition,
  private_type_declaration,
  private_type_definition,
  procedure_body,
  procedure_call_statement,
  procedure_declaration,
  procedure_instantiation,
  program_unit_name,
  proper_body,
  protected_body,
  protected_body_stub,
  protected_definition,
  protected_element_declaration,
  protected_operation_declaration,
  protected_operation_item,
  protected_type_declaration,
  qualified_expression,
  quantified_expression,
  raise_statement,
  range_attribute_reference,
  range_attribute_reference_dr,
  range_constraint,
  range_dr,
  record_aggregate,
  record_definition,
  record_representation_clause,
  record_type_definition,
  requeue_statement,
  return_object_specification,
  scalar_constraint,
  select_or_else_path,
  select_or_path,
  select_then_abort_path,
  selected_component,
  selected_identifier,
  selective_accept,
  selector_name,
  short_circuit,
  signed_integer_type_definition,
  simple_expression,
  simple_expression_range,
  simple_expression_range_dr,
  simple_name,
  simple_return_statement,
  single_protected_declaration,
  single_task_declaration,
  statement,
  subtype_declaration,
  subtype_indication,
  subtype_indication_or_access_definition,
  subtype_mark,
  subtype_mark_or_access_definition,
  subunit,
  task_body,
  task_body_stub,
  task_definition,
  task_item,
  task_type_declaration,
  terminate_alternative_statement,
  then_abort_path,
  type_definition,
  unconstrained_array_definition,
  units,
  unknown_discriminant_part,
  use_clause,
  use_package_clause,
  use_type_clause,
  variant,
  variant_part,
  while_loop_statement,
  with_clause
    : Gela.Semantic_Types.Env_Index : env_in;


Synthesized attributes
  Accept_Parameters,
  Access_To_Subprogram_Parameter_Profile,
  Block_Declarative_Items,
  Body_Declarative_Items,
  Compilation_Pragmas,
  Context_Clause_Elements,
  Discriminants,
  Enumeration_Literal_Declarations,
  Generic_Formal_Part,
  Parameter_Profile,
  Private_Part_Declarative_Items,
  Private_Protected_Items,
  Private_Task_Items,
  Protected_Operation_Items,
  Record_Components,
  Variants,
  Visible_Part_Declarative_Items,
  Visible_Protected_Items,
  Visible_Task_Items,
  access_definition,
  access_to_function_definition,
  access_to_object_definition,
  access_to_procedure_definition,
  alt_record_definition,
  anonymous_access_to_function_definition,
  anonymous_access_to_object_definition,
  anonymous_access_to_procedure_definition,
  aspect_clause,
  at_clause,
  attribute_definition_clause,
  basic_declaration,
  basic_declarative_item,
  body_declaration,
  body_stub,
  choice_parameter_specification,
  compilation_unit,
  compilation_unit_body,
  compilation_unit_declaration,
  component_declaration,
  component_item,
  constrained_array_definition,
  context_item,
  decimal_fixed_point_definition,
  declarative_item,
  derived_record_definition,
  derived_type_definition,
  discriminant_part,
  discriminant_specification,
  element_iterator_specification,
  entry_body,
  entry_declaration,
  entry_index_specification,
  enumeration_literal_specification,
  enumeration_type_definition,
  exception_declaration,
  exception_renaming_declaration,
  floating_point_definition,
  formal_access_to_function_definition,
  formal_access_to_object_definition,
  formal_access_to_procedure_definition,
  formal_constrained_array_definition,
  formal_decimal_fixed_point_definition,
  formal_derived_type_definition,
  formal_discrete_type_definition,
  formal_floating_point_definition,
  formal_function_declaration,
  formal_incomplete_type_declaration,
  formal_interface_type_definition,
  formal_modular_type_definition,
  formal_object_declaration,
  formal_ordinary_fixed_point_definition,
  formal_package_declaration,
  formal_private_type_definition,
  formal_procedure_declaration,
  formal_signed_integer_type_definition,
  formal_type_declaration,
  formal_type_definition,
  formal_unconstrained_array_definition,
  full_type_declaration,
  function_body,
  function_declaration,
  function_instantiation,
  generalized_iterator_specification,
  generic_formal,
  generic_function_declaration,
  generic_function_renaming,
  generic_package_declaration,
  generic_package_renaming,
  generic_procedure_declaration,
  generic_procedure_renaming,
  incomplete_type_declaration,
  interface_type_definition,
  iterator_specification,
  known_discriminant_part,
  library_unit_declaration,
  loop_parameter_specification,
  modular_type_definition,
  null_component,
  null_record_definition,
  number_declaration,
  object_declaration,
  object_definition,
  object_renaming_declaration,
  ordinary_fixed_point_definition,
  package_body,
  package_body_stub,
  package_declaration,
  package_instantiation,
  package_renaming_declaration,
  parameter_specification,
  pragma_node,
  private_extension_declaration,
  private_extension_definition,
  private_type_declaration,
  private_type_definition,
  procedure_body,
  procedure_declaration,
  procedure_instantiation,
  proper_body,
  protected_body,
  protected_body_stub,
  protected_definition,
  protected_element_declaration,
  protected_operation_declaration,
  protected_operation_item,
  protected_type_declaration,
  record_definition,
  record_representation_clause,
  record_type_definition,
  return_object_specification,
  signed_integer_type_definition,
  single_protected_declaration,
  single_task_declaration,
  subtype_declaration,
  subtype_indication,
  subunit,
  task_body,
  task_body_stub,
  task_definition,
  task_item,
  task_type_declaration,
  type_definition,
  unconstrained_array_definition,
  units,
  unknown_discriminant_part,
  use_clause,
  use_package_clause,
  use_type_clause,
  variant,
  variant_part,
  with_clause
    : Gela.Semantic_Types.Env_Index : env_out;


Rules for Aborted_Tasks.name :
(.
      ${name.env_in} := ${Aborted_Tasks.env_in};
.)

Rules for Accept_Body_Exception_Handlers.exception_handler :
(.
      ${exception_handler.env_in} := ${Accept_Body_Exception_Handlers.env_in};
.)

Rules for Accept_Body_Statements.statement :
(.
      ${statement.env_in} := ${Accept_Body_Statements.env_in};
.)

Rules for Accept_Parameters.parameter_specification :
(.
      ${parameter_specification.env_in} := ${head.env_out};
.)

Rules for Accept_Parameters.parameter_specification :
(.
      ${Accept_Parameters.env_out} := ${Accept_Parameters.env_in};
.)

Rules for Accept_Parameters.parameter_specification :
(.
      ${Accept_Parameters.env_out} := ${parameter_specification.env_out};
.)

Rules for Access_To_Subprogram_Parameter_Profile.parameter_specification :
(.
      ${parameter_specification.env_in} := ${head.env_out};
.)

Rules for Access_To_Subprogram_Parameter_Profile.parameter_specification :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_out} := ${Access_To_Subprogram_Parameter_Profile.env_in};
.)

Rules for Access_To_Subprogram_Parameter_Profile.parameter_specification :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_out} := ${parameter_specification.env_out};
.)

Rules for Array_Component_Choices.discrete_choice :
(.
      ${discrete_choice.env_in} := ${Array_Component_Choices.env_in};
.)

Rules for Aspect_Specifications.aspect_specification :
(.
      ${aspect_specification.env_in} := ${Aspect_Specifications.env_in};
.)

Rules for Associations.association :
(.
      ${association.env_in} := ${Associations.env_in};
.)

Rules for Asynchronous_Statement_Paths.select_then_abort_path :
(.
      ${select_then_abort_path.env_in} := ${Asynchronous_Statement_Paths.env_in};
.)

Rules for Block_Declarative_Items.declarative_item :
(.
      ${declarative_item.env_in} := ${head.env_out};
.)

Rules for Block_Declarative_Items.declarative_item :
(.
      ${Block_Declarative_Items.env_out} := ${Block_Declarative_Items.env_in};
.)

Rules for Block_Declarative_Items.declarative_item :
(.
      ${Block_Declarative_Items.env_out} := ${declarative_item.env_out};
.)

Rules for Block_Exception_Handlers.exception_handler :
(.
      ${exception_handler.env_in} := ${Block_Exception_Handlers.env_in};
.)

Rules for Block_Statements.statement :
(.
      ${statement.env_in} := ${Block_Statements.env_in};
.)

Rules for Body_Declarative_Items.declarative_item :
(.
      ${declarative_item.env_in} := ${head.env_out};
.)

Rules for Body_Declarative_Items.declarative_item :
(.
      ${Body_Declarative_Items.env_out} := ${Body_Declarative_Items.env_in};
.)

Rules for Body_Declarative_Items.declarative_item :
(.
      ${Body_Declarative_Items.env_out} := ${declarative_item.env_out};
.)

Rules for Body_Exception_Handlers.exception_handler :
(.
      ${exception_handler.env_in} := ${Body_Exception_Handlers.env_in};
.)

Rules for Body_Statements.statement :
(.
      ${statement.env_in} := ${Body_Statements.env_in};
.)

Rules for Call_Statement_Parameters.parameter_association :
(.
      ${parameter_association.env_in} := ${Call_Statement_Parameters.env_in};
.)

Rules for Case_Expression_Paths.case_expression_path :
(.
      ${case_expression_path.env_in} := ${Case_Expression_Paths.env_in};
.)

Rules for Case_Path_Alternative_Choices.discrete_choice :
(.
      ${discrete_choice.env_in} := ${Case_Path_Alternative_Choices.env_in};
.)

Rules for Case_Statement_Alternative_Choices.discrete_choice :
(.
      ${discrete_choice.env_in} := ${Case_Statement_Alternative_Choices.env_in};
.)

Rules for Case_Statement_Paths.case_path :
(.
      ${case_path.env_in} := ${Case_Statement_Paths.env_in};
.)

Rules for Clause_Names.program_unit_name :
(.
      ${program_unit_name.env_in} := ${Clause_Names.env_in};
.)

Rules for Compilation_Pragmas.context_item :
(.
      ${context_item.env_in} := ${head.env_out};
.)

Rules for Compilation_Pragmas.context_item :
(.
      ${Compilation_Pragmas.env_out} := ${Compilation_Pragmas.env_in};
.)

Rules for Compilation_Pragmas.context_item :
(.
      ${Compilation_Pragmas.env_out} := ${context_item.env_out};
.)

Rules for Component_Clauses.clause_or_pragma :
(.
      ${clause_or_pragma.env_in} := ${Component_Clauses.env_in};
.)

Rules for Context_Clause_Elements.context_item :
(.
      ${context_item.env_in} := ${head.env_out};
.)

Rules for Context_Clause_Elements.context_item :
(.
      ${Context_Clause_Elements.env_out} := ${Context_Clause_Elements.env_in};
.)

Rules for Context_Clause_Elements.context_item :
(.
      ${Context_Clause_Elements.env_out} := ${context_item.env_out};
.)

Rules for Discrete_Subtype_Definitions.discrete_subtype_definition :
(.
      ${discrete_subtype_definition.env_in} := ${Discrete_Subtype_Definitions.env_in};
.)

Rules for Discriminants.discriminant_specification :
(.
      ${discriminant_specification.env_in} := ${head.env_out};
.)

Rules for Discriminants.discriminant_specification :
(.
      ${Discriminants.env_out} := ${Discriminants.env_in};
.)

Rules for Discriminants.discriminant_specification :
(.
      ${Discriminants.env_out} := ${discriminant_specification.env_out};
.)

Rules for Enumeration_Literal_Declarations.enumeration_literal_specification :
(.
      ${enumeration_literal_specification.env_in} := ${head.env_out};
.)

Rules for Enumeration_Literal_Declarations.enumeration_literal_specification :
(.
      ${Enumeration_Literal_Declarations.env_out} := ${Enumeration_Literal_Declarations.env_in};
.)

Rules for Enumeration_Literal_Declarations.enumeration_literal_specification :
(.
      ${Enumeration_Literal_Declarations.env_out} := ${enumeration_literal_specification.env_out};
.)

Rules for Exception_Choices.exception_choice :
(.
      ${exception_choice.env_in} := ${Exception_Choices.env_in};
.)

Rules for Expression_Paths.if_else_expression_path :
(.
      ${if_else_expression_path.env_in} := ${Expression_Paths.env_in};
.)

Rules for Extended_Return_Exception_Handlers.exception_handler :
(.
      ${exception_handler.env_in} := ${Extended_Return_Exception_Handlers.env_in};
.)

Rules for Extended_Return_Statements.statement :
(.
      ${statement.env_in} := ${Extended_Return_Statements.env_in};
.)

Rules for Generic_Actual_Part.generic_association :
(.
      ${generic_association.env_in} := ${Generic_Actual_Part.env_in};
.)

Rules for Generic_Formal_Part.generic_formal :
(.
      ${generic_formal.env_in} := ${head.env_out};
.)

Rules for Generic_Formal_Part.generic_formal :
(.
      ${Generic_Formal_Part.env_out} := ${Generic_Formal_Part.env_in};
.)

Rules for Generic_Formal_Part.generic_formal :
(.
      ${Generic_Formal_Part.env_out} := ${generic_formal.env_out};
.)

Rules for Handler_Statements.statement :
(.
      ${statement.env_in} := ${Handler_Statements.env_in};
.)

Rules for Index_Subtype_Definitions.subtype_mark :
(.
      ${subtype_mark.env_in} := ${Index_Subtype_Definitions.env_in};
.)

Rules for Label_Names.defining_identifier :
(.
      ${defining_identifier.env_in} := ${Label_Names.env_in};
.)

Rules for Loop_Statements.statement :
(.
      ${statement.env_in} := ${Loop_Statements.env_in};
.)

Rules for Membership_Test_Choices.membership_choice :
(.
      ${membership_choice.env_in} := ${Membership_Test_Choices.env_in};
.)

Rules for Names.defining_identifier :
(.
      ${defining_identifier.env_in} := ${Names.env_in};
.)

Rules for Parameter_Profile.parameter_specification :
(.
      ${parameter_specification.env_in} := ${head.env_out};
.)

Rules for Parameter_Profile.parameter_specification :
(.
      ${Parameter_Profile.env_out} := ${Parameter_Profile.env_in};
.)

Rules for Parameter_Profile.parameter_specification :
(.
      ${Parameter_Profile.env_out} := ${parameter_specification.env_out};
.)

Rules for Pragma_Argument_Associations.pragma_argument_association :
(.
      ${pragma_argument_association.env_in} := ${Pragma_Argument_Associations.env_in};
.)

Rules for Private_Part_Declarative_Items.basic_declarative_item :
(.
      ${basic_declarative_item.env_in} := ${head.env_out};
.)

Rules for Private_Part_Declarative_Items.basic_declarative_item :
(.
      ${Private_Part_Declarative_Items.env_out} := ${Private_Part_Declarative_Items.env_in};
.)

Rules for Private_Part_Declarative_Items.basic_declarative_item :
(.
      ${Private_Part_Declarative_Items.env_out} := ${basic_declarative_item.env_out};
.)

Rules for Private_Protected_Items.protected_element_declaration :
(.
      ${protected_element_declaration.env_in} := ${head.env_out};
.)

Rules for Private_Protected_Items.protected_element_declaration :
(.
      ${Private_Protected_Items.env_out} := ${Private_Protected_Items.env_in};
.)

Rules for Private_Protected_Items.protected_element_declaration :
(.
      ${Private_Protected_Items.env_out} := ${protected_element_declaration.env_out};
.)

Rules for Private_Task_Items.task_item :
(.
      ${task_item.env_in} := ${head.env_out};
.)

Rules for Private_Task_Items.task_item :
(.
      ${Private_Task_Items.env_out} := ${Private_Task_Items.env_in};
.)

Rules for Private_Task_Items.task_item :
(.
      ${Private_Task_Items.env_out} := ${task_item.env_out};
.)

Rules for Progenitor_List.subtype_mark :
(.
      ${subtype_mark.env_in} := ${Progenitor_List.env_in};
.)

Rules for Protected_Operation_Items.protected_operation_item :
(.
      ${protected_operation_item.env_in} := ${head.env_out};
.)

Rules for Protected_Operation_Items.protected_operation_item :
(.
      ${Protected_Operation_Items.env_out} := ${Protected_Operation_Items.env_in};
.)

Rules for Protected_Operation_Items.protected_operation_item :
(.
      ${Protected_Operation_Items.env_out} := ${protected_operation_item.env_out};
.)

Rules for Record_Component_Associations.association :
(.
      ${association.env_in} := ${Record_Component_Associations.env_in};
.)

Rules for Record_Components.component_item :
(.
      ${component_item.env_in} := ${head.env_out};
.)

Rules for Record_Components.component_item :
(.
      ${Record_Components.env_out} := ${Record_Components.env_in};
.)

Rules for Record_Components.component_item :
(.
      ${Record_Components.env_out} := ${component_item.env_out};
.)

Rules for Selective_Statement_Paths.select_or_else_path :
(.
      ${select_or_else_path.env_in} := ${Selective_Statement_Paths.env_in};
.)

Rules for Sequence_Of_Statements.statement :
(.
      ${statement.env_in} := ${Sequence_Of_Statements.env_in};
.)

Rules for Statement_Paths.if_elsif_else_path :
(.
      ${if_elsif_else_path.env_in} := ${Statement_Paths.env_in};
.)

Rules for Type_Clause_Names.subtype_mark :
(.
      ${subtype_mark.env_in} := ${Type_Clause_Names.env_in};
.)

Rules for Variant_Choices.discrete_choice :
(.
      ${discrete_choice.env_in} := ${Variant_Choices.env_in};
.)

Rules for Variants.variant :
(.
      ${variant.env_in} := ${head.env_out};
.)

Rules for Variants.variant :
(.
      ${Variants.env_out} := ${Variants.env_in};
.)

Rules for Variants.variant :
(.
      ${Variants.env_out} := ${variant.env_out};
.)

Rules for Visible_Part_Declarative_Items.basic_declarative_item :
(.
      ${basic_declarative_item.env_in} := ${head.env_out};
.)

Rules for Visible_Part_Declarative_Items.basic_declarative_item :
(.
      ${Visible_Part_Declarative_Items.env_out} := ${Visible_Part_Declarative_Items.env_in};
.)

Rules for Visible_Part_Declarative_Items.basic_declarative_item :
(.
      ${Visible_Part_Declarative_Items.env_out} := ${basic_declarative_item.env_out};
.)

Rules for Visible_Protected_Items.protected_operation_declaration :
(.
      ${protected_operation_declaration.env_in} := ${head.env_out};
.)

Rules for Visible_Protected_Items.protected_operation_declaration :
(.
      ${Visible_Protected_Items.env_out} := ${Visible_Protected_Items.env_in};
.)

Rules for Visible_Protected_Items.protected_operation_declaration :
(.
      ${Visible_Protected_Items.env_out} := ${protected_operation_declaration.env_out};
.)

Rules for Visible_Task_Items.task_item :
(.
      ${task_item.env_in} := ${head.env_out};
.)

Rules for Visible_Task_Items.task_item :
(.
      ${Visible_Task_Items.env_out} := ${Visible_Task_Items.env_in};
.)

Rules for Visible_Task_Items.task_item :
(.
      ${Visible_Task_Items.env_out} := ${task_item.env_out};
.)

Rules for abort_statement. :
(.
      ${Aborted_Tasks.env_in} := ${abort_statement.env_in};
.)

Rules for accept_statement. :
(.
      ${Accept_Entry_Direct_Name.env_in} := ${accept_statement.env_in};
.)

Rules for accept_statement. :
(.
      ${Accept_Entry_Index.env_in} := ${accept_statement.env_in};
.)

Rules for accept_statement. :
(.
      ${Accept_Parameters.env_in} := ${accept_statement.env_in};
.)

Rules for accept_statement. :
(.
      ${Accept_Body_Statements.env_in} := ${accept_statement.env_in};
.)

Rules for accept_statement. :
(.
      ${Accept_Body_Exception_Handlers.env_in} := ${accept_statement.env_in};
.)

Rules for access_to_function_definition. :
(.
      ${access_to_function_definition.env_out} := ${access_to_function_definition.env_in};
.)

Rules for access_to_function_definition. :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_in} := ${access_to_function_definition.env_in};
.)

Rules for access_to_function_definition. :
(.
      ${Access_To_Function_Result_Subtype.env_in} := ${access_to_function_definition.env_in};
.)

Rules for access_to_object_definition. :
(.
      ${access_to_object_definition.env_out} := ${access_to_object_definition.env_in};
.)

Rules for access_to_object_definition. :
(.
      ${subtype_indication.env_in} := ${access_to_object_definition.env_in};
.)

Rules for access_to_procedure_definition. :
(.
      ${access_to_procedure_definition.env_out} := ${access_to_procedure_definition.env_in};
.)

Rules for access_to_procedure_definition. :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_in} := ${access_to_procedure_definition.env_in};
.)

Rules for allocator. :
(.
      ${Subpool_Name.env_in} := ${allocator.env_in};
.)

Rules for allocator. :
(.
      ${Subtype_Or_Expression.env_in} := ${allocator.env_in};
.)

Rules for anonymous_access_to_function_definition. :
(.
      ${anonymous_access_to_function_definition.env_out} := ${anonymous_access_to_function_definition.env_in};
.)

Rules for anonymous_access_to_function_definition. :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_in} := ${anonymous_access_to_function_definition.env_in};
.)

Rules for anonymous_access_to_function_definition. :
(.
      ${Access_To_Function_Result_Subtype.env_in} := ${anonymous_access_to_function_definition.env_in};
.)

Rules for anonymous_access_to_object_definition. :
(.
      ${anonymous_access_to_object_definition.env_out} := ${anonymous_access_to_object_definition.env_in};
.)

Rules for anonymous_access_to_object_definition. :
(.
      ${Anonymous_Access_To_Object_Subtype_Mark.env_in} := ${anonymous_access_to_object_definition.env_in};
.)

Rules for anonymous_access_to_procedure_definition. :
(.
      ${anonymous_access_to_procedure_definition.env_out} := ${anonymous_access_to_procedure_definition.env_in};
.)

Rules for anonymous_access_to_procedure_definition. :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_in} := ${anonymous_access_to_procedure_definition.env_in};
.)

Rules for aspect_specification. :
(.
      ${Aspect_Mark.env_in} := ${aspect_specification.env_in};
.)

Rules for aspect_specification. :
(.
      ${Aspect_Definition.env_in} := ${aspect_specification.env_in};
.)

Rules for assignment_statement. :
(.
      ${Assignment_Variable_Name.env_in} := ${assignment_statement.env_in};
.)

Rules for assignment_statement. :
(.
      ${Assignment_Expression.env_in} := ${assignment_statement.env_in};
.)

Rules for association. :
(.
      ${Array_Component_Choices.env_in} := ${association.env_in};
.)

Rules for association. :
(.
      ${Component_Expression.env_in} := ${association.env_in};
.)

Rules for asynchronous_select. :
(.
      ${Asynchronous_Statement_Paths.env_in} := ${asynchronous_select.env_in};
.)

Rules for at_clause. :
(.
      ${at_clause.env_out} := ${at_clause.env_in};
.)

Rules for at_clause. :
(.
      ${Representation_Clause_Name.env_in} := ${at_clause.env_in};
.)

Rules for at_clause. :
(.
      ${Representation_Clause_Expression.env_in} := ${at_clause.env_in};
.)

Rules for attribute_definition_clause. :
(.
      ${attribute_definition_clause.env_out} := ${attribute_definition_clause.env_in};
.)

Rules for attribute_definition_clause. :
(.
      ${Representation_Clause_Name.env_in} := ${attribute_definition_clause.env_in};
.)

Rules for attribute_definition_clause. :
(.
      ${Representation_Clause_Expression.env_in} := ${attribute_definition_clause.env_in};
.)

Rules for attribute_reference. :
(.
      ${prefix.env_in} := ${attribute_reference.env_in};
.)

Rules for attribute_reference. :
(.
      ${Attribute_Designator_Identifier.env_in} := ${attribute_reference.env_in};
.)

Rules for attribute_reference. :
(.
      ${Attribute_Designator_Expressions.env_in} := ${attribute_reference.env_in};
.)

Rules for block_statement. :
(.
      ${Block_Declarative_Items.env_in} := ${block_statement.env_in};
.)

Rules for block_statement. :
(.
      ${Block_Statements.env_in} := ${block_statement.env_in};
.)

Rules for block_statement. :
(.
      ${Block_Exception_Handlers.env_in} := ${block_statement.env_in};
.)

Rules for case_expression. :
(.
      ${expression.env_in} := ${case_expression.env_in};
.)

Rules for case_expression. :
(.
      ${Case_Expression_Paths.env_in} := ${case_expression.env_in};
.)

Rules for case_expression_path. :
(.
      ${Case_Path_Alternative_Choices.env_in} := ${case_expression_path.env_in};
.)

Rules for case_expression_path. :
(.
      ${Dependent_Expression.env_in} := ${case_expression_path.env_in};
.)

Rules for case_path. :
(.
      ${Case_Statement_Alternative_Choices.env_in} := ${case_path.env_in};
.)

Rules for case_path. :
(.
      ${Sequence_Of_Statements.env_in} := ${case_path.env_in};
.)

Rules for case_statement. :
(.
      ${Case_Expression.env_in} := ${case_statement.env_in};
.)

Rules for case_statement. :
(.
      ${Case_Statement_Paths.env_in} := ${case_statement.env_in};
.)

Rules for choice_parameter_specification.Names :
(.
      ${choice_parameter_specification.env_out} := ${choice_parameter_specification.env_in};
.)

Rules for choice_parameter_specification.Names :
(.
      ${Names.env_in} := ${choice_parameter_specification.env_in};
.)

Rules for compilation_unit_body. :
(.
      ${compilation_unit_body.env_out} := ${compilation_unit_body.env_in};
.)

Rules for compilation_unit_body. :
(.
      ${Context_Clause_Elements.env_in} := ${compilation_unit_body.env_in};
.)

Rules for compilation_unit_body. :
(.
      ${Unit_Declaration.env_in} := ${compilation_unit_body.env_in};
.)

Rules for compilation_unit_declaration. :
(.
      ${compilation_unit_declaration.env_out} := ${compilation_unit_declaration.env_in};
.)

Rules for compilation_unit_declaration. :
(.
      ${Context_Clause_Elements.env_in} := ${compilation_unit_declaration.env_in};
.)

Rules for compilation_unit_declaration. :
(.
      ${Unit_Declaration.env_in} := ${compilation_unit_declaration.env_in};
.)

Rules for component_clause. :
(.
      ${Representation_Clause_Name.env_in} := ${component_clause.env_in};
.)

Rules for component_clause. :
(.
      ${Component_Clause_Position.env_in} := ${component_clause.env_in};
.)

Rules for component_clause. :
(.
      ${Component_Clause_Range.env_in} := ${component_clause.env_in};
.)

Rules for component_declaration. :
(.
      ${component_declaration.env_out} := ${component_declaration.env_in};
.)

Rules for component_declaration. :
(.
      ${Names.env_in} := ${component_declaration.env_in};
.)

Rules for component_declaration. :
(.
      ${Object_Declaration_Subtype.env_in} := ${component_declaration.env_in};
.)

Rules for component_declaration. :
(.
      ${Initialization_Expression.env_in} := ${component_declaration.env_in};
.)

Rules for component_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${component_declaration.env_in};
.)

Rules for component_definition. :
(.
      ${Component_Subtype_Indication.env_in} := ${component_definition.env_in};
.)

Rules for composite_constraint. :
(.
      ${Associations.env_in} := ${composite_constraint.env_in};
.)

Rules for constrained_array_definition. :
(.
      ${constrained_array_definition.env_out} := ${constrained_array_definition.env_in};
.)

Rules for constrained_array_definition. :
(.
      ${Discrete_Subtype_Definitions.env_in} := ${constrained_array_definition.env_in};
.)

Rules for constrained_array_definition. :
(.
      ${Array_Component_Definition.env_in} := ${constrained_array_definition.env_in};
.)

Rules for decimal_fixed_point_definition. :
(.
      ${decimal_fixed_point_definition.env_out} := ${decimal_fixed_point_definition.env_in};
.)

Rules for decimal_fixed_point_definition. :
(.
      ${Delta_Expression.env_in} := ${decimal_fixed_point_definition.env_in};
.)

Rules for decimal_fixed_point_definition. :
(.
      ${Digits_Expression.env_in} := ${decimal_fixed_point_definition.env_in};
.)

Rules for decimal_fixed_point_definition. :
(.
      ${Real_Range_Constraint.env_in} := ${decimal_fixed_point_definition.env_in};
.)

Rules for defining_expanded_unit_name. :
(.
      ${Defining_Prefix.env_in} := ${defining_expanded_unit_name.env_in};
.)

Rules for defining_expanded_unit_name. :
(.
      ${Defining_Selector.env_in} := ${defining_expanded_unit_name.env_in};
.)

Rules for delay_statement. :
(.
      ${Delay_Expression.env_in} := ${delay_statement.env_in};
.)

Rules for delta_constraint. :
(.
      ${Delta_Expression.env_in} := ${delta_constraint.env_in};
.)

Rules for delta_constraint. :
(.
      ${Real_Range_Constraint.env_in} := ${delta_constraint.env_in};
.)

Rules for derived_record_definition. :
(.
      ${derived_record_definition.env_out} := ${derived_record_definition.env_in};
.)

Rules for derived_record_definition. :
(.
      ${Parent_Subtype_Indication.env_in} := ${derived_record_definition.env_in};
.)

Rules for derived_record_definition. :
(.
      ${Progenitor_List.env_in} := ${derived_record_definition.env_in};
.)

Rules for derived_record_definition. :
(.
      ${Record_Definition.env_in} := ${derived_record_definition.env_in};
.)

Rules for derived_type_definition. :
(.
      ${derived_type_definition.env_out} := ${derived_type_definition.env_in};
.)

Rules for derived_type_definition. :
(.
      ${Parent_Subtype_Indication.env_in} := ${derived_type_definition.env_in};
.)

Rules for digits_constraint. :
(.
      ${Digits_Expression.env_in} := ${digits_constraint.env_in};
.)

Rules for digits_constraint. :
(.
      ${Real_Range_Constraint.env_in} := ${digits_constraint.env_in};
.)

Rules for discrete_range_attribute_reference.Range_Attribute :
(.
      ${Range_Attribute.env_in} := ${discrete_range_attribute_reference.env_in};
.)

Rules for discrete_simple_expression_range. :
(.
      ${Lower_Bound.env_in} := ${discrete_simple_expression_range.env_in};
.)

Rules for discrete_simple_expression_range. :
(.
      ${Upper_Bound.env_in} := ${discrete_simple_expression_range.env_in};
.)

Rules for discrete_subtype_indication. :
(.
      ${Subtype_Mark.env_in} := ${discrete_subtype_indication.env_in};
.)

Rules for discrete_subtype_indication. :
(.
      ${Subtype_Constraint.env_in} := ${discrete_subtype_indication.env_in};
.)

Rules for discrete_subtype_indication_dr. :
(.
      ${Subtype_Mark.env_in} := ${discrete_subtype_indication_dr.env_in};
.)

Rules for discrete_subtype_indication_dr. :
(.
      ${Subtype_Constraint.env_in} := ${discrete_subtype_indication_dr.env_in};
.)

Rules for discriminant_specification. :
(.
      ${discriminant_specification.env_out} := ${discriminant_specification.env_in};
.)

Rules for discriminant_specification. :
(.
      ${Names.env_in} := ${discriminant_specification.env_in};
.)

Rules for discriminant_specification. :
(.
      ${Object_Declaration_Subtype.env_in} := ${discriminant_specification.env_in};
.)

Rules for discriminant_specification. :
(.
      ${Initialization_Expression.env_in} := ${discriminant_specification.env_in};
.)

Rules for element_iterator_specification. :
(.
      ${element_iterator_specification.env_out} := ${element_iterator_specification.env_in};
.)

Rules for element_iterator_specification. :
(.
      ${Names.env_in} := ${element_iterator_specification.env_in};
.)

Rules for element_iterator_specification. :
(.
      ${subtype_indication.env_in} := ${element_iterator_specification.env_in};
.)

Rules for element_iterator_specification. :
(.
      ${Iteration_Scheme_Name.env_in} := ${element_iterator_specification.env_in};
.)

Rules for else_expression_path. :
(.
      ${Dependent_Expression.env_in} := ${else_expression_path.env_in};
.)

Rules for else_path. :
(.
      ${Sequence_Of_Statements.env_in} := ${else_path.env_in};
.)

Rules for elsif_expression_path. :
(.
      ${Condition_Expression.env_in} := ${elsif_expression_path.env_in};
.)

Rules for elsif_expression_path. :
(.
      ${Dependent_Expression.env_in} := ${elsif_expression_path.env_in};
.)

Rules for elsif_path. :
(.
      ${Condition_Expression.env_in} := ${elsif_path.env_in};
.)

Rules for elsif_path. :
(.
      ${Sequence_Of_Statements.env_in} := ${elsif_path.env_in};
.)

Rules for entry_body. :
(.
      ${entry_body.env_out} := ${entry_body.env_in};
.)

Rules for entry_body. :
(.
      ${Names.env_in} := ${entry_body.env_in};
.)

Rules for entry_body. :
(.
      ${Entry_Index_Specification.env_in} := ${entry_body.env_in};
.)

Rules for entry_body. :
(.
      ${Parameter_Profile.env_in} := ${entry_body.env_in};
.)

Rules for entry_body. :
(.
      ${Entry_Barrier.env_in} := ${entry_body.env_in};
.)

Rules for entry_body. :
(.
      ${Body_Declarative_Items.env_in} := ${entry_body.env_in};
.)

Rules for entry_body. :
(.
      ${Body_Statements.env_in} := ${entry_body.env_in};
.)

Rules for entry_body. :
(.
      ${Body_Exception_Handlers.env_in} := ${entry_body.env_in};
.)

Rules for entry_declaration. :
(.
      ${entry_declaration.env_out} := ${entry_declaration.env_in};
.)

Rules for entry_declaration. :
(.
      ${Names.env_in} := ${entry_declaration.env_in};
.)

Rules for entry_declaration. :
(.
      ${Entry_Family_Definition.env_in} := ${entry_declaration.env_in};
.)

Rules for entry_declaration. :
(.
      ${Parameter_Profile.env_in} := ${entry_declaration.env_in};
.)

Rules for entry_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${entry_declaration.env_in};
.)

Rules for entry_index_specification. :
(.
      ${entry_index_specification.env_out} := ${entry_index_specification.env_in};
.)

Rules for entry_index_specification. :
(.
      ${Names.env_in} := ${entry_index_specification.env_in};
.)

Rules for entry_index_specification. :
(.
      ${Specification_Subtype_Definition.env_in} := ${entry_index_specification.env_in};
.)

Rules for enumeration_literal_specification.Names :
(.
      ${enumeration_literal_specification.env_out} := ${enumeration_literal_specification.env_in};
.)

Rules for enumeration_literal_specification.Names :
(.
      ${Names.env_in} := ${enumeration_literal_specification.env_in};
.)

Rules for enumeration_type_definition. :
(.
      ${enumeration_type_definition.env_out} := ${enumeration_type_definition.env_in};
.)

Rules for enumeration_type_definition. :
(.
      ${Enumeration_Literal_Declarations.env_in} := ${enumeration_type_definition.env_in};
.)

Rules for exception_declaration. :
(.
      ${exception_declaration.env_out} := ${exception_declaration.env_in};
.)

Rules for exception_declaration. :
(.
      ${Names.env_in} := ${exception_declaration.env_in};
.)

Rules for exception_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${exception_declaration.env_in};
.)

Rules for exception_handler. :
(.
      ${Choice_Parameter_Specification.env_in} := ${exception_handler.env_in};
.)

Rules for exception_handler. :
(.
      ${Exception_Choices.env_in} := ${exception_handler.env_in};
.)

Rules for exception_handler. :
(.
      ${Handler_Statements.env_in} := ${exception_handler.env_in};
.)

Rules for exception_renaming_declaration. :
(.
      ${exception_renaming_declaration.env_out} := ${exception_renaming_declaration.env_in};
.)

Rules for exception_renaming_declaration. :
(.
      ${Names.env_in} := ${exception_renaming_declaration.env_in};
.)

Rules for exception_renaming_declaration. :
(.
      ${Renamed_Entity.env_in} := ${exception_renaming_declaration.env_in};
.)

Rules for exception_renaming_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${exception_renaming_declaration.env_in};
.)

Rules for exit_statement. :
(.
      ${Exit_Loop_Name.env_in} := ${exit_statement.env_in};
.)

Rules for exit_statement. :
(.
      ${Exit_Condition.env_in} := ${exit_statement.env_in};
.)

Rules for explicit_dereference. :
(.
      ${Prefix.env_in} := ${explicit_dereference.env_in};
.)

Rules for extended_return_statement. :
(.
      ${Return_Object_Specification.env_in} := ${extended_return_statement.env_in};
.)

Rules for extended_return_statement. :
(.
      ${Extended_Return_Statements.env_in} := ${extended_return_statement.env_in};
.)

Rules for extended_return_statement. :
(.
      ${Extended_Return_Exception_Handlers.env_in} := ${extended_return_statement.env_in};
.)

Rules for extension_aggregate. :
(.
      ${Extension_Aggregate_Expression.env_in} := ${extension_aggregate.env_in};
.)

Rules for extension_aggregate. :
(.
      ${Record_Component_Associations.env_in} := ${extension_aggregate.env_in};
.)

Rules for floating_point_definition. :
(.
      ${floating_point_definition.env_out} := ${floating_point_definition.env_in};
.)

Rules for floating_point_definition. :
(.
      ${Digits_Expression.env_in} := ${floating_point_definition.env_in};
.)

Rules for floating_point_definition. :
(.
      ${Real_Range_Constraint.env_in} := ${floating_point_definition.env_in};
.)

Rules for for_loop_statement. :
(.
      ${Loop_Parameter_Specification.env_in} := ${for_loop_statement.env_in};
.)

Rules for for_loop_statement. :
(.
      ${Loop_Statements.env_in} := ${for_loop_statement.env_in};
.)

Rules for formal_access_to_function_definition. :
(.
      ${formal_access_to_function_definition.env_out} := ${formal_access_to_function_definition.env_in};
.)

Rules for formal_access_to_function_definition. :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_in} := ${formal_access_to_function_definition.env_in};
.)

Rules for formal_access_to_function_definition. :
(.
      ${Access_To_Function_Result_Subtype.env_in} := ${formal_access_to_function_definition.env_in};
.)

Rules for formal_access_to_object_definition. :
(.
      ${formal_access_to_object_definition.env_out} := ${formal_access_to_object_definition.env_in};
.)

Rules for formal_access_to_object_definition. :
(.
      ${subtype_indication.env_in} := ${formal_access_to_object_definition.env_in};
.)

Rules for formal_access_to_procedure_definition. :
(.
      ${formal_access_to_procedure_definition.env_out} := ${formal_access_to_procedure_definition.env_in};
.)

Rules for formal_access_to_procedure_definition. :
(.
      ${Access_To_Subprogram_Parameter_Profile.env_in} := ${formal_access_to_procedure_definition.env_in};
.)

Rules for formal_constrained_array_definition. :
(.
      ${formal_constrained_array_definition.env_out} := ${formal_constrained_array_definition.env_in};
.)

Rules for formal_constrained_array_definition. :
(.
      ${Discrete_Subtype_Definitions.env_in} := ${formal_constrained_array_definition.env_in};
.)

Rules for formal_constrained_array_definition. :
(.
      ${Array_Component_Definition.env_in} := ${formal_constrained_array_definition.env_in};
.)

Rules for formal_decimal_fixed_point_definition. :
(.
      ${formal_decimal_fixed_point_definition.env_out} := ${formal_decimal_fixed_point_definition.env_in};
.)

Rules for formal_derived_type_definition. :
(.
      ${formal_derived_type_definition.env_out} := ${formal_derived_type_definition.env_in};
.)

Rules for formal_derived_type_definition. :
(.
      ${Subtype_Mark.env_in} := ${formal_derived_type_definition.env_in};
.)

Rules for formal_derived_type_definition. :
(.
      ${Progenitor_List.env_in} := ${formal_derived_type_definition.env_in};
.)

Rules for formal_derived_type_definition. :
(.
      ${Aspect_Specifications.env_in} := ${formal_derived_type_definition.env_in};
.)

Rules for formal_discrete_type_definition. :
(.
      ${formal_discrete_type_definition.env_out} := ${formal_discrete_type_definition.env_in};
.)

Rules for formal_floating_point_definition. :
(.
      ${formal_floating_point_definition.env_out} := ${formal_floating_point_definition.env_in};
.)

Rules for formal_function_declaration. :
(.
      ${formal_function_declaration.env_out} := ${formal_function_declaration.env_in};
.)

Rules for formal_function_declaration. :
(.
      ${Names.env_in} := ${formal_function_declaration.env_in};
.)

Rules for formal_function_declaration. :
(.
      ${Parameter_Profile.env_in} := ${formal_function_declaration.env_in};
.)

Rules for formal_function_declaration. :
(.
      ${Result_Subtype.env_in} := ${formal_function_declaration.env_in};
.)

Rules for formal_function_declaration. :
(.
      ${Formal_Subprogram_Default.env_in} := ${formal_function_declaration.env_in};
.)

Rules for formal_function_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${formal_function_declaration.env_in};
.)

Rules for formal_incomplete_type_declaration. :
(.
      ${formal_incomplete_type_declaration.env_out} := ${formal_incomplete_type_declaration.env_in};
.)

Rules for formal_incomplete_type_declaration. :
(.
      ${Names.env_in} := ${formal_incomplete_type_declaration.env_in};
.)

Rules for formal_incomplete_type_declaration. :
(.
      ${Discriminant_Part.env_in} := ${formal_incomplete_type_declaration.env_in};
.)

Rules for formal_interface_type_definition. :
(.
      ${formal_interface_type_definition.env_out} := ${formal_interface_type_definition.env_in};
.)

Rules for formal_interface_type_definition. :
(.
      ${Progenitor_List.env_in} := ${formal_interface_type_definition.env_in};
.)

Rules for formal_modular_type_definition. :
(.
      ${formal_modular_type_definition.env_out} := ${formal_modular_type_definition.env_in};
.)

Rules for formal_object_declaration. :
(.
      ${formal_object_declaration.env_out} := ${formal_object_declaration.env_in};
.)

Rules for formal_object_declaration. :
(.
      ${Names.env_in} := ${formal_object_declaration.env_in};
.)

Rules for formal_object_declaration. :
(.
      ${Object_Declaration_Subtype.env_in} := ${formal_object_declaration.env_in};
.)

Rules for formal_object_declaration. :
(.
      ${Initialization_Expression.env_in} := ${formal_object_declaration.env_in};
.)

Rules for formal_object_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${formal_object_declaration.env_in};
.)

Rules for formal_ordinary_fixed_point_definition. :
(.
      ${formal_ordinary_fixed_point_definition.env_out} := ${formal_ordinary_fixed_point_definition.env_in};
.)

Rules for formal_package_declaration. :
(.
      ${formal_package_declaration.env_out} := ${formal_package_declaration.env_in};
.)

Rules for formal_package_declaration. :
(.
      ${Names.env_in} := ${formal_package_declaration.env_in};
.)

Rules for formal_package_declaration. :
(.
      ${Generic_Unit_Name.env_in} := ${formal_package_declaration.env_in};
.)

Rules for formal_package_declaration. :
(.
      ${Generic_Actual_Part.env_in} := ${formal_package_declaration.env_in};
.)

Rules for formal_package_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${formal_package_declaration.env_in};
.)

Rules for formal_private_type_definition. :
(.
      ${formal_private_type_definition.env_out} := ${formal_private_type_definition.env_in};
.)

Rules for formal_procedure_declaration. :
(.
      ${formal_procedure_declaration.env_out} := ${formal_procedure_declaration.env_in};
.)

Rules for formal_procedure_declaration. :
(.
      ${Names.env_in} := ${formal_procedure_declaration.env_in};
.)

Rules for formal_procedure_declaration. :
(.
      ${Parameter_Profile.env_in} := ${formal_procedure_declaration.env_in};
.)

Rules for formal_procedure_declaration. :
(.
      ${Formal_Subprogram_Default.env_in} := ${formal_procedure_declaration.env_in};
.)

Rules for formal_procedure_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${formal_procedure_declaration.env_in};
.)

Rules for formal_signed_integer_type_definition. :
(.
      ${formal_signed_integer_type_definition.env_out} := ${formal_signed_integer_type_definition.env_in};
.)

Rules for formal_type_declaration. :
(.
      ${formal_type_declaration.env_out} := ${formal_type_declaration.env_in};
.)

Rules for formal_type_declaration. :
(.
      ${Names.env_in} := ${formal_type_declaration.env_in};
.)

Rules for formal_type_declaration. :
(.
      ${Discriminant_Part.env_in} := ${formal_type_declaration.env_in};
.)

Rules for formal_type_declaration. :
(.
      ${Type_Declaration_View.env_in} := ${formal_type_declaration.env_in};
.)

Rules for formal_type_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${formal_type_declaration.env_in};
.)

Rules for formal_unconstrained_array_definition. :
(.
      ${formal_unconstrained_array_definition.env_out} := ${formal_unconstrained_array_definition.env_in};
.)

Rules for formal_unconstrained_array_definition. :
(.
      ${Index_Subtype_Definitions.env_in} := ${formal_unconstrained_array_definition.env_in};
.)

Rules for formal_unconstrained_array_definition. :
(.
      ${Array_Component_Definition.env_in} := ${formal_unconstrained_array_definition.env_in};
.)

Rules for full_type_declaration. :
(.
      ${full_type_declaration.env_out} := ${full_type_declaration.env_in};
.)

Rules for full_type_declaration. :
(.
      ${Names.env_in} := ${full_type_declaration.env_in};
.)

Rules for full_type_declaration. :
(.
      ${Discriminant_Part.env_in} := ${full_type_declaration.env_in};
.)

Rules for full_type_declaration. :
(.
      ${Type_Declaration_View.env_in} := ${full_type_declaration.env_in};
.)

Rules for full_type_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${full_type_declaration.env_in};
.)

Rules for function_body. :
(.
      ${function_body.env_out} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${Names.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${Parameter_Profile.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${Result_Subtype.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${Aspect_Specifications.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${Body_Declarative_Items.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${Body_Statements.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${Body_Exception_Handlers.env_in} := ${function_body.env_in};
.)

Rules for function_body. :
(.
      ${end_name.env_in} := ${function_body.env_in};
.)

Rules for function_call. :
(.
      ${prefix.env_in} := ${function_call.env_in};
.)

Rules for function_call. :
(.
      ${Function_Call_Parameters.env_in} := ${function_call.env_in};
.)

Rules for function_declaration. :
(.
      ${function_declaration.env_out} := ${function_declaration.env_in};
.)

Rules for function_declaration. :
(.
      ${Names.env_in} := ${function_declaration.env_in};
.)

Rules for function_declaration. :
(.
      ${Parameter_Profile.env_in} := ${function_declaration.env_in};
.)

Rules for function_declaration. :
(.
      ${Result_Subtype.env_in} := ${function_declaration.env_in};
.)

Rules for function_declaration. :
(.
      ${Result_Expression.env_in} := ${function_declaration.env_in};
.)

Rules for function_declaration. :
(.
      ${Renamed_Entity.env_in} := ${function_declaration.env_in};
.)

Rules for function_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${function_declaration.env_in};
.)

Rules for function_instantiation. :
(.
      ${function_instantiation.env_out} := ${function_instantiation.env_in};
.)

Rules for function_instantiation. :
(.
      ${Names.env_in} := ${function_instantiation.env_in};
.)

Rules for function_instantiation. :
(.
      ${Generic_Unit_Name.env_in} := ${function_instantiation.env_in};
.)

Rules for function_instantiation. :
(.
      ${Generic_Actual_Part.env_in} := ${function_instantiation.env_in};
.)

Rules for function_instantiation. :
(.
      ${Aspect_Specifications.env_in} := ${function_instantiation.env_in};
.)

Rules for generalized_iterator_specification. :
(.
      ${generalized_iterator_specification.env_out} := ${generalized_iterator_specification.env_in};
.)

Rules for generalized_iterator_specification. :
(.
      ${Names.env_in} := ${generalized_iterator_specification.env_in};
.)

Rules for generalized_iterator_specification. :
(.
      ${Iteration_Scheme_Name.env_in} := ${generalized_iterator_specification.env_in};
.)

Rules for generic_association. :
(.
      ${Formal_Parameter.env_in} := ${generic_association.env_in};
.)

Rules for generic_association. :
(.
      ${Actual_Parameter.env_in} := ${generic_association.env_in};
.)

Rules for generic_function_declaration. :
(.
      ${generic_function_declaration.env_out} := ${generic_function_declaration.env_in};
.)

Rules for generic_function_declaration. :
(.
      ${Generic_Formal_Part.env_in} := ${generic_function_declaration.env_in};
.)

Rules for generic_function_declaration. :
(.
      ${Names.env_in} := ${generic_function_declaration.env_in};
.)

Rules for generic_function_declaration. :
(.
      ${Parameter_Profile.env_in} := ${generic_function_declaration.env_in};
.)

Rules for generic_function_declaration. :
(.
      ${Result_Subtype.env_in} := ${generic_function_declaration.env_in};
.)

Rules for generic_function_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${generic_function_declaration.env_in};
.)

Rules for generic_function_renaming. :
(.
      ${generic_function_renaming.env_out} := ${generic_function_renaming.env_in};
.)

Rules for generic_function_renaming. :
(.
      ${Generic_Formal_Part.env_in} := ${generic_function_renaming.env_in};
.)

Rules for generic_function_renaming. :
(.
      ${Names.env_in} := ${generic_function_renaming.env_in};
.)

Rules for generic_function_renaming. :
(.
      ${Renamed_Entity.env_in} := ${generic_function_renaming.env_in};
.)

Rules for generic_function_renaming. :
(.
      ${Aspect_Specifications.env_in} := ${generic_function_renaming.env_in};
.)

Rules for generic_package_declaration. :
(.
      ${generic_package_declaration.env_out} := ${generic_package_declaration.env_in};
.)

Rules for generic_package_declaration. :
(.
      ${Generic_Formal_Part.env_in} := ${generic_package_declaration.env_in};
.)

Rules for generic_package_declaration. :
(.
      ${Names.env_in} := ${generic_package_declaration.env_in};
.)

Rules for generic_package_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${generic_package_declaration.env_in};
.)

Rules for generic_package_declaration. :
(.
      ${Visible_Part_Declarative_Items.env_in} := ${generic_package_declaration.env_in};
.)

Rules for generic_package_declaration. :
(.
      ${Private_Part_Declarative_Items.env_in} := ${generic_package_declaration.env_in};
.)

Rules for generic_package_declaration. :
(.
      ${end_name.env_in} := ${generic_package_declaration.env_in};
.)

Rules for generic_package_renaming. :
(.
      ${generic_package_renaming.env_out} := ${generic_package_renaming.env_in};
.)

Rules for generic_package_renaming. :
(.
      ${Generic_Formal_Part.env_in} := ${generic_package_renaming.env_in};
.)

Rules for generic_package_renaming. :
(.
      ${Names.env_in} := ${generic_package_renaming.env_in};
.)

Rules for generic_package_renaming. :
(.
      ${Renamed_Entity.env_in} := ${generic_package_renaming.env_in};
.)

Rules for generic_package_renaming. :
(.
      ${Aspect_Specifications.env_in} := ${generic_package_renaming.env_in};
.)

Rules for generic_procedure_declaration. :
(.
      ${generic_procedure_declaration.env_out} := ${generic_procedure_declaration.env_in};
.)

Rules for generic_procedure_declaration. :
(.
      ${Generic_Formal_Part.env_in} := ${generic_procedure_declaration.env_in};
.)

Rules for generic_procedure_declaration. :
(.
      ${Names.env_in} := ${generic_procedure_declaration.env_in};
.)

Rules for generic_procedure_declaration. :
(.
      ${Parameter_Profile.env_in} := ${generic_procedure_declaration.env_in};
.)

Rules for generic_procedure_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${generic_procedure_declaration.env_in};
.)

Rules for generic_procedure_renaming. :
(.
      ${generic_procedure_renaming.env_out} := ${generic_procedure_renaming.env_in};
.)

Rules for generic_procedure_renaming. :
(.
      ${Generic_Formal_Part.env_in} := ${generic_procedure_renaming.env_in};
.)

Rules for generic_procedure_renaming. :
(.
      ${Names.env_in} := ${generic_procedure_renaming.env_in};
.)

Rules for generic_procedure_renaming. :
(.
      ${Renamed_Entity.env_in} := ${generic_procedure_renaming.env_in};
.)

Rules for generic_procedure_renaming. :
(.
      ${Aspect_Specifications.env_in} := ${generic_procedure_renaming.env_in};
.)

Rules for goto_statement. :
(.
      ${Goto_Label.env_in} := ${goto_statement.env_in};
.)

Rules for if_expression.Expression_Paths :
(.
      ${Expression_Paths.env_in} := ${if_expression.env_in};
.)

Rules for if_expression_path. :
(.
      ${Condition_Expression.env_in} := ${if_expression_path.env_in};
.)

Rules for if_expression_path. :
(.
      ${Dependent_Expression.env_in} := ${if_expression_path.env_in};
.)

Rules for if_path. :
(.
      ${Condition_Expression.env_in} := ${if_path.env_in};
.)

Rules for if_path. :
(.
      ${Sequence_Of_Statements.env_in} := ${if_path.env_in};
.)

Rules for if_statement. :
(.
      ${Statement_Paths.env_in} := ${if_statement.env_in};
.)

Rules for incomplete_type_declaration. :
(.
      ${incomplete_type_declaration.env_out} := ${incomplete_type_declaration.env_in};
.)

Rules for incomplete_type_declaration. :
(.
      ${Names.env_in} := ${incomplete_type_declaration.env_in};
.)

Rules for incomplete_type_declaration. :
(.
      ${Discriminant_Part.env_in} := ${incomplete_type_declaration.env_in};
.)

Rules for interface_type_definition. :
(.
      ${interface_type_definition.env_out} := ${interface_type_definition.env_in};
.)

Rules for interface_type_definition. :
(.
      ${Progenitor_List.env_in} := ${interface_type_definition.env_in};
.)

Rules for known_discriminant_part. :
(.
      ${known_discriminant_part.env_out} := ${known_discriminant_part.env_in};
.)

Rules for known_discriminant_part. :
(.
      ${Discriminants.env_in} := ${known_discriminant_part.env_in};
.)

Rules for label_decorator. :
(.
      ${Label_Names.env_in} := ${label_decorator.env_in};
.)

Rules for label_decorator. :
(.
      ${Unlabeled_Statement.env_in} := ${label_decorator.env_in};
.)

Rules for loop_parameter_specification. :
(.
      ${loop_parameter_specification.env_out} := ${loop_parameter_specification.env_in};
.)

Rules for loop_parameter_specification. :
(.
      ${Names.env_in} := ${loop_parameter_specification.env_in};
.)

Rules for loop_parameter_specification. :
(.
      ${Specification_Subtype_Definition.env_in} := ${loop_parameter_specification.env_in};
.)

Rules for loop_statement. :
(.
      ${Loop_Statements.env_in} := ${loop_statement.env_in};
.)

Rules for membership_test. :
(.
      ${Membership_Test_Expression.env_in} := ${membership_test.env_in};
.)

Rules for membership_test. :
(.
      ${Membership_Test_Choices.env_in} := ${membership_test.env_in};
.)

Rules for modular_type_definition. :
(.
      ${modular_type_definition.env_out} := ${modular_type_definition.env_in};
.)

Rules for modular_type_definition. :
(.
      ${Mod_Static_Expression.env_in} := ${modular_type_definition.env_in};
.)

Rules for null_component. :
(.
      ${null_component.env_out} := ${null_component.env_in};
.)

Rules for null_record_definition. :
(.
      ${null_record_definition.env_out} := ${null_record_definition.env_in};
.)

Rules for number_declaration. :
(.
      ${number_declaration.env_out} := ${number_declaration.env_in};
.)

Rules for number_declaration. :
(.
      ${Names.env_in} := ${number_declaration.env_in};
.)

Rules for number_declaration. :
(.
      ${Initialization_Expression.env_in} := ${number_declaration.env_in};
.)

Rules for object_declaration. :
(.
      ${object_declaration.env_out} := ${object_declaration.env_in};
.)

Rules for object_declaration. :
(.
      ${Names.env_in} := ${object_declaration.env_in};
.)

Rules for object_declaration. :
(.
      ${Object_Declaration_Subtype.env_in} := ${object_declaration.env_in};
.)

Rules for object_declaration. :
(.
      ${Initialization_Expression.env_in} := ${object_declaration.env_in};
.)

Rules for object_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${object_declaration.env_in};
.)

Rules for object_renaming_declaration. :
(.
      ${object_renaming_declaration.env_out} := ${object_renaming_declaration.env_in};
.)

Rules for object_renaming_declaration. :
(.
      ${Names.env_in} := ${object_renaming_declaration.env_in};
.)

Rules for object_renaming_declaration. :
(.
      ${Object_Declaration_Subtype.env_in} := ${object_renaming_declaration.env_in};
.)

Rules for object_renaming_declaration. :
(.
      ${Renamed_Entity.env_in} := ${object_renaming_declaration.env_in};
.)

Rules for object_renaming_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${object_renaming_declaration.env_in};
.)

Rules for ordinary_fixed_point_definition. :
(.
      ${ordinary_fixed_point_definition.env_out} := ${ordinary_fixed_point_definition.env_in};
.)

Rules for ordinary_fixed_point_definition. :
(.
      ${Delta_Expression.env_in} := ${ordinary_fixed_point_definition.env_in};
.)

Rules for ordinary_fixed_point_definition. :
(.
      ${Real_Range_Constraint.env_in} := ${ordinary_fixed_point_definition.env_in};
.)

Rules for package_body. :
(.
      ${package_body.env_out} := ${package_body.env_in};
.)

Rules for package_body. :
(.
      ${Names.env_in} := ${package_body.env_in};
.)

Rules for package_body. :
(.
      ${Aspect_Specifications.env_in} := ${package_body.env_in};
.)

Rules for package_body. :
(.
      ${Body_Declarative_Items.env_in} := ${package_body.env_in};
.)

Rules for package_body. :
(.
      ${Body_Statements.env_in} := ${package_body.env_in};
.)

Rules for package_body. :
(.
      ${Body_Exception_Handlers.env_in} := ${package_body.env_in};
.)

Rules for package_body. :
(.
      ${end_name.env_in} := ${package_body.env_in};
.)

Rules for package_body_stub. :
(.
      ${package_body_stub.env_out} := ${package_body_stub.env_in};
.)

Rules for package_body_stub. :
(.
      ${Names.env_in} := ${package_body_stub.env_in};
.)

Rules for package_body_stub. :
(.
      ${Aspect_Specifications.env_in} := ${package_body_stub.env_in};
.)

Rules for package_declaration. :
(.
      ${package_declaration.env_out} := ${package_declaration.env_in};
.)

Rules for package_declaration. :
(.
      ${Names.env_in} := ${package_declaration.env_in};
.)

Rules for package_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${package_declaration.env_in};
.)

Rules for package_declaration. :
(.
      ${Visible_Part_Declarative_Items.env_in} := ${package_declaration.env_in};
.)

Rules for package_declaration. :
(.
      ${Private_Part_Declarative_Items.env_in} := ${package_declaration.env_in};
.)

Rules for package_declaration. :
(.
      ${end_name.env_in} := ${package_declaration.env_in};
.)

Rules for package_instantiation. :
(.
      ${package_instantiation.env_out} := ${package_instantiation.env_in};
.)

Rules for package_instantiation. :
(.
      ${Names.env_in} := ${package_instantiation.env_in};
.)

Rules for package_instantiation. :
(.
      ${Generic_Unit_Name.env_in} := ${package_instantiation.env_in};
.)

Rules for package_instantiation. :
(.
      ${Generic_Actual_Part.env_in} := ${package_instantiation.env_in};
.)

Rules for package_instantiation. :
(.
      ${Aspect_Specifications.env_in} := ${package_instantiation.env_in};
.)

Rules for package_renaming_declaration. :
(.
      ${package_renaming_declaration.env_out} := ${package_renaming_declaration.env_in};
.)

Rules for package_renaming_declaration. :
(.
      ${Names.env_in} := ${package_renaming_declaration.env_in};
.)

Rules for package_renaming_declaration. :
(.
      ${Renamed_Entity.env_in} := ${package_renaming_declaration.env_in};
.)

Rules for package_renaming_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${package_renaming_declaration.env_in};
.)

Rules for parameter_association. :
(.
      ${Formal_Parameter.env_in} := ${parameter_association.env_in};
.)

Rules for parameter_association. :
(.
      ${Actual_Parameter.env_in} := ${parameter_association.env_in};
.)

Rules for parameter_specification. :
(.
      ${parameter_specification.env_out} := ${parameter_specification.env_in};
.)

Rules for parameter_specification. :
(.
      ${Names.env_in} := ${parameter_specification.env_in};
.)

Rules for parameter_specification. :
(.
      ${Object_Declaration_Subtype.env_in} := ${parameter_specification.env_in};
.)

Rules for parameter_specification. :
(.
      ${Initialization_Expression.env_in} := ${parameter_specification.env_in};
.)

Rules for pragma_argument_association. :
(.
      ${Formal_Parameter.env_in} := ${pragma_argument_association.env_in};
.)

Rules for pragma_argument_association. :
(.
      ${Actual_Parameter.env_in} := ${pragma_argument_association.env_in};
.)

Rules for pragma_node. :
(.
      ${pragma_node.env_out} := ${pragma_node.env_in};
.)

Rules for pragma_node. :
(.
      ${Formal_Parameter.env_in} := ${pragma_node.env_in};
.)

Rules for pragma_node. :
(.
      ${Pragma_Argument_Associations.env_in} := ${pragma_node.env_in};
.)

Rules for private_extension_declaration. :
(.
      ${private_extension_declaration.env_out} := ${private_extension_declaration.env_in};
.)

Rules for private_extension_declaration. :
(.
      ${Names.env_in} := ${private_extension_declaration.env_in};
.)

Rules for private_extension_declaration. :
(.
      ${Discriminant_Part.env_in} := ${private_extension_declaration.env_in};
.)

Rules for private_extension_declaration. :
(.
      ${Type_Declaration_View.env_in} := ${private_extension_declaration.env_in};
.)

Rules for private_extension_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${private_extension_declaration.env_in};
.)

Rules for private_extension_definition. :
(.
      ${private_extension_definition.env_out} := ${private_extension_definition.env_in};
.)

Rules for private_extension_definition. :
(.
      ${Ancestor_Subtype_Indication.env_in} := ${private_extension_definition.env_in};
.)

Rules for private_extension_definition. :
(.
      ${Progenitor_List.env_in} := ${private_extension_definition.env_in};
.)

Rules for private_type_declaration. :
(.
      ${private_type_declaration.env_out} := ${private_type_declaration.env_in};
.)

Rules for private_type_declaration. :
(.
      ${Names.env_in} := ${private_type_declaration.env_in};
.)

Rules for private_type_declaration. :
(.
      ${Discriminant_Part.env_in} := ${private_type_declaration.env_in};
.)

Rules for private_type_declaration. :
(.
      ${Type_Declaration_View.env_in} := ${private_type_declaration.env_in};
.)

Rules for private_type_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${private_type_declaration.env_in};
.)

Rules for private_type_definition. :
(.
      ${private_type_definition.env_out} := ${private_type_definition.env_in};
.)

Rules for procedure_body. :
(.
      ${procedure_body.env_out} := ${procedure_body.env_in};
.)

Rules for procedure_body. :
(.
      ${Names.env_in} := ${procedure_body.env_in};
.)

Rules for procedure_body. :
(.
      ${Parameter_Profile.env_in} := ${procedure_body.env_in};
.)

Rules for procedure_body. :
(.
      ${Aspect_Specifications.env_in} := ${procedure_body.env_in};
.)

Rules for procedure_body. :
(.
      ${Body_Declarative_Items.env_in} := ${procedure_body.env_in};
.)

Rules for procedure_body. :
(.
      ${Body_Statements.env_in} := ${procedure_body.env_in};
.)

Rules for procedure_body. :
(.
      ${Body_Exception_Handlers.env_in} := ${procedure_body.env_in};
.)

Rules for procedure_body. :
(.
      ${end_name.env_in} := ${procedure_body.env_in};
.)

Rules for procedure_call_statement. :
(.
      ${Called_Name.env_in} := ${procedure_call_statement.env_in};
.)

Rules for procedure_call_statement. :
(.
      ${Call_Statement_Parameters.env_in} := ${procedure_call_statement.env_in};
.)

Rules for procedure_declaration. :
(.
      ${procedure_declaration.env_out} := ${procedure_declaration.env_in};
.)

Rules for procedure_declaration. :
(.
      ${Names.env_in} := ${procedure_declaration.env_in};
.)

Rules for procedure_declaration. :
(.
      ${Parameter_Profile.env_in} := ${procedure_declaration.env_in};
.)

Rules for procedure_declaration. :
(.
      ${Renamed_Entity.env_in} := ${procedure_declaration.env_in};
.)

Rules for procedure_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${procedure_declaration.env_in};
.)

Rules for procedure_instantiation. :
(.
      ${procedure_instantiation.env_out} := ${procedure_instantiation.env_in};
.)

Rules for procedure_instantiation. :
(.
      ${Names.env_in} := ${procedure_instantiation.env_in};
.)

Rules for procedure_instantiation. :
(.
      ${Generic_Unit_Name.env_in} := ${procedure_instantiation.env_in};
.)

Rules for procedure_instantiation. :
(.
      ${Generic_Actual_Part.env_in} := ${procedure_instantiation.env_in};
.)

Rules for procedure_instantiation. :
(.
      ${Aspect_Specifications.env_in} := ${procedure_instantiation.env_in};
.)

Rules for protected_body. :
(.
      ${protected_body.env_out} := ${protected_body.env_in};
.)

Rules for protected_body. :
(.
      ${Names.env_in} := ${protected_body.env_in};
.)

Rules for protected_body. :
(.
      ${Aspect_Specifications.env_in} := ${protected_body.env_in};
.)

Rules for protected_body. :
(.
      ${Protected_Operation_Items.env_in} := ${protected_body.env_in};
.)

Rules for protected_body_stub. :
(.
      ${protected_body_stub.env_out} := ${protected_body_stub.env_in};
.)

Rules for protected_body_stub. :
(.
      ${Names.env_in} := ${protected_body_stub.env_in};
.)

Rules for protected_body_stub. :
(.
      ${Aspect_Specifications.env_in} := ${protected_body_stub.env_in};
.)

Rules for protected_definition. :
(.
      ${protected_definition.env_out} := ${protected_definition.env_in};
.)

Rules for protected_definition. :
(.
      ${Visible_Protected_Items.env_in} := ${protected_definition.env_in};
.)

Rules for protected_definition. :
(.
      ${Private_Protected_Items.env_in} := ${protected_definition.env_in};
.)

Rules for protected_type_declaration. :
(.
      ${protected_type_declaration.env_out} := ${protected_type_declaration.env_in};
.)

Rules for protected_type_declaration. :
(.
      ${Names.env_in} := ${protected_type_declaration.env_in};
.)

Rules for protected_type_declaration. :
(.
      ${Discriminant_Part.env_in} := ${protected_type_declaration.env_in};
.)

Rules for protected_type_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${protected_type_declaration.env_in};
.)

Rules for protected_type_declaration. :
(.
      ${Progenitor_List.env_in} := ${protected_type_declaration.env_in};
.)

Rules for protected_type_declaration. :
(.
      ${Type_Declaration_View.env_in} := ${protected_type_declaration.env_in};
.)

Rules for qualified_expression. :
(.
      ${Converted_Or_Qualified_Subtype_Mark.env_in} := ${qualified_expression.env_in};
.)

Rules for qualified_expression. :
(.
      ${Converted_Or_Qualified_Expression.env_in} := ${qualified_expression.env_in};
.)

Rules for quantified_expression. :
(.
      ${iterator_specification.env_in} := ${quantified_expression.env_in};
.)

Rules for quantified_expression. :
(.
      ${predicate.env_in} := ${quantified_expression.env_in};
.)

Rules for raise_statement. :
(.
      ${Raised_Exception.env_in} := ${raise_statement.env_in};
.)

Rules for raise_statement. :
(.
      ${Raise_Statement_Message.env_in} := ${raise_statement.env_in};
.)

Rules for range_attribute_reference.Range_Attribute :
(.
      ${Range_Attribute.env_in} := ${range_attribute_reference.env_in};
.)

Rules for range_attribute_reference_dr.Range_Attribute :
(.
      ${Range_Attribute.env_in} := ${range_attribute_reference_dr.env_in};
.)

Rules for record_aggregate. :
(.
      ${Record_Component_Associations.env_in} := ${record_aggregate.env_in};
.)

Rules for record_definition. :
(.
      ${record_definition.env_out} := ${record_definition.env_in};
.)

Rules for record_definition. :
(.
      ${Record_Components.env_in} := ${record_definition.env_in};
.)

Rules for record_representation_clause. :
(.
      ${record_representation_clause.env_out} := ${record_representation_clause.env_in};
.)

Rules for record_representation_clause. :
(.
      ${Representation_Clause_Name.env_in} := ${record_representation_clause.env_in};
.)

Rules for record_representation_clause. :
(.
      ${Mod_Clause_Expression.env_in} := ${record_representation_clause.env_in};
.)

Rules for record_representation_clause. :
(.
      ${Component_Clauses.env_in} := ${record_representation_clause.env_in};
.)

Rules for record_type_definition. :
(.
      ${record_type_definition.env_out} := ${record_type_definition.env_in};
.)

Rules for record_type_definition. :
(.
      ${Record_Definition.env_in} := ${record_type_definition.env_in};
.)

Rules for requeue_statement. :
(.
      ${Requeue_Entry_Name.env_in} := ${requeue_statement.env_in};
.)

Rules for return_object_specification. :
(.
      ${return_object_specification.env_out} := ${return_object_specification.env_in};
.)

Rules for return_object_specification. :
(.
      ${Names.env_in} := ${return_object_specification.env_in};
.)

Rules for return_object_specification. :
(.
      ${Object_Declaration_Subtype.env_in} := ${return_object_specification.env_in};
.)

Rules for return_object_specification. :
(.
      ${Initialization_Expression.env_in} := ${return_object_specification.env_in};
.)

Rules for select_or_path. :
(.
      ${Guard.env_in} := ${select_or_path.env_in};
.)

Rules for select_or_path. :
(.
      ${Sequence_Of_Statements.env_in} := ${select_or_path.env_in};
.)

Rules for selected_component. :
(.
      ${prefix.env_in} := ${selected_component.env_in};
.)

Rules for selected_component. :
(.
      ${Selector.env_in} := ${selected_component.env_in};
.)

Rules for selected_identifier. :
(.
      ${Prefix.env_in} := ${selected_identifier.env_in};
.)

Rules for selected_identifier. :
(.
      ${Selector.env_in} := ${selected_identifier.env_in};
.)

Rules for selective_accept. :
(.
      ${Selective_Statement_Paths.env_in} := ${selective_accept.env_in};
.)

Rules for short_circuit. :
(.
      ${Short_Circuit_Operation_Left_Expression.env_in} := ${short_circuit.env_in};
.)

Rules for short_circuit. :
(.
      ${Short_Circuit_Operation_Right_Expression.env_in} := ${short_circuit.env_in};
.)

Rules for signed_integer_type_definition. :
(.
      ${signed_integer_type_definition.env_out} := ${signed_integer_type_definition.env_in};
.)

Rules for signed_integer_type_definition. :
(.
      ${Integer_Constraint.env_in} := ${signed_integer_type_definition.env_in};
.)

Rules for simple_expression_range. :
(.
      ${Lower_Bound.env_in} := ${simple_expression_range.env_in};
.)

Rules for simple_expression_range. :
(.
      ${Upper_Bound.env_in} := ${simple_expression_range.env_in};
.)

Rules for simple_expression_range_dr. :
(.
      ${Lower_Bound.env_in} := ${simple_expression_range_dr.env_in};
.)

Rules for simple_expression_range_dr. :
(.
      ${Upper_Bound.env_in} := ${simple_expression_range_dr.env_in};
.)

Rules for simple_return_statement. :
(.
      ${Return_Expression.env_in} := ${simple_return_statement.env_in};
.)

Rules for single_protected_declaration. :
(.
      ${single_protected_declaration.env_out} := ${single_protected_declaration.env_in};
.)

Rules for single_protected_declaration. :
(.
      ${Names.env_in} := ${single_protected_declaration.env_in};
.)

Rules for single_protected_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${single_protected_declaration.env_in};
.)

Rules for single_protected_declaration. :
(.
      ${Progenitor_List.env_in} := ${single_protected_declaration.env_in};
.)

Rules for single_protected_declaration. :
(.
      ${Object_Declaration_Subtype.env_in} := ${single_protected_declaration.env_in};
.)

Rules for single_task_declaration. :
(.
      ${single_task_declaration.env_out} := ${single_task_declaration.env_in};
.)

Rules for single_task_declaration. :
(.
      ${Names.env_in} := ${single_task_declaration.env_in};
.)

Rules for single_task_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${single_task_declaration.env_in};
.)

Rules for single_task_declaration. :
(.
      ${Progenitor_List.env_in} := ${single_task_declaration.env_in};
.)

Rules for single_task_declaration. :
(.
      ${Object_Declaration_Subtype.env_in} := ${single_task_declaration.env_in};
.)

Rules for subtype_declaration. :
(.
      ${subtype_declaration.env_out} := ${subtype_declaration.env_in};
.)

Rules for subtype_declaration. :
(.
      ${Names.env_in} := ${subtype_declaration.env_in};
.)

Rules for subtype_declaration. :
(.
      ${Type_Declaration_View.env_in} := ${subtype_declaration.env_in};
.)

Rules for subtype_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${subtype_declaration.env_in};
.)

Rules for subtype_indication. :
(.
      ${subtype_indication.env_out} := ${subtype_indication.env_in};
.)

Rules for subtype_indication. :
(.
      ${subtype_mark.env_in} := ${subtype_indication.env_in};
.)

Rules for subtype_indication. :
(.
      ${Subtype_Constraint.env_in} := ${subtype_indication.env_in};
.)

Rules for subunit. :
(.
      ${subunit.env_out} := ${subunit.env_in};
.)

Rules for subunit. :
(.
      ${Context_Clause_Elements.env_in} := ${subunit.env_in};
.)

Rules for subunit. :
(.
      ${parent_unit_name.env_in} := ${subunit.env_in};
.)

Rules for subunit. :
(.
      ${Unit_Declaration.env_in} := ${subunit.env_in};
.)

Rules for task_body. :
(.
      ${task_body.env_out} := ${task_body.env_in};
.)

Rules for task_body. :
(.
      ${Names.env_in} := ${task_body.env_in};
.)

Rules for task_body. :
(.
      ${Aspect_Specifications.env_in} := ${task_body.env_in};
.)

Rules for task_body. :
(.
      ${Body_Declarative_Items.env_in} := ${task_body.env_in};
.)

Rules for task_body. :
(.
      ${Body_Statements.env_in} := ${task_body.env_in};
.)

Rules for task_body. :
(.
      ${Body_Exception_Handlers.env_in} := ${task_body.env_in};
.)

Rules for task_body_stub. :
(.
      ${task_body_stub.env_out} := ${task_body_stub.env_in};
.)

Rules for task_body_stub. :
(.
      ${Names.env_in} := ${task_body_stub.env_in};
.)

Rules for task_body_stub. :
(.
      ${Aspect_Specifications.env_in} := ${task_body_stub.env_in};
.)

Rules for task_definition. :
(.
      ${task_definition.env_out} := ${task_definition.env_in};
.)

Rules for task_definition. :
(.
      ${Visible_Task_Items.env_in} := ${task_definition.env_in};
.)

Rules for task_definition. :
(.
      ${Private_Task_Items.env_in} := ${task_definition.env_in};
.)

Rules for task_type_declaration. :
(.
      ${task_type_declaration.env_out} := ${task_type_declaration.env_in};
.)

Rules for task_type_declaration. :
(.
      ${Names.env_in} := ${task_type_declaration.env_in};
.)

Rules for task_type_declaration. :
(.
      ${Discriminant_Part.env_in} := ${task_type_declaration.env_in};
.)

Rules for task_type_declaration. :
(.
      ${Aspect_Specifications.env_in} := ${task_type_declaration.env_in};
.)

Rules for task_type_declaration. :
(.
      ${Progenitor_List.env_in} := ${task_type_declaration.env_in};
.)

Rules for task_type_declaration. :
(.
      ${Type_Declaration_View.env_in} := ${task_type_declaration.env_in};
.)

Rules for then_abort_path. :
(.
      ${Sequence_Of_Statements.env_in} := ${then_abort_path.env_in};
.)

Rules for unconstrained_array_definition. :
(.
      ${unconstrained_array_definition.env_out} := ${unconstrained_array_definition.env_in};
.)

Rules for unconstrained_array_definition. :
(.
      ${Index_Subtype_Definitions.env_in} := ${unconstrained_array_definition.env_in};
.)

Rules for unconstrained_array_definition. :
(.
      ${Array_Component_Definition.env_in} := ${unconstrained_array_definition.env_in};
.)

Rules for units.compilation_unit :
(.
      ${compilation_unit.env_in} := Gela.Pass_Utils.Create_Unit
        (Comp       => Self.Compilation,
         Full_Name  => ${compilation_unit.full_name},
         Unit_Kind  => ${compilation_unit.unit_kind});
.)

Rules for units.compilation_unit :
(.
      ${units.env_out} := ${units.env_in};
.)

Rules for units.compilation_unit :
(.
      ${units.env_out} := ${compilation_unit.env_out};
.)

Rules for unknown_discriminant_part. :
(.
      ${unknown_discriminant_part.env_out} := ${unknown_discriminant_part.env_in};
.)

Rules for use_package_clause. :
(.
      ${use_package_clause.env_out} := ${use_package_clause.env_in};
.)

Rules for use_package_clause. :
(.
      ${Clause_Names.env_in} := ${use_package_clause.env_in};
.)

Rules for use_type_clause. :
(.
      ${use_type_clause.env_out} := ${use_type_clause.env_in};
.)

Rules for use_type_clause. :
(.
      ${Type_Clause_Names.env_in} := ${use_type_clause.env_in};
.)

Rules for variant. :
(.
      ${variant.env_out} := ${variant.env_in};
.)

Rules for variant. :
(.
      ${Variant_Choices.env_in} := ${variant.env_in};
.)

Rules for variant. :
(.
      ${Record_Components.env_in} := ${variant.env_in};
.)

Rules for variant_part. :
(.
      ${variant_part.env_out} := ${variant_part.env_in};
.)

Rules for variant_part. :
(.
      ${Discriminant_Direct_Name.env_in} := ${variant_part.env_in};
.)

Rules for variant_part. :
(.
      ${Variants.env_in} := ${variant_part.env_in};
.)

Rules for while_loop_statement. :
(.
      ${While_Condition.env_in} := ${while_loop_statement.env_in};
.)

Rules for while_loop_statement. :
(.
      ${Loop_Statements.env_in} := ${while_loop_statement.env_in};
.)

Rules for with_clause. :
(.
      ${with_clause.env_out} := ${with_clause.env_in};
.)

Rules for with_clause. :
(.
      ${Clause_Names.env_in} := ${with_clause.env_in};
.)
